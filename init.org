#+STARTUP: content

* Initial configuration

** Initialize straight
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'cl-lib))

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Initialize leaf
#+begin_src emacs-lisp
  (straight-use-package 'leaf)
  (straight-use-package 'leaf-keywords)

  (require 'leaf)

  (leaf leaf-keywords
    :require t
    :config
    (leaf-keywords-init))
#+end_src

** 起動時間を計測する
#+begin_src emacs-lisp
  (defconst my:time-zero (current-time))
  (defvar my:time-list nil)

  (defun my:time-lag-calc (lag label)
    (if (assoc label my:time-list)
        (setcdr (assoc label my:time-list)
                (- lag (cdr (assoc label my:time-list))))
      (setq my:time-list (cons (cons label lag) my:time-list))))

  (defun my:time-lag (label)
    (let* ((now (current-time))
           (min (- (car now) (car my:time-zero)))
           (sec (- (car (cdr now)) (car (cdr my:time-zero))))
           (msec (/ (- (car (cdr (cdr now)))
                       (car (cdr (cdr my:time-zero))))
                    1000))
           (lag (+ (* 60000 min) (* 1000 sec) msec)))
      (my:time-lag-calc lag label)))

  (defun my:time-lag-print ()
    (message (prin1-to-string
              (sort my:time-list
                    (lambda  (x y)  (> (cdr x) (cdr y)))))))

  (my:time-lag "total")

  (add-hook 'after-init-hook #'(lambda () (my:time-lag "total") (my:time-lag-print)) t)
#+end_src

* ユーザーの環境定義

** カスタムの定義
基本的には、defcustomを使っていった方がいいということなので、defcustomを使う。

#+begin_src emacs-lisp
  (defgroup my nil "My custom group" :group 'configuration)
  (defcustom my:font-size 10.5 "current theme for me"
    :group 'my
    :type 'number)
  (defvar my:input-method "japanese-mozc")
  (defvar my:save-buffer-hook nil
    "ユーザーが独自に登録可能なsave-buffer-hookへのhook")
  (defvar my:last-search-char nil
    "character that is last searched")
  (defvar my:last-search-char-direction 'forward
    "direction that is last searched")
  (defvar my:tmux-bin-path nil "the executable path of tmux")
  (defvar my:dired-default-file-coding-system nil)

  (defvar my:dired-file-coding-system 'no-conversion)

  (defvar my:ispell-regexp-ja "[一-龠ぁ-🈀ァ-𛀀ー・、。々]+"
    "Regular expression to match a Japanese word.
  The expression can be [^\000-\377]+, [^!-~]+, or [一-龠ぁ-🈀ァ-𛀀ー・、。々]+")

  (defvar my:trailing-whitespace-exclude-modes '(org-mode))
  (defvar my:user-local-exec-path "~/.local/bin")
#+end_src

Langtoolに関する設定変数など。

#+begin_src emacs-lisp
  (defvar my:langtool-version "4.2")
  (defvar my:langtool-cli-path (expand-file-name (locate-user-emacs-file
                                                  (format "share/LanguageTool-%s/languagetool-commandline.jar"
                                                          my:langtool-version))))

#+end_src

SKKに関する変数。辞書サーバーを使いたい場合は、 ~my:use-skkserver~ を non-nilにしたらよい。

#+begin_src emacs-lisp

  (defvar skk-user-directory (expand-file-name "skk" user-emacs-directory))
  ;; SKK server(利用するのはyaskkserv2を利用する
  (defvar my:use-skkserver t)
  ;; SKK serverをbuildする(要cargo)
  (defvar my:build-skkserver nil)
  ;; yaskkserv2のバージョン
  (defvar my:yaskkserv2-version "0.1.1")
#+end_src

posframeを使うかどうか。

#+begin_src emacs-lisp
  (defvar my:use-posframe t)
#+end_src

*** org-roam
#+begin_src emacs-lisp
  (defvar my:org-roam-db-location "~/.emacs.d/share/org-roam.db")
  (defvar my:org-roam-directory "~/Dropbox/git/roam")
  (defvar my:org-roam-index-file (expand-file-name "index.org" my:org-roam-directory))
#+end_src

** 環境ごとのパス設定
パスとかは、環境によって異なるのが普通なので、これらは別ファイルで設定できるようにする。

#+begin_src emacs-lisp
  (defvar my:mozc-el-locate nil)
  (defvar my:mozc-helper-locate nil)
  (defvar my:rust-src-location nil)
  (defvar my:rust-racer-path nil)
  (defvar my:virtualenv-path nil)
  (defvar my:roswell-path nil)
  (defvar my:gtd-base-path nil)
  (defvar my:use-mozc-el nil)
  (defvar my:migemo-command nil)
  (defvar my:migemo-dictionary nil)
#+end_src

** 外部設定の読込み
git管理外になっているファイル。これは、パス関連など、環境毎に違うので登録するとめんどくさいものに対して利用する。
#+begin_src emacs-lisp
  (let ((user-env (locate-user-emacs-file "conf/user-env.el")))
    (load user-env t))
#+end_src

** 実行パスの設定
exec-pathに必要なパスを追加する。

#+begin_src emacs-lisp
(add-to-list 'exec-path (expand-file-name "~/.npm/bin"))
(add-to-list 'exec-path (expand-file-name "~/.anyenv/envs/nodenv/shims"))
(add-to-list 'exec-path "/usr/local/bin")
(add-to-list 'exec-path "/usr/bin")
(add-to-list 'exec-path "/usr/sbin")
(add-to-list 'exec-path my:user-local-exec-path)
(add-to-list 'exec-path (expand-file-name "bin" my:roswell-path))
#+end_src

** init.elの内容
#+begin_src emacs-lisp
  (defvar my:init.el-content
    '(progn
       (require 'org)
       ;; Do always overwrite init.el from generated source from init.org
       (org-babel-tangle-file (expand-file-name "init.org" user-emacs-directory)
                              (expand-file-name "init.el" user-emacs-directory))
       (load (expand-file-name "init.el" user-emacs-directory))
       (message "Once kill emacs for apply new init.el written from init.org")
       (kill-emacs))

    "init.el contents"
    )
#+end_src

* Emacs base configuration
** 基本設定
*** languages
right-to-leftを無効化して、多少でもパフォーマンスを上げる。
#+begin_src emacs-lisp
  (setq-default bidi-display-reordering nil)
#+end_src

言語環境は日本語。かつ、キーボードから入力される文字コードはutf-8。
#+begin_src emacs-lisp
  (set-language-environment 'Japanese)
  (set-keyboard-coding-system 'utf-8)
#+end_src

文字コードの推測ではutf-8を優先する。
#+begin_src emacs-lisp
  (setq buffer-file-coding-system 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
#+end_src

*** enable functions
各種のデフォルトでは無効化されている関数を有効化する。
#+begin_src emacs-lisp
  (put 'narrow-to-defun 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'set-goal-column 'disabled nil)
#+end_src

backspaceまたはdeleteキーで削除が行えるようにする。
#+begin_src emacs-lisp
  (if (fboundp 'normal-erase-is-backspace-mode)
      (normal-erase-is-backspace-mode 0))
#+end_src

*** change default behaviors
**** スタートページを表示しない
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src
**** yes/noではなくy/nで回答できるようにする
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
**** バックアップファイルは作らない
#+begin_src emacs-lisp
  (setq backup-inhibited t)
#+end_src
**** 自動保存ファイルは作らない
#+begin_src emacs-lisp
  (setq auto-save-default nil)
#+end_src
**** タブ入力時のインデント設定
#+begin_src emacs-lisp
  (setq indent-line-function #'indent-relative-first-indent-point)
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+end_src
**** コメントのスタイル設定
#+begin_src emacs-lisp
  (setq comment-style 'indent)
#+end_src
**** 画面端での折り返しを有効にする
#+begin_src emacs-lisp
  (setq truncate-lines t)
#+end_src
**** auto-fill時にインデントを考慮する
#+begin_src emacs-lisp
  (setq adaptive-fill-regexp "[ \t]*")
#+end_src
**** lockファイルは作成しない
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src
**** bufferのrevertをすぐに行うようにする
#+begin_src emacs-lisp
  (setq auto-revert-interval 1)
#+end_src
**** processから読み出せる量を増やす
#+begin_src emacs-lisp
  (setq read-process-output-max (* 1024 1024))
#+end_src
**** capfの挙動を変更する
capfでは大文字小文字を区別しない。
#+begin_src emacs-lisp
  (setq completion-ignore-case t)
  (setq completion-styles `(basic
                            ,(if (version<= emacs-version "27.0") 'helm-flex 'flex)))
#+end_src
**** ring bellは鳴らさない
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

*** macOS限定の設定
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-option-modifier 'alt)
    (setq mac-command-modifier 'meta))
#+end_src

*** font-lock
#+begin_src emacs-lisp
  (setq font-lock-support-mode 'jit-lock-mode)
#+end_src

**** 全角空白やタブに色をつける
#+begin_src emacs-lisp
  (defface my-face-b-1 '((t (:background "gray"))) "face for full-width space" :group 'my)
  (defface my-face-b-2 '((t (:background "gray26"))) "face for tab" :group 'my)
  (defface my-face-u-1 '((t (:foreground "SteelBlue" :underline t))) "" :group 'my)
  (defvar my-face-b-1 'my-face-b-1)
  (defvar my-face-b-2 'my-face-b-2)
  (defvar my-face-u-1 'my-face-u-1)

  (defun my:font-lock-mode (&rest args)
    (font-lock-add-keywords
     major-mode
     '(("\t" 0 my-face-b-2 append)
       ("　" 0 my-face-b-1 append)
       ("[ \t]+$" 0 my-face-u-1 append))))
  (advice-add 'font-lock-mode :before 'my:font-lock-mode)
#+end_src

*** 行番号を表示する
ただし、パフォーマンス上の問題から、27から導入されたネイティブの表示が使える場合のみ利用する。
#+begin_src emacs-lisp
  (leaf *line-number
    :if (version<= "27.0.0" emacs-version)
    :custom
    (display-line-numbers-width-start . t)
    ;; show relative line number as visual line
    (display-line-numbers-type . 'visual)
    :config
    (global-display-line-numbers-mode t))
#+end_src

*** グローバルに有効にするmode
#+begin_src emacs-lisp
  (global-font-lock-mode +1)

  (leaf *show-paren-mode
    :custom
    (show-paren-style . 'expression)
    :custom-face
    (show-paren-match . '((t (:background nil :foreground nil :underline t))))
    :config
    (show-paren-mode t))

  (transient-mark-mode 1)
#+end_src

*** GUI設定
GUIで起動しても、スクロールバーやメニューはいらないので表示しない。
行番号についても、ネイティブの表示があるので表示しない。

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (line-number-mode 0)
  (column-number-mode 0)
  (leaf *mini-frame
    :if (version<= "27" emacs-version)
    :config
    (setq resize-mini-frames t))
#+end_src

*** モードライン関連
#+begin_src emacs-lisp
  (set 'eol-mnemonic-dos "(CRLF)")
  (set 'eol-mnemonic-unix "(LF)")
  (set 'eol-mnemonic-mac "(CR)")
  (set 'eol-mnemonic-undecided "(?)")
#+end_src

*** GCの設定
~#x10000000~ = ~256MiB~ を閾値としておく。これはLSPの対策のため。

#+begin_src emacs-lisp
  (setq gc-cons-threshold #x10000000)
  (setq gc-cons-percentage 0.5)
  (setq garbage-collection-messages t)
#+end_src

** 標準パッケージ
*** browse-url
#+begin_src emacs-lisp
  (leaf browse-url
    :require t
    :config
    (cond
     ((executable-find "firefox-bin")
      (progn
        (setq browse-url-browser-function #'browse-url-firefox)
        (setq browse-url-generic-program "firefox-bin")
        (setq browse-url-firefox-program "firefox-bin")))
     ((executable-find "chromium")
      (progn
        (setq browse-url-browser-function #'browse-url-chromium)
        (setq browse-url-generic-program "chromium")))
     ((executable-find "vivaldi")
      (progn
        (setq browse-url-browser-function #'browse-url-chromium)
        (setq browse-url-generic-program "vivaldi")))))
#+end_src
*** server
#+begin_src emacs-lisp
  (leaf server
    :require t
    :config
    (unless (server-running-p)
      (server-start)))
#+end_src
*** dired
#+begin_src emacs-lisp
  (leaf dired
    :require t
    :preface
    (defun my:dired-up-directory ()
      (interactive)
      (find-alternate-file ".."))

    (defun my:dired-convert-coding-system ()
      "現在diredで選択されているファイルに対して、文字コードを変換する。"
      (let ((file (dired-get-filename))
            (coding-system-for-write my:dired-file-coding-system)
            failure)
        (condition-case err
            (with-temp-buffer
              (insert-file-contents file)
              (write-region (point-min) (point-max) file))
          (error (setq failure err)))
        (if (not failure)
            nil
          (dired-log "convert coding system error for %s:\n%s\n" file failure)
          (dired-make-relative file))))
    :bind
    (:dired-mode-map
     ("T" . my:dired-do-convert-coding-system)
     ("<backspace>" . my:dired-up-directory))
    :custom
    (dired-dwim-target . t)
    (dired-recursive-copies . 'always)
    (dired-recursive-deletes . 'always)
    (dired-listing-switches . "-al --group-directories-first"))
#+end_src
**** wdired
#+begin_src emacs-lisp
  (leaf wdired :require t
    :bind
    (:dired-mode-map
     ("E" . wdired-change-to-wdired-mode)))
#+end_src
*** uniquify
#+begin_src emacs-lisp
  (leaf uniquify
    :require t
    :custom
    (uniquify-buffer-name-style . 'forward)
    (uniquify-separator . "/")
    (uniquify-after-kill-buffer-p . t)    ; rename after killing uniquified
    (uniquify-ignore-buffers-re . "^\\*") ; don't muck with special buffers
    )
#+end_src
*** shell
#+begin_src emacs-lisp
  (leaf shell
    :require t
    :custom
    (explicit-shell-file-name . "/bin/bash")
    (shell-file-name . "/bin/bash")
    :config
    (setq shell-command-switch "-c")
    (setenv "EMACS" "t"))
#+end_src
*** flyspell
flyspellは、そのままだと日本語が混ざっていてもエラーにしてしまうので、日本語が混ざっている場合は無視するようにする。
#+begin_src emacs-lisp
  (leaf ispell
    :require t
    :config
    (when (executable-find "hunspell")
      (setq flyspell-default-dictionary "en_US")
      (setq ispell-program-name (executable-find "hunspell"))
      (setq ispell-dictionary "en_US")
      (setq ispell-local-dictionary-alist
            '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
      (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)

      ;; for performance
      (setq flyspell-issue-message-flag nil)))

  (leaf flyspell
    :require t
    :hook
    (flyspell-incorrect-hook . my:flyspell-skip-ja)
    :config
    (defun my:flyspell-skip-ja (beg end info)
      "Tell flyspell to skip a Japanese word.
  Call this on `flyspell-incorrect-hook'."
      (string-match my:ispell-regexp-ja (buffer-substring beg end)))

    (defun my:flyspell-enable ()
      "The function to enable flyspell in current buffer."
      (interactive)
      (flyspell-mode 1)))
#+end_src

** global-set-keyの設定
#+begin_src emacs-lisp
  (leaf *key-binding
    :config
    (leaf *global
      :config
      (global-set-key (kbd "C-z") nil)
      (global-set-key (kbd "C-h") #'backward-delete-char)
      (global-set-key (kbd "M-?") #'help-for-help)
      (global-set-key (kbd "M-d") #'my:kill-word-at-point)
      (global-set-key (kbd "C-m") #'newline-and-indent)
      (global-set-key (kbd "C-x /") #'dabbrev-expand)
      (global-set-key (kbd "C-x ,") #'delete-region)
      (global-set-key (kbd "M-;") #'comment-dwim)
      (global-set-key (kbd "C-x C-b") #'ibuffer)
      (global-set-key (kbd "C-_") #'redo)
      (global-set-key (kbd "M-y") #'consult-yank-pop)

      (global-set-key (kbd "C-c d") #'credmp/flymake-display-err-minibuf)

      (global-set-key [wheel-up] #'(lambda () "" (interactive) (scroll-down 1)))
      (global-set-key [wheel-down] #'(lambda () "" (interactive) (scroll-up 1)))
      (global-set-key [double-wheel-up] #'(lambda () "" (interactive) (scroll-down 1)))
      (global-set-key [double-wheel-down] #'(lambda () "" (interactive) (scroll-up 1)))
      (global-set-key [triple-wheel-up] #'(lambda () "" (interactive) (scroll-down 2)))
      (global-set-key [triple-wheel-down] #'(lambda () "" (interactive) (scroll-up 2)))

      (global-set-key (kbd "C-c l") #'org-store-link)
      (global-set-key (kbd "C-c a") #'org-agenda)
      (global-set-key (kbd "C-c c")  #'org-capture)
      (global-set-key (kbd "C-;") #'switch-to-buffer)
      (global-set-key (kbd "<f2>") nil))

    (leaf *map-local
      :config
      (define-key read-expression-map (kbd "TAB") #'lisp-complete-symbol)

      (define-key isearch-mode-map (kbd "C-h") #'isearch-delete-char)))
#+end_src

** 標準処理に対するadvice
#+begin_src emacs-lisp
  (leaf *advices
    :config
    (defun my:no-kill-new-duplicate (yank)
      (setq kill-ring (delete yank kill-ring)))
    (advice-add 'kill-new :before #'my:no-kill-new-duplicate))
#+end_src

** OSごとの設定
#+begin_src emacs-lisp
  (when window-system
    (cond
     ((eq window-system 'x)
      ;; window-systemがxの場合に実行される初期化elisp
      ;; x11を利用している場合、クリップボードの連携を有効にする。
      (setq select-enable-clipboard t
            select-enable-primary t))))
#+end_src

* ユーザー定義
** 便利関数など
#+begin_src emacs-lisp
  (defun my:buffer-name-list ()
    (mapcar (function buffer-name) (buffer-list)))

  (defun my:delete-trailing-whitespace ()
    (unless (seq-some (lambda (x) (eq major-mode x)) my:trailing-whitespace-exclude-modes)
      (delete-trailing-whitespace)))

  (add-hook 'my:save-buffer-hook #'my:delete-trailing-whitespace)
  (defun my:after-save-hook ()
    "自作の保存時のhook"
    (run-hooks 'my:save-buffer-hook))

  ;; hookを実行するようにする。
  (add-hook 'after-save-hook #'my:after-save-hook)

  (defun my:minor-mode-active-p (mode)
    "return specified minor mode is active or not"
    (let ((active-modes (cl-remove-if-not (lambda (it) (and (boundp it) (symbol-value it))) minor-mode-list)))
      (member mode active-modes)))
#+end_src

** 既存機能の拡張
*** 改行時に常にインデントを行うようにする
#+begin_src emacs-lisp
  (defun set-newline-and-indent ()
    (local-set-key (kbd "RET") 'newline-and-indent))
#+end_src

*** kill-regionの拡張
#+begin_src emacs-lisp
  (defun my:kill-word-or-kill-region (f &rest args)
    "kill-regionにおいて、リージョンが選択されていない場合にはbackward-kill-wardを実行するように。"
    (if (and (called-interactively-p 'interactive) transient-mark-mode (not mark-active))
        (backward-kill-word 1)
      (apply f args)))

  (advice-add 'kill-region :around 'my:kill-word-or-kill-region)
#+end_src

*** kill-lineの拡張
#+begin_src emacs-lisp
  (defun my:kill-line-and-fixup (f &rest args)
    "kill-lineの際に、次の行の行頭に連続している空白を削除する"
    (if (and (not (bolp)) (eolp))
        (progn
          (forward-char)
          (fixup-whitespace)
          (backward-char))
      (apply f args)))

  (advice-add 'kill-line :around 'my:kill-line-and-fixup)
#+end_src

*** 単語単位のkill
#+begin_src emacs-lisp
  (defun my:kill-word-at-point ()
    "delete word at under cursor. If spaces was under the cursor, delete horizontal spaces"
    (interactive)
    (let ((char (char-to-string (char-after (point)))))
      (cond
       ((string= " " char) (delete-horizontal-space))
       ((string-match "[\t\n -@\[-`{-~]" char) (kill-word 1))
       (t (forward-char) (backward-word) (kill-word 1)))))
#+end_src

*** ファイルシステム関連
#+begin_src emacs-lisp
  (defun my:file-root-p (filename)
    "Return t if file FILENAME created by root."
    (eq 0 (nth 2 (file-attributes filename))))

  (defun my:th-rename-tramp-buffer ()
    "trampで開いたファイルについて、バッファ名を変更する"
    (when (file-remote-p (buffer-file-name))
      (rename-buffer
       (format "%s:%s"
               (file-remote-p (buffer-file-name) 'method)
               (buffer-name)))))

  (defun my:th-find-file-sudo (file)
    "Opens FILE with root privileges."
    (interactive "F")
    (set-buffer (find-file (concat "/sudo::" file))))

  (add-hook 'find-file-hook #'my:th-rename-tramp-buffer)
#+end_src

*** scratchバッファの拡張
#+begin_src emacs-lisp
  ;; (@> "*scratch*をkillできないようにする")
  (defun my:make-scratch (&optional arg)
    "scratchバッファをkillできないようにする"
    ;; "*scratch*" を作成して buffer-list に放り込む
    (set-buffer (get-buffer-create "*scratch*"))
    (funcall initial-major-mode)
    (erase-buffer)
    (when (and initial-scratch-message (not inhibit-startup-message))
      (insert initial-scratch-message))
    (or arg (progn (setq arg 0)
                   (switch-to-buffer "*scratch*")))
    (cond ((= arg 0) (message "*scratch* is cleared up."))
          ((= arg 1) (message "another *scratch* is created"))))

  (defun my:clear-scratch-when-kill-buffer ()
    (if (string= "*scratch*" (buffer-name))
        (progn (my:make-scratch 0) nil)
      t))

  ;; *scratch* バッファで kill-buffer したら内容を消去するだけにする
  (add-hook 'kill-buffer-query-functions #'my:clear-scratch-when-kill-buffer)
#+end_src

** themeの設定
#+begin_src emacs-lisp
  (defcustom my:custom:current-theme 'gruvbox-dark-hard "current theme for me"
    :group 'my
    :type 'symbol)

  (defun my:theme-initialize ()
    (enable-theme my:custom:current-theme)

    ;; settings for display-line-numbers mode
    (when (version<= "27.0.0" emacs-version)
      (set-face-background 'line-number (face-background 'default))
      (set-face-foreground 'line-number (face-foreground 'default))))
#+end_src

** tmux連携
#+begin_src emacs-lisp
  ;; tmuxのパス。存在しない場合は/usr/binにあるものとする。
  (setq my:tmux-bin-path (if (executable-find "tmux") "tmux" "/usr/bin/tmux"))

  (defun my:get-tmux-exec-command (cmd)
    "Return command-string of tmux"
    (format "%s %s" my:tmux-bin-path cmd))

  (defun my:tmux-save-buffer (data &optional e)
    "Set data to buffer of tmux (use `tmux set-buffer')"
    (interactive "ssave to tmux buffer: ")
    (when data
      (call-process-shell-command
       (my:get-tmux-exec-command (format "set-buffer \"%s\"" data))  nil nil t)
      (when e
        (message (format "set %s to buffer of tmux" data)))))

  (defun my:tmux-get-buffer ()
    "Get data from current buffer fo tmux, and set to top of kill-ring"
    (interactive "*")
    (let ((buffer (get-buffer-create " *tmux-output*")))
      (when buffer
        (call-process-shell-command (my:get-tmux-exec-command "show-buffer")
                                    nil `(,buffer t) nil)
        (save-window-excursion
          (switch-to-buffer buffer)
          ;; 余分な改行を削除する。
          (kill-ring-save (point-min) (- (point-max) 1)))
        (kill-buffer buffer))))
#+end_src

** フォントの設定
色々難しいところなので、ここはleafでラップする。

#+begin_src emacs-lisp
  (leaf *font
    :after all-the-icons
    :hook
    (emacs-startup-hook . my:font-initialize)
    :preface
    (defun my:font-initialize (&optional font-size)
      "Initialize fonts on window-system"
      (interactive "P")

      (let ((font-size (if font-size
                           (read-minibuffer "Font Size:")
                         my:font-size)))
        (when window-system
          (cond
           ((eq window-system 'ns)
            (let* ((size (or font-size my:font-size))
                   (asciifont "HackGen")
                   (jpfont "HackGen")
                   (h (round (* size 10)))
                   (fontspec)
                   (jp-fontspec))
              (set-face-attribute 'default nil :family asciifont :height h)
              (setq fontspec (font-spec :family asciifont))
              (setq jp-fontspec (font-spec :family jpfont))
              (set-fontset-font nil 'japanese-jisx0208 jp-fontspec)
              (set-fontset-font nil 'japanese-jisx0212 jp-fontspec)
              (set-fontset-font nil 'japanese-jisx0213-1 jp-fontspec)
              (set-fontset-font nil 'japanese-jisx0213-2 jp-fontspec)
              (set-fontset-font nil '(#x0080 . #x024F) fontspec)
              (set-fontset-font nil '(#x0370 . #x03FF) fontspec)))
           ((eq window-system 'x)
            (let* ((size (or font-size my:font-size))
                   (asciifont "HackGen")
                   (jpfont "HackGen")
                   (h (round (* size 10)))
                   (jp-fontspec (font-spec :family jpfont)))
              (when (featurep 'all-the-icons)
                (set-fontset-font nil 'unicode (font-spec :family (all-the-icons-alltheicon-family)) nil 'append)
                (set-fontset-font nil 'unicode (font-spec :family (all-the-icons-material-family)) nil 'append)
                (set-fontset-font nil 'unicode (font-spec :family (all-the-icons-fileicon-family)) nil 'append)
                (set-fontset-font nil 'unicode (font-spec :family (all-the-icons-faicon-family)) nil 'append)
                (set-fontset-font nil 'unicode (font-spec :family (all-the-icons-octicon-family)) nil 'append)
                (set-fontset-font nil 'unicode (font-spec :family (all-the-icons-wicon-family)) nil) 'append)
              (set-face-attribute 'default nil :family asciifont :height h)
              (unless (string= asciifont jpfont)
                (set-fontset-font nil 'unicode jp-fontspec nil))
              (message (format "Setup for %s with %f" asciifont size))))
           (t
            (message "Not have window-system")))))))
#+end_src

** langtool
flyspellとはまた別で、英語自体の構文とかそういうのをチェックしてくれるLangtoolを入れる。

#+begin_src emacs-lisp
  (leaf *langtool
    :if (eq window-system 'x)
    :config
    (unless (file-exists-p my:langtool-cli-path)
      (make-directory (expand-file-name "~/.emacs.d/share") t)
      (let ((langtool-url (format "https://languagetool.org/download/LanguageTool-%s.zip" my:langtool-version))
            (output "/tmp/LanguageTool.zip"))

        (call-process "curl" nil nil t "-L" "-o" output langtool-url)
        (call-process "unzip" nil nil t "-d" (expand-file-name "~/.emacs.d/share") output)
        (rename-file (format "~/.emacs.d/share/LanguageTool-%s/languagetool-commandline.jar" my:langtool-version)
                     my:langtool-cli-path t))))
#+end_src

** init.org関連の設定
#+begin_src emacs-lisp
  (leaf *for-init-org
    :after org
    :config
    (defun my:restore-init.el ()
      (when (string=
             (expand-file-name "init.org" user-emacs-directory)
             (buffer-file-name))
        (with-temp-buffer
          (insert ";; -*- coding: utf-8 -*-")
          (newline)
          (insert (prin1-to-string my:init.el-content))
          (write-file (expand-file-name "init.el" user-emacs-directory) nil))))

    (add-hook 'my:save-buffer-hook #'my:restore-init.el))
#+end_src

* package設定
原則は、1packageにつき1見出しであり、関連するパッケージはleaf側でくくるようにする。

major-modeなどという単位は、org側のoutlineで設定するようにする。

** diminish
#+begin_src emacs-lisp
  (leaf diminish :straight t)
#+end_src

** hydra
#+begin_src emacs-lisp
  (leaf hydra :straight t)
#+end_src

** major-modes

*** org
#+begin_src emacs-lisp
  (leaf *org-mode
    :config
    (leaf org
      :straight t
      :mode ("\\.org\\'" . org-mode)
      :hook (org-mode-hook . turn-on-font-lock)
      :custom (;; org-mode内部のソースを色付けする
               (org-src-fontify-natively . t)
               ;; org-modeの開始時に、行の折り返しを無効にする。
               (org-startup-truncated . t)
               ;; follow-linkから戻ることを可能とする。
               (org-return-follows-link . t)

               (org-refile-use-outline-path . 'file)
               (org-outline-path-complete-in-steps . nil)
               (org-log-done . 'time)
               (org-todo-keywords . '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))

               (org-indent-indentation-per-level . 0)
               (org-adapt-indentation . nil)
               (org-clock-clocked-in-display . 'none)
               (org-clock-out-remove-zero-time-clocks . t)


               (org-structure-template-alist . '(("s" . "src")
                                                 ("e" . "example")
                                                 ("c" . "center")
                                                 ("q" . "quote")
                                                 ("v" . "verse")
                                                 ("C" . "comment")
                                                 ("E" . "export")
                                                 ("l" . "src emacs-lisp")
                                                 ("h" . "export html")
                                                 ("a" . "export ascii"))))
      :config
      ;; 一時間に一回、org-modeの全てのバッファを保存する。
      (run-at-time nil 3600 #'org-save-all-org-buffers)

      (leaf ob-plantuml
        :require t
        :config
        (setq org-plantuml-jar-path (expand-file-name (locate-user-emacs-file "plantuml.jar")))
        (add-to-list 'org-babel-load-languages '(plantuml . t)))

      (leaf *org-local-functions
        :config
        (defun my:org-done-todo ()
          (interactive)
          (org-todo "DONE"))

        (defun my:org-current-is-todo ()
          (string= "TODO" (org-get-todo-state)))

        (defun my:org-global-props (&optional property buffer)
          "Get the plists of global org properties of current buffer."
          (unless property (setq property "PROPERTY"))
          (with-current-buffer (or buffer (current-buffer))
            (org-element-map
                (org-element-parse-buffer)
                'keyword
              (lambda (el) (when (string-match property (org-element-property :key el)) el)))))

        (defun my:org-add-ymd-to-archive (name)
          "replace anchor to YYYY-MM string"
          (let* ((ymd (format-time-string "%Y-%m")))
            (replace-regexp-in-string "#YM" ymd name)))
        (advice-add 'org-extract-archive-file :filter-return #'my:org-add-ymd-to-archive))

      (leaf *gtd-settings
        :if my:gtd-base-path
        :config
        (let ((inbox (expand-file-name "inbox.org" my:gtd-base-path))
              (gtd (expand-file-name "gtd.org" my:gtd-base-path))
              (someday (expand-file-name "someday.org" my:gtd-base-path))
              (tickler (expand-file-name "tickler.org" my:gtd-base-path)))
          (setq org-capture-templates
                `(("t" "Todo [inbox]" entry
                   (file+headline ,inbox "Tasks")
                   "* TODO %?")
                  ("o" "Task for office [gtd]" entry
                   (file ,gtd)
                   "* TODO %? :@office:")
                  ("h" "Task for home [gtd]" entry
                   (file ,gtd)
                   "* TODO %? :@home:")
                  ("b" "Blog idea [gtd]" entry
                   (file ,gtd)
                   "* TODO %? :@blog: \n%i%U")
                  ("T" "Tickler" entry
                   (file+headline ,tickler "Tickler")
                   "* %? \n%i%U")))

          (setq org-refile-targets `((,gtd :maxlevel . 3)
                                     (,someday :level . 1)
                                     (,tickler :maxlevel . 2))))

        (defun my:org-set-archive-name-for-month(&rest args)
          (setq-local org-archive-location (concat "./archives/"
                                                   (format-time-string "%Y%m" (current-time))
                                                   "-%s_archive::datetree/* Finished Tasks")))

        (advice-add 'org-archive-subtree :before #'my:org-set-archive-name-for-month))

      (leaf *org-hydra
        :after hydra
        :config
        (defhydra hydra-org ()
          "
            Navigate Heads^^
            ---------------------------------------------------
            [_k_] Prev visible [_l_] Visibility Cycle
            [_j_] Next visible
            [_u_] Up level
            [_K_] Prev sibling
            [_J_] Next sibling
            ---------------------------------------------------
                    [_q_] Quit
            "
          ("J" org-forward-heading-same-level)
          ("K" org-backward-heading-same-level)
          ("j" org-next-visible-heading)
          ("k" org-previous-visible-heading)
          ("u" outline-up-heading)
          ("l" org-cycle)
          ("q" nil))))

    (leaf org-agenda
      :require t
      :if my:gtd-base-path
      :custom
      (org-agenda-custom-commands .
                                  '(("o" "At the office" tags-todo "@office"
                                     ((org-agenda-overriding-header "Office")
                                      (org-agenda-skip-function #'my:org-agenda-skip-all-sibling-but-first)))))
      (org-agenda-current-time-string . "← now")
      (org-agenda-time-grid .
                            '((daily today require-timed)
                              (0700 0800 0900 01000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400)
                              "-"
                              "────────────────"))

      :config
      (defun my:org-agenda-skip-all-sibling-but-first ()
        "Skip all but the first non-done entry."
        (let (should-skip-entry)
          (unless (my:org-current-is-todo)
            (setq should-skip-entry t))
          (save-excursion
            (while (and (not should-skip-entry) (org-goto-sibling t))
              (when (my:org-current-is-todo)
                (setq should-skip-entry t)))
            (when should-skip-entry
              (or (outline-next-heading)
                  (goto-char (point-max)))))))

      (let ((inbox (expand-file-name "inbox.org" my:gtd-base-path))
            (gtd (expand-file-name "gtd.org" my:gtd-base-path))
            (someday (expand-file-name "someday.org" my:gtd-base-path))
            (tickler (expand-file-name "tickler.org" my:gtd-base-path)))
        (setq org-agenda-files (list inbox gtd tickler))))

    (leaf org-clock
      :leaf-defer nil
      :require t
      :hook (org-clock-out-hook . org-update-all-dblocks)
      :custom
      (org-clock-out-remove-zero-time-clocks . t)
      (org-clock-clocked-in-display . 'frame-title)
      (org-clock-frame-title-format . '((:eval (format "%s %s"
                                                       (if (require 'org-clock-today nil t)
                                                           (if org-clock-today-count-subtree
                                                               (format "%s / %s"
                                                                       org-clock-today-subtree-time
                                                                       org-clock-today-buffer-time)
                                                             (format "%s" org-clock-today-buffer-time))
                                                         "")
                                                       org-mode-line-string))))
      :hook (kill-emacs-hook . my:org-clock-out-and-save-when-exit)
      :preface
      (defun my:org-clock-out-and-save-when-exit ()
        "Save buffers and stop clocking when kill emacs."
        (when (org-clocking-p)
          (org-clock-out)
          (save-some-buffers t)))
      :config
      (defun my:task-clocked-time ()
        (interactive)
        (let* ((clocked-time (org-clock-get-clocked-time))
               (h (truncate clocked-time 60))
               (m (mod clocked-time 60))
               (work-done-str (format "%d:%02d" h m)))
          (if org-clock-effort
              (let* ((effort-in-minutes
                      (org-duration-to-minutes org-clock-effort))
                     (effort-h (truncate effort-in-minutes 60))
                     (effort-m (truncate (mod effort-in-minutes 60)))
                     (effort-str (format "%d:%02d" effort-h effort-m)))
                (format "%s/%s" work-done-str effort-str))
            (format "%s" work-done-str))))

      (defun my:update-task-clocked-time ()
        (setq my:org-clocked-time-mode-line (my:task-clocked-time))))

    (leaf org-superstar
      :straight t
      :custom
      (org-superstar-headline-bullets-list . '("" "" "" "" "" "" ""))
      (org-superstar-leading-bullet . " ")
      :hook (org-mode-hook . org-superstar-mode))

    (leaf org-pomodoro
      :straight t
      :custom
      (org-pomodoro-ask-upon-killing . t)
      (org-pomodoro-format . "%s")
      (org-pomodoro-short-break-format . "%s")
      (org-pomodoro-long-break-format . "%s")
      :bind (:org-agenda-mode-map
             :package org-agenda
             ("P" . org-pomodoro))
      :hook
      (org-pomodoro-started-hook . my:org-add-task-time-to-mode-line)
      (org-pomodoro-finished-hook . my:org-remove-task-time-from-mode-line)
      (org-pomodoro-tick-hook . my:update-task-clocked-time)
      (org-pomodoro-started-hook . my:org-pomodoro-started-hook)
      (org-pomodoro-finished-hook . my:org-pomodoro-finished-hook)
      (org-pomodoro-short-break-finished-hook . my:org-pomodoro-short-break-hook)
      (org-pomodoro-long-break-finished-hook . my:org-pomodoro-long-break-hook)
      :preface
      (defun my:org-pomodoro-started-hook ()
        (notifications-notify
         :title "org-pomodoro"
         :body "Let's focus for 25 minutes!"))
      (defun my:org-pomodoro-finished-hook ()
        (notifications-notify
         :title "org-pomodoro"
         :body "Well done! Take a break."))
      (defun my:org-pomodoro-short-break-hook ()
        (notifications-notify
         :title "org-pomodoro"
         :body "Finish short break. Will do next round!"))
      (defun my:org-pomodoro-long-break-hook ()
        (notifications-notify
         :title "org-pomodoro"
         :body "Finish long break."))
      (defun my:org-add-task-time-to-mode-line ()
        (add-to-list 'global-mode-string 'my:org-clocked-time-mode-line t))

      (defun my:org-remove-task-time-from-mode-line ()
        (when (memq 'my:org-clocked-time-mode-line global-mode-string)
          (setq global-mode-string
                (remove 'my:org-clocked-time-mode-line global-mode-string)))))

    (leaf ox-hugo
      :straight t
      :hook
      (org-mode-hook . my:org-hugo-enable-if-hugo-buffer)
      :preface
      (defun my:org-hugo-enable-if-hugo-buffer ()
        (let ((prop (my:org-global-props "HUGO_.\+" (current-buffer))))
          (when prop
            (org-hugo-auto-export-mode +1)))))

    (leaf org-onit
      :after org-clock org
      :straight (org-onit :type git :host github :repo "takaxp/org-onit")
      :bind
      (("C-<f11>" . org-clock-goto)
       (:org-mode-map
        :package org
        ("<f11>" . org-onit-toggle-doing)
        ("S-<f11>" . org-onit-goto-anchor))))

    (leaf org-clock-today
      :straight t
      :after org-clock
      :config
      (org-clock-today-mode 1))

    (leaf org-tempo
      :leaf-defer nil
      :require t))
#+end_src

**** org-roam
#+begin_src emacs-lisp
  (leaf org-roam
    :after org
    :straight t
    :if (and (file-exists-p my:org-roam-directory))
    :custom
    ((org-roam-db-update-method . 'immediate)
     (org-roam-db-location . my:org-roam-db-location)
     (org-roam-directory . my:org-roam-directory)
     (org-roam-index-file . my:org-roam-index-file)
     (org-roam-capture-templates . '(("d" "default" plain (function org-roam--capture-get-point)
                                      "%?"
                                      :file-name "%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}\" (current-time) t)"
                                      :head "#+title: ${title}\n- tags :: "
                                      :unnarrowed t))))
    :bind
    ((:org-mode-map
      :package org
      ("C-c r" . org-roam-insert)))
    :hook
    (after-init-hook . org-roam-mode))
#+end_src

*** go-mode
#+begin_src emacs-lisp
  (leaf go-mode
    :straight t
    :bind (:go-mode-map
           ("M-." . godef-jump))
    :hook
    (go-mode-hook . my:go-mode-hook-1)
    :config
    (defun my:go-mode-hook-1 ()
      (add-hook 'before-save-hook #'lsp-format-buffer t t)
      (add-hook 'before-save-hook #'lsp-organize-imports t t)
      (lsp)))
#+end_src

*** common lisp

**** lisp-mode
#+begin_src emacs-lisp
  (leaf lisp-mode
    :require t
    :preface
    (defun my:lisp-hooks ()
      (setq-local company-idle-delay 0.2)
      (set-newline-and-indent))
    :hook
    (lisp-mode-hook . my:lisp-hooks))
#+end_src

**** roswell
#+begin_src emacs-lisp
  (leaf *roswell
    :if (let ((helper (expand-file-name "helper.el" my:roswell-path)))
          (and (file-exists-p helper) my:roswell-path))
    :config
    (defvar roswell-slime-contribs '(slime slime-fancy))
    (load helper)

    (defun slime-qlot-exec (directory)
      "start slime with qlot"
      (slime-start :program "qlot"
                   :program-args '("exec" "ros" "-S" "." "run")
                   :directory directory
                   :name 'qlot
                   :env (list (concat "PATH="
                                      (mapconcat 'identity exec-path ":"))
                              (concat "QUICKLISP_HOME="
                                      (file-name-as-directory directory) "quicklisp/"))))

    (defun slime-qlot (directory)
      "start slime with qlot"
      (interactive (list (read-directory-name "Project directory: ")))
      (slime-qlot-exec directory))

    (defun slime-qlot-restart (directory)
      (interactive (list (read-directory-name "Project directory: ")))
      (ignore-errors
        (let* ((buffer (get-buffer "*inferior-lisp*"))
               (process (get-buffer-process buffer)))
          (when (and buffer process)
            (set-process-query-on-exit-flag process nil)
            (kill-buffer buffer))))
      (slime-qlot-exec directory)))
#+end_src

**** hyperspec
#+begin_src emacs-lisp
  (leaf hyperspec
    :when (featurep 'slime)
    :require t
    :custom
    ;; HyperSpecをewwで見る設定
    (common-lisp-hyperspec-root . "~/.emacs.d/share/HyperSpec/")

    :config
    (unless (file-exists-p (expand-file-name "~/.emacs.d/share/HyperSpec"))
      (when (eq window-system 'x)

        (make-directory (expand-file-name "~/.emacs.d/share") t)
        (let ((hyperspec-url "ftp://ftp.lispworks.com/pub/software_tools/reference/HyperSpec-7-0.tar.gz")
              (output "/tmp/HyperSpec.tar.gz"))

          (call-process "curl" nil nil t "-L" "-o" output hyperspec-url)
          (shell-command (format "tar zxvf %s -C %s" output "~/.emacs.d/share")))))

    ;; redefine function
    (defun common-lisp-hyperspec (symbol-name)
      (interactive (list (common-lisp-hyperspec-read-symbol-name)))
      (let ((buf (current-buffer)))
        (let ((name (common-lisp-hyperspec--strip-cl-package
                     (downcase symbol-name))))
          (cl-maplist (lambda (entry)
                        (eww-open-file (concat common-lisp-hyperspec-root "Body/"
                                               (car entry)))
                        (when (cdr entry)
                          (sleep-for 1.5)))
                      (or (common-lisp-hyperspec--find name)
                          (error "The symbol `%s' is not defined in Common Lisp"
                                 symbol-name))))
        (switch-to-buffer buf)
        (display-buffer "*eww*"))))
#+end_src

*** ruby
#+begin_src emacs-lisp
  (leaf ruby
    :config
    (leaf ruby-mode
      :require t
      :mode ("\\.rb$" . ruby-mode)
      :bind (:ruby-mode-map
             ("C-c x" . xmp)
             ("C-M-i" . rct-complete-symbol--anything)))

    (leaf ruby-end
      :straight t
      :hook (ruby-mode-hook . ruby-end-mode)))
#+end_src

*** rust-mode
#+begin_src emacs-lisp
  (leaf rust-mode
    :straight t
    :custom
    (rust-indent-offset . 4)
    (racer-rust-src-path . my:rust-src-location)
    (racer-cmd . my:rust-racer-path)
    :hook
    (rust-mode-hook . racer-mode)
    (rust-mode-hook . eldoc-mode))
#+end_src

*** python

**** pyvenv
#+begin_src emacs-lisp
  (leaf pyvenv
    :straight t
    :if (and my:virtualenv-path (file-exists-p my:virtualenv-path))
    :config
    (pyvenv-activate my:virtualenv-path))
#+end_src

**** python mode
#+begin_src emacs-lisp
  (leaf python
    :mode ("\\.py$" . python-mode)
    :hook
    (python-mode-hook . my:python-mode-hook-0)
    :preface
    (defun my:python-mode-hook-0 ()
      (setq-local indent-tabs-mode nil)
      (pyvenv-mode +1)

      (flycheck-mode +1)))
#+end_src

*** emacs-lisp
#+begin_src emacs-lisp
  (leaf elisp-mode
    :require t
    :preface
    (defun my:emacs-lisp-hooks ()
      (setq-local company-idle-delay 0.2)
      (setq-local company-backends '(company-semantic company-files company-elisp))
      (set-newline-and-indent))

    :hook
    (emacs-lisp-mode-hook . my:emacs-lisp-hooks)
    :config
    (leaf eldoc
      :commands eldoc-mode
      :custom
      ;; idle時にdelayをかけない
      (eldoc-idle-delay . 0)
      ;; echo areaに複数行表示を有効にする
      (eldoc-echo-area-use-multiline-p . t)
      :hook
      (emacs-lisp-mode-hook . eldoc-mode)
      (lisp-interaction-mode-hook . eldoc-mode)
      (ielm-mode-hook . eldoc-mode)))
#+end_src

*** ocaml
OPAMの動作が前提なので、最初にOPAMにあるやつを読み込めるようにしておく。

#+begin_src emacs-lisp
  (eval-and-compile
    (defun my:opam-share-directory-p ()
      (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
        (and opam-share (file-directory-p opam-share))))

    (defun my:opam-load-path ()
      (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
        (when (and opam-share (file-directory-p opam-share))
          (expand-file-name "emacs/site-lisp" opam-share)))))

  (when (my:opam-share-directory-p)
    (add-to-list 'load-path (my:opam-load-path)))
#+end_src

**** ocamlformat
ocamlformatはOPAMで入って初めて使えるのだが、とりあえずはrequireしておく。

#+begin_src emacs-lisp
  (leaf ocamlformat
    :require t
    :commands ocamlformat-before-save
    :custom
    (ocamlformat-show-errors . nil))
#+end_src

**** tuareg
#+begin_src emacs-lisp
  (leaf tuareg
    :straight t
    :mode
    ("\\.ml[ily]?\\'" . tuareg-mode)
    ("\\.topml\\'" . tuareg-mode)
    :custom
    ;; Global tuareg setting
    (tuareg-let-always-indent . t)
    (tuareg-function-indent . 0)
    (tuareg-match-indent . 0)
    (tuareg-sig-struct-indent . 0)
    (tuareg-match-patterns-aligned . t)
    :hook
    (tuareg-mode-hook . tuareg-mode-hook-1)
    :bind
    (:tuareg-mode-map ("C-c C-c" . my:dune-compile))
    :preface
    (defun tuareg-mode-hook-1 ()
      (let ((bufname (buffer-name)))

        (unless (string-match "ocamlformat[a-zA-Z0-9]+?\\.mli?\\'" bufname)
          (electric-indent-mode 1)

          (when (featurep 'flyspell)
            (flyspell-prog-mode))

          (setq-local company-backends '((company-semantic company-files)))
          (add-hook 'before-save-hook #'ocamlformat-before-save nil t)
          (lsp))))

    (defun my:dune-compile ()
      (interactive)
      (save-buffer)
      (let* ((default-directory
               (or (locate-dominating-file buffer-file-name "Makefile") default-directory))
             (compile-command (concat "(cd " default-directory " && dune build @check)"))
             (compilation-directory
              (or (locate-dominating-file buffer-file-name "Makefile") nil)))
        (recompile))))

#+end_src

*** adoc-mode
asciidoc用のモード。ちょっと表示がうるさいのが玉に瑕。
#+begin_src emacs-lisp
  (leaf adoc-mode
    :straight t
    :mode ("\\.adoc\\'" . adoc-mode))
#+end_src

*** lua-mode
#+begin_src emacs-lisp
  (leaf lua-mode
    :straight t
    :mode ("\\.lua\\'" . lua-mode))
#+end_src

*** markdown-mode
#+begin_src emacs-lisp
  (leaf markdown-mode
    :straight t
    :mode ("\\.md\\'" . markdown-mode))
#+end_src

*** rst
わかりづらいが、reStructuredText。

#+begin_src emacs-lisp
  (leaf rst
    :require t
    :mode ("\\.rst\\'" . rst-mode))
#+end_src

*** css-mode
#+begin_src emacs-lisp
  (leaf css-mode
    :require t
    :mode ( ("\\.css\\'" . css-mode) ("\\.scss\\'" . scss-mode))
    :custom
    (scss-compile-at-save . nil)
    :hook
    (scss-mode-hook . my:scss-mode-hook-0)
    (css-mode-hook . my:scss-mode-hook-0)
    :preface
    (defun my:scss-mode-hook-0 ()
      (add-node-modules-path)

      (setq-local flycheck-check-syntax-automatically '(save mode-enabled))
      (setq-local flycheck-css-stylelint-executable "stylelint")
      (setq-local prettier-js-args '("--parser" "css" "--pkg-conf"))
      (setq-local prettier-js-command "prettier")
      (setq-local company-backends '((company-semantic company-files)))
      (prettier-js-mode +1)
      (flycheck-mode +1)

      (setq-local css-indent-offset 2)
      (setq-local company-backends '(company-semantic
                                     company-files
                                     company-css))))

#+end_src

*** yaml-mode
#+begin_src emacs-lisp
  (leaf yaml-mode
    :straight t
    :mode ("\\.yml\\'" . yaml-mode))
#+end_src

*** web-mode
jsxを使うときにたまに使う。

#+begin_src emacs-lisp
  (leaf web-mode
    :straight t
    :mode
    ("\\.html\\'" . web-mode)
    ("\\.rt\\'" . web-mode)
    :custom
    (web-mode-markup-indent-offset . 2)
    (web-mode-code-indent-offset . 2)
    :hook
    (web-mode-hook . my:web-mode-hook-enable-jsx)
    :preface
    (defun my:web-mode-hook-enable-jsx ()))
#+end_src

*** closure

closure関連のパッケージは割と量があるので、ちょっと分けるようにする。
**** clojure-mode
#+begin_src emacs-lisp
  (leaf clojure-mode
    :straight t
    :hook
    (clojure-mode-hook . my:clojure-mode-hook-0)
    (clojure-mode-hook . smartparens-strict-mode)
    :config
    (defun my:clojure-mode-hook-0 ()
      ))
#+end_src

**** cider
#+begin_src emacs-lisp
  (leaf cider
    :straight t
    :hook
    (cider-mode-hook . eldoc-mode)
    :custom
    (cider-repl-display-in-current-window . t)
    (cider-repl-use-clojure-font-lock . t)
    (cider-save-file-on-load . 'always-save)
    (cider-font-lock-dynamically . '(macro core function var))
    (cider-overlays-use-font-lock . t)
    :config
    (cider-repl-toggle-pretty-printing))
#+end_src

*** JavaScript/TypeScript
ここも色々多いので、個別に記載していく。

**** prettier-js
#+begin_src emacs-lisp
  (leaf prettier-js
    :straight t
    :commands prettier-js-mode
    :custom
    ;; do not show error
    (prettier-js-show-errors . nil))
#+end_src

**** add-node-modules-path
node_modules/.binをexec-pathに追加してくれる。

#+begin_src emacs-lisp
  (leaf add-node-modules-path :straight t)
#+end_src

**** js2-mode
#+begin_src emacs-lisp
  (leaf js2-mode
    :straight t
    :commands js2-minor-mode js2-mode
    :custom
    (js2-bounce-indent-p . nil)
    (js2-basic-offset . 2)
    (js2-include-browser-externs . nil)
    (js2-mode-show-parse-errors . nil)
    (js2-mode-show-strict-warnings . nil)
    (js2-highlight-external-variables . nil)
    (js2-include-jslint-globals . nil)
    :config
    (leaf *before-emacs-27
      :if (version< emacs-version "27.0")
      :mode
      ("\\.js\\'" . js2-mode)
      ("\\.es6\\'" . js2-mode))

    (leaf *after-emacs-27
      :if (version<= "27.0" emacs-version)
      :hook
      (js-mode-hook . js2-minor-mode)))
#+end_src

**** js-mode
#+begin_src emacs-lisp
  (leaf js-mode
    :after flycheck
    :commands js-mode
    :custom
    (js-indent-level . 2)
    :preface
    (defun my:js-mode-hook ()
      (flycheck-mode +1))
    :hook
    (js-mode-hook . my:js-mode-hook)
    :config
    (leaf *after-emacs-27
      :if (version<= "27.0" emacs-version)
      :mode
      (( "\\.js\\'" "\\.es6\\'") . js-mode)))
#+end_src

**** rjsx-mode
#+begin_src emacs-lisp
  (leaf rjsx-mode
    :commands rjsx-mode
    :mode
    ("components\\/.*\\.js\\'" . rjsx-mode)
    ("containers\\/.*\\.js\\'" . rjsx-mode))
#+end_src

**** typescript-mode
#+begin_src emacs-lisp
  (leaf typescript-mode
    :straight t
    :after flycheck
    :mode ("\\.tsx?\\'" . typescript-mode)
    :hook
    (typescript-mode-hook . my:typescript-mode-hook)
    :bind (:typescript-mode-map
           ("M-j" . c-indent-new-comment-line))
    :custom
    (typescript-indent-level . 2)
    :preface

    (defun my:typescript-mode-hook ()
      (add-node-modules-path)
      (lsp)

      (setq-local prettier-js-args '("--parser" "typescript" "--pkg-conf"))
      (setq-local prettier-js-command "prettier")
      (prettier-js-mode +1)

      (setq-local flycheck-check-syntax-automatically '(save mode-enabled))
      (setq-local company-backends '((company-semantic company-files) company-capf))
      ;; use eslint after lsp's diagnostic.
      (flycheck-add-next-checker 'lsp 'javascript-eslint)
      (flycheck-mode +1))

    :config
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (flycheck-add-mode 'javascript-eslint 'typescript-mode))
#+end_src

*** terraform-mode
#+begin_src emacs-lisp
  (leaf terraform-mode
    :straight t
    :mode ("\\.tf\\'" . terraform-mode))
#+end_src

*** plantuml-mode
#+begin_src emacs-lisp
  (leaf plantuml-mode
    :straight t
    :custom
    (plantuml-output-type . "png")
    (plantuml-options . "-charset UTF-8")
    (plantuml-default-exec-mode . 'jar)
    :config
    (let ((plantuml-jar-file (expand-file-name (locate-user-emacs-file "plantuml.jar"))))
      (setq plantuml-jar-path plantuml-jar-file)
      (unless (file-exists-p plantuml-jar-file)
        (call-process "curl" nil nil t "-L" "-o" plantuml-jar-file
                      "https://sourceforge.net/projects/plantuml/files/plantuml.jar/download"))))
#+end_src

*** groovy-mode
#+begin_src emacs-lisp
  (leaf groovy-mode
    :straight t
    :mode ("\\.groovy\\'" . groovy-mode))
#+end_src

*** protobuf-mode
#+begin_src emacs-lisp
  (leaf protobuf-mode
    :straight t
    :mode ("\\.proto\\'" . protobuf-mode)
    :hook
    (protobuf-mode-hook . my:protobuf-mode-hook)
    :config
    (defconst my:protobuf-style
      '((c-basic-offset . 2)
        (indent-tabs-mode . nil)))
    (defun my:protobuf-mode-hook ()
      (c-add-style "my-protobuf-style" my:protobuf-style)))
#+end_src

** dashboard
#+begin_src emacs-lisp
  (leaf dashboard
    :straight t
    :diminish t
    :custom
    (dashboard-startup-banner . 4)
    (dashboard-items . '((recents . 15)
                         (projects . 5)
                         (agenda . 5)))
    :config
    (dashboard-setup-startup-hook)
    (let ((fname (expand-file-name "4.txt" dashboard-banners-directory)))
      (with-temp-buffer
        (insert "
    ____
   |  _ \\  ___ _ __ _   _  ___ _ __ ___   __ _  ___ ___
   | | | |/ _ \\ '__| | | |/ _ \\ '_ ` _ \\ / _` |/ __/ __|
   | |_| |  __/ |  | |_| |  __/ | | | | | (_| | (__\\__ \\
   |____/ \\___|_|   \\__,_|\\___|_| |_| |_|\\__,_|\\___|___/
  ")
        (write-file fname))))
#+end_src

** magit
#+begin_src emacs-lisp
  (leaf magit
    :straight t
    :hook (git-commit-mode-hook . my:flyspell-enable))
#+end_src

** minor-modes

*** cc-mode
#+begin_src emacs-lisp
  (leaf cc-mode
    :require t
    ;; .hはc++-modeで開く
    :mode ("\\.h$" . c++-mode)
    :preface
    (defun my:c-mode-hook ()
      (setq completion-mode t)
      ;; compile-windowの設定
      (setq compilation-buffer-name "*compilation*")
      (setq compilation-scroll-output t)
      (setq compilation-read-command t)
      (setq compilation-ask-about-save nil)
      (setq compilation-window-height 10)
      (setq compile-command "make")
      ;; cc-mode内で定義されるキーバインド
      (define-key c-mode-base-map (kbd "C-c C-c")   'comment-region)
      (define-key c-mode-base-map (kbd "C-c C") 'my-c++-cast)
      (define-key c-mode-base-map (kbd "C-c C-M-c") 'uncomment-region)
      (define-key c-mode-base-map (kbd "C-c e")      'c-macro-expand)
      (define-key c-mode-base-map (kbd "C-c c")      'my-compile)
      (define-key c-mode-base-map (kbd "C-c M-c")   'compilation-close)
      (define-key c-mode-base-map (kbd "C-c g")      'gdb)
      (define-key c-mode-base-map (kbd "C-c t")      'toggle-source)
      (define-key c-mode-base-map (kbd "C-c C-d") 'c-down-conditional)
      ;; cc-modeに入る時に自動的にgtags-modeにする
      (gtags-mode t))

    :hook
    (c-mode-common-hook . my:c-mode-hook))
#+end_src

*** ace-window
ウィンドウ間を1キーで移動できるようにするための拡張。

#+begin_src emacs-lisp
  (leaf ace-window
    :straight t
    :bind
    (:evil-window-map
     :package evil
     ("C-w" . ace-select-window)))
#+end_src

*** avy
ace-windowの文字版。

#+begin_src emacs-lisp
  (leaf avy :straight t)
#+end_src

*** yasnippet
#+begin_src emacs-lisp
  (leaf yasnippet
    :straight t
    :bind (:yas-minor-mode-map
           ("TAB" . nil)
           ("<tab>" . nil)
           ("<C-tab>" . yas-expand))
    :commands yas-expand yas-global-mode
    :hook (emacs-startup-hook . yas-global-mode))
#+end_src

*** symbol-overlay
#+begin_src emacs-lisp
  (leaf symbol-overlay
    :straight t
    :hook (prog-mode-hook . symbol-overlay-mode)
    :custom-face
    (symbol-overlay-default-face . '((t (:background "gray21" :underline t)))))
#+end_src

*** beacon
ファイル内で移動したときに、フォーカスを見失わないようにするサポートライブラリ

#+begin_src emacs-lisp
(leaf beacon
    :straight t
    :commands beacon-mode
    :custom
    (beacon-color . "yellow")
    :hook
    (emacs-startup-hook . beacon-mode))
#+end_src

*** imenu-list
#+begin_src emacs-lisp
  (leaf imenu-list
    :straight t
    :custom
    (imenu-list-size . 0.25)
    (imenu-list-auto-resize . nil)
    (imenu-list-focus-after-activation . t))
#+end_src

*** whick-key
#+begin_src emacs-lisp
  (leaf which-key
    :straight t
    :custom
    (which-key-max-description-length . 40)
    (which-key-use-C-h-commands . t)
    :hook
    (emacs-startup-hook . which-key-mode))
#+end_src

*** smartparens
#+begin_src emacs-lisp
  (leaf smartparens
    :straight t
    :commands sp-local-pair smartparens-global-mode
    :hook
    (prog-mode-hook . smartparens-mode)
    :config
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'lisp-mode "'" nil :actions nil)
    (sp-local-pair 'lisp-mode "`" nil :actions nil)
    (sp-local-pair 'tuareg-mode "`" nil :actions nil)
    (sp-local-pair 'tuareg-mode "'" nil :actions nil))
#+end_src

*** fish-mode
#+begin_src emacs-lisp
  (leaf fish-mode
    :straight t
    :mode ("\\.fish\\'" . fish-mode))
#+end_src

*** shackle
#+begin_src emacs-lisp
  (leaf shackle
    :straight t
    :custom
    (shackle-rules . '((compilation-mode :align t :size 0.4)))
    (shackle-default-rule . '(:select t))
    :hook
    (emacs-startup-hook . shackle-mode))
#+end_src

*** git-gutter
#+begin_src emacs-lisp
  (leaf git-gutter
    :straight t
    :custom
    (git-gutter:update-hooks . '(after-save-hook after-revert-hook))

    ;; 全体でgit-gutterを有効にする
    :hook
    (emacs-startup-hook . global-git-gutter-mode))
#+end_src

*** auto-save-buffers-enhanced
#+begin_src emacs-lisp
  (leaf auto-save-buffers-enhanced
    :straight t
    :custom
    (auto-save-buffers-enhanced-interval . 3.0)
    :config
    (auto-save-buffers-enhanced t))
#+end_src

*** flycheck
#+begin_src emacs-lisp
  (leaf flycheck
    :straight t
    :commands (flycheck-mode flycheck-add-mode flycheck-next-error flycheck-previous-error)
    :bind
    (("<f3>" . flycheck-next-error)
     ("S-<f3>" . flycheck-previous-error))
    :custom
    (flycheck-javascript-eslint-executable . "eslint")
    :config
    (advice-add 'flycheck-eslint-config-exists-p :override (lambda () t))
    :hydra
    (hydra-flycheck nil
                    "
        Navigate Error^^    Miscellaneous
        ---------------------------------------------------
        [_k_] Prev          [_c_] Clear
        [_j_] Next
        [_f_] First Error   [_q_] Quit
        [_l_] Lask Error
        "
                    ("j" flycheck-next-error)
                    ("k" flycheck-previous-error)
                    ("f" flycheck-first-error)
                    ("l" (progn (goto-char (point-max)) (fiycheck-previous-error)))
                    ("c" flycheck-clear)
                    ("q" nil)))
#+end_src

*** posframe
#+begin_src emacs-lisp
  (leaf posframe
    :straight t
    :when (and window-system my:use-posframe)
    :config

    (when (eq (window-system) 'x)
      (setq posframe-gtk-resize-child-frames 'resize-mode))

    (leaf mozc-posframe
      :straight (mozc-posframe :type git :host github :repo "derui/mozc-posframe")
      :if (and my:use-mozc-el my:mozc-helper-locate)
      :config
      (mozc-posframe-register))

    (leaf flycheck-posframe
      :after flycheck
      :straight t
      :hook (flycheck-mode-hook . flycheck-posframe-mode))

    ;; using child frame
    (leaf company-posframe
      :after company
      :straight t
      :hook (company-mode-hook . company-posframe-mode))

    (leaf mini-frame
      :straight t
      :if (and (version<= "27" emacs-version)
               window-system)
      :config
      (setq mini-frame-show-parameters '((top . 10)
                                         (width . 0.7)
                                         (left . 0.5)))
      (mini-frame-mode +1)))
#+end_src

*** general
evil-leaderkeyの代替みたいな感じ。よりパワフル。

#+begin_src emacs-lisp
  (leaf general
    :straight t
    :after evil org
    :preface
    (defconst my:general:leader-key "SPC")
    :config
    (general-create-definer my:leader-def
      :prefix my:general:leader-key)
    (my:leader-def
      :keymaps 'evil-normal-state-map
      ";" 'consult-buffer-other-window
      "p" 'projectile-command-map
      "r" 'google-translate-smooth-translate
      "hf" 'hydra-flycheck/body
      "ho" 'hydra-org/body
      "i" 'hydra-evil-mc/body
      "q" 'evil-delete-buffer
      "w" 'save-buffer
      ;; for org-mode
      "oc" 'org-capture
      "or" 'org-roam-capture
      "od" 'my:org-done-todo
      "os" 'org-toggle-narrow-to-subtree
      "d" 'dired-jump
      "e" 'find-file
      "b" 'ibuffer
      "#" 'server-edit
      "s" 'my:consult-search-dwim
      "m" 'magit-status
      "f" 'consult-git-grep
      "tt" 'treemacs-select-window
      "tq" 'treemacs-quit
      ;; 'l' is head character of operations for 'lint'
      ;; Recommend to use evil's default keybinding (z =, s ] or s [) when correct warning issued from flyspell.
      "ll" 'langtool-check
      "lL" 'langtool-check-done
      ;; 'c' is head character of 'consult
      "ci" 'consult-imenu
      "cf" 'consult-git-grep
      "ca" 'consult-apropos))
#+end_src

*** undo-fu
#+begin_src emacs-lisp
  (leaf undo-fu
    :straight t)
#+end_src

*** evil
#+begin_src emacs-lisp
  (defvar my:skk-mode-in-evil nil)

  (leaf evil
    :straight t
    :hook
    ((emacs-startup-hook . evil-mode)
     (evil-insert-state-entry-hook . my:restore-skk-mode-if-enabled)
     (evil-insert-state-exit-hook . my:store-skk-mode-if-enabled))
    :bind
    (:evil-normal-state-map
     ("TAB" . nil)
     ("s" . evil-avy-goto-char)
     ("K" . lsp-ui-doc-glance))
    ;; evil-jump-forwardを潰す。
    (:evil-motion-state-map
     ("TAB" . nil))
    (:evil-visual-state-map
     ("f" . evil-avy-goto-char))
    :custom
    (evil-undo-system . 'undo-fu)
    :preface
    (defun my:restore-skk-mode-if-enabled ()
      "SKKのStateを復元する。"
      (when my:skk-mode-in-evil
        (cond ((eq my:skk-mode-in-evil 'latin)
               (when (my:skk-input-p)
                 (set-input-method my:input-method)
                 (skk-latin-mode +1)
                 (message "Restore SKK latin")))
              ((eq my:skk-mode-in-evil 'skk)
               (when (my:skk-input-p)
                 (set-input-method my:input-method)
                 (message "Restore SKK"))))))

    (defun my:store-skk-mode-if-enabled ()
      "SKKの状態を保存する。"
      (cond (skk-latin-mode (setq my:skk-mode-in-evil 'latin))
            (skk-mode (setq my:skk-mode-in-evil 'skk))
            (t (setq my:skk-mode-in-evil nil)))
      (message "Stored SKK state"))

    (defun my:evil-swap-key (map key1 key2)
      ;; MAP中のKEY1とKEY2を入れ替え
      "Swap KEY1 and KEY2 in MAP."
      (let ((def1 (lookup-key map key1))
            (def2 (lookup-key map key2)))
        (define-key map key1 def2)
        (define-key map key2 def1)))

    :config
    (defun my:avy-goto-line-below-same-column ()
      (interactive)
      (let ((col (current-column)))
        (avy-goto-line-below)
        (move-to-column col)))
    (declare-function 'my:avy-goto-line-below-same-column "avy")
    (evil-define-avy-motion my:avy-goto-line-below-same-column inclusive)

    (defun my:avy-goto-line-above-same-column ()
      (interactive)
      (let ((col (current-column)))
        (avy-goto-line-above)
        (move-to-column col)))
    (declare-function 'my:avy-goto-line-above-same-column "avy")
    (evil-define-avy-motion my:avy-goto-line-above-same-column inclusive)

    (evil-define-key nil evil-visual-state-map "J" #'evil-my:avy-goto-line-below-same-column)
    (evil-define-key nil evil-visual-state-map "K" #'evil-my:avy-goto-line-above-same-column)

    (evil-set-initial-state 'dashboard-mode 'emacs)
    (evil-set-initial-state 'magit-status-mode 'emacs)
    (evil-set-initial-state 'imenu-list-minor-mode 'emacs)
    (evil-set-initial-state 'imenu-list-major-mode 'emacs)

    (evil-ex-define-cmd "eval" 'eval-expression)
    (evil-ex-define-cmd "ev" "eval")

    (evil-ex-define-cmd "describe-key" 'describe-key)
    (evil-ex-define-cmd "key" "describe-key")

    ;; 論理行と物理行の移動を入れ替え
    (my:evil-swap-key evil-motion-state-map "j" "gj")
    (my:evil-swap-key evil-motion-state-map "k" "gk")

    (setq evil-normal-state-tag   (propertize "N" 'face '((:foreground "black")))
          evil-emacs-state-tag    (propertize "E" 'face '((:foreground "black")))
          evil-insert-state-tag   (propertize "I" 'face '((:foreground "red")))
          evil-motion-state-tag   (propertize "M" 'face '((:foreground "blue")))
          evil-visual-state-tag   (propertize "V" 'face '((:foreground "black")))
          evil-operator-state-tag (propertize "O" 'face '((:foreground "purple"))))

    ;; To suppress error when exit from insert-state
    (setq abbrev-expand-function #'ignore)

    ;; https://zuttobenkyou.wordpress.com/2011/02/15/some-thoughts-on-emacs-and-vim/
    (evil-define-command my:maybe-exit()
      :repeat change
      (interactive)
      (let ((modified (buffer-modified-p)))
        (insert "k")
        (let ((evt (read-event (format "Insert %c to exit insert state" ?j)
                               nil 0.2)))
          (cond
           ((null evt) (message ""))
           ((and (integerp evt) (char-equal evt ?j))
            (delete-char -1)
            (set-buffer-modified-p modified)
            (push 'escape unread-command-events))
           (t (setq unread-command-events (append unread-command-events (list evt))))))))

    (leaf *key-bindings
      :after s
      :config
      (setcdr evil-insert-state-map nil)

      (defun my:skk-input-p ()
        (s-contains? "skk" my:input-method))

      (defun my:evil-change-input-method (ime-state)
        (cond
         ((and ime-state (or (not current-input-method) (string-equal current-input-method my:input-method)))
          ;; TODO: work around to avoid invalid mozc input behavior
          (unless (my:skk-input-p)
            (define-key evil-insert-state-map "k" nil))
          (set-input-method my:input-method)
          (when (evil-normal-state-p)
            (evil-insert-state)))
         (t
          ;; TODO: work around to avoid invalid mozc input behavior
          (unless (my:skk-input-p)
            (define-key evil-insert-state-map "k" #'my:maybe-exit))
          (set-input-method nil))))

      (defun my:evil-enable-ime ()
        (interactive)
        (my:evil-change-input-method t))

      (defun my:evil-disable-ime ()
        (interactive)
        (my:evil-change-input-method nil))

      (define-key evil-insert-state-map [escape] #'evil-normal-state)

      ;; only apply some keybindings if input-method was not SKK
      (when (not (my:skk-input-p))
        (define-key evil-insert-state-map "k" #'my:maybe-exit))

      (define-key evil-normal-state-map (kbd "<Hangul>") #'my:evil-enable-ime)
      (define-key evil-normal-state-map (kbd "<henkan>") #'my:evil-enable-ime)
      (define-key evil-normal-state-map (kbd "<f13>") #'my:evil-enable-ime)
      (define-key evil-normal-state-map (kbd "<Hangul_Hanja>") #'my:evil-disable-ime)
      (define-key evil-normal-state-map (kbd "<muhenkan>") #'my:evil-disable-ime)
      (define-key evil-normal-state-map (kbd "C-<f13>") #'my:evil-disable-ime)

      (define-key evil-insert-state-map (kbd "<Hangul>") #'my:evil-enable-ime)
      (define-key evil-insert-state-map (kbd "<henkan>") #'my:evil-enable-ime)
      (define-key evil-insert-state-map (kbd "<f13>") #'my:evil-enable-ime)
      (define-key evil-insert-state-map (kbd "<Hangul_Hanja>") #'my:evil-disable-ime)
      (define-key evil-insert-state-map (kbd "<muhenkan>") #'my:evil-disable-ime)
      (define-key evil-insert-state-map (kbd "C-<f13>") #'my:evil-disable-ime)))
#+end_src

*** evil-cleverparens
#+begin_src emacs-lisp
  (leaf evil-cleverparens
    :straight t
    :after elisp-mode lisp-mode
    :hook
    ((emacs-lisp-mode-hook lisp-mode-hook) . evil-cleverparens-mode))
#+end_src

*** evil-mc
#+begin_src emacs-lisp
  (leaf evil-mc
    :straight t
    :hook (emacs-startup-hook . global-evil-mc-mode)
    :hydra
    (hydra-evil-mc nil
                   "
        Up^^             Down^^           Miscellaneous
        ---------------------------------------------------
        [_k_]   Next     [_j_]   Next     [_a_] Mark all
        [_K_]   Skip     [_J_]   Skip     [_c_] Clear all
        [_g_]  First     [_G_]   Last     [_q_] Quit
        "
                   ("a" evil-mc-make-all-cursors :exit t)
                   ("j" evil-mc-make-and-goto-next-match)
                   ("J" evil-mc-skip-and-goto-next-match)
                   ("k" evil-mc-make-and-goto-prev-match)
                   ("K" evil-mc-skip-and-goto-prev-match)
                   ("g" evil-mc-make-and-goto-first-cursor)
                   ("G" evil-mc-make-and-goto-last-cursor)
                   ("c" evil-mc-undo-all-cursors :exit t)
                   ("q" nil)))
#+end_src

*** evil-numbers
#+begin_src emacs-lisp
  (leaf evil-numbers
    :straight t
    :commands evil-numbers/dec-at-pt evil-numbers/inc-at-pt
    :bind
    (:evil-normal-state-map
     :package evil
     ("C-a" . evil-numbers/inc-at-pt)
     ("C-x" . evil-numbers/dec-at-pt)))
#+end_src

*** evil-surround
#+begin_src emacs-lisp
  (leaf evil-surround
    :straight t
    :hook (emacs-startup-hook . global-evil-surround-mode))
#+end_src

*** lsp-mode
#+begin_src emacs-lisp
  (leaf lsp-mode
    ;; temporary workaround. https://github.com/emacs-lsp/lsp-mode/pull/2109
    :straight (lsp-mode :repo "emacs-lsp/lsp-mode"
                        :fetcher github
                        :files (:defaults
                                "clients/*.el"))
    :custom
    ;; debug
    (lsp-print-io . nil)
    (lsp-trace . nil)
    (lsp-print-performance . nil)
    ;; general
    (lsp-auto-guess-root . t)
    (lsp-prefer-capf . t)
    ;; do not use flymake
    (lsp-enable-completion-at-point .t)
    (lsp-prefer-flymake . nil)
    (lsp-document-sync-method . 2) ;; always send incremental document
    (lsp-response-timeout . 5)
    (lsp-enable-indentation . nil)
    (lsp-enable-which-key-integration . t)
    ;; do not show signature auto activate, this help to avoid flicker of minibuffer...
    (lsp-signature-auto-activate . nil)
    :custom-face
    (lsp-face-highlight-read . '((t (:background "gray21" :underline t))))
    (lsp-face-highlight-write . '((t (:background "gray21" :underline t))))
    :bind
    (:lsp-mode-map
     ("C-c r" . lsp-rename))
    :preface
    (defun my:lsp-disable-eldoc-when-hover ()
      (when (my:minor-mode-active-p 'lsp-mode)
        (setq-local eldoc-message-function (lambda (&rest _) (progn)))))

    (defun my:lsp-disable-symbol-overlay ()
      (symbol-overlay-mode -1))

    (setq lsp-keymap-prefix "C-c C-l")
    :hook
    (python-mode-hook . lsp)

    (lsp-mode-hook . my:lsp-disable-eldoc-when-hover)
    (lsp-mode-hook . my:lsp-disable-symbol-overlay)
    :config
    ;; use lsp-mode's implemented capf integration
    (setq lsp-enable-completion-at-point t)
    (setq lsp-prefer-capf t))
#+end_src

*** lsp-treemacs
#+begin_src emacs-lisp
  (leaf lsp-treemacs :straight t :after lsp-mode)
#+end_src

*** lsp-ui
#+begin_src emacs-lisp
  (leaf lsp-ui
    :straight t
    :after lsp-mode
    :commands lsp-ui-doc-show
    :custom
    ;; lsp-ui-doc
    (lsp-ui-doc-enable . nil)
    (lsp-ui-doc-header . t)
    (lsp-ui-doc-include-signature . t)
    (lsp-ui-doc-position . 'at-point) ;; top, bottom, or at-point
    (lsp-ui-doc-alignment . 'window) ;; top-right of the frame
    (lsp-ui-doc-max-width . 150)
    (lsp-ui-doc-max-height . 30)
    (lsp-ui-doc-use-childframe . t)
    (lsp-ui-doc-use-webkit . nil)
    ;; lsp-ui-flycheck
    ;; use flycheck on the fly
    (lsp-ui-flycheck-enable . nil)
    ;; lsp-ui-sideline
    (lsp-ui-sideline-enable . nil)
    (lsp-ui-sideline-ignore-duplicate . t)
    (lsp-ui-sideline-show-symbol . t)
    (lsp-ui-sideline-show-hover . t)
    (lsp-ui-sideline-show-diagnostics . nil)
    (lsp-ui-sideline-show-code-actions . nil)
    ;; lsp-ui-imenu
    (lsp-ui-imenu-enable . nil)
    (lsp-ui-imenu-kind-position . 'top)
    ;; lsp-ui-peek
    (lsp-ui-peek-enable . t)
    (lsp-ui-peek-peek-height . 20)
    (lsp-ui-peek-list-width . 50)
    (lsp-ui-peek-fontify . 'always) ;; never, on-demand, or always
    :preface
    (defun my:toggle-lsp-ui-doc ()
      (interactive)
      (if lsp-ui-doc-mode
          (progn
            (lsp-ui-doc-mode -1)
            (lsp-ui-doc--hide-frame))
        (lsp-ui-doc-mode 1)))
    :bind
    (:lsp-mode-map
     :package lsp-mode
     ("C-c C-r" . lsp-ui-peek-find-references)
     ("C-c C-j" . lsp-ui-peek-find-definitions)
     ("C-c i"   . lsp-ui-peek-find-implementation)
     ("C-c m"   . imenu-list-smart-toggle)
     ("C-c s"   . lsp-ui-sideline-mode)
     ("C-c d"   . my:toggle-lsp-ui-doc))
    :hook
    (lsp-mode-hook . lsp-ui-mode)
    :config
    (ad-disable-regexp "lsp-ui-doc-.+")
    (ad-activate 'select-window))
#+end_src

*** aggressive-indent
#+begin_src emacs-lisp
  (leaf aggressive-indent
    :straight t
    :commands aggressive-indent-mode
    :hook
    (lisp-mode-hook . aggressive-indent-mode)
    (emacs-lisp-mode-hook . aggressive-indent-mode))
#+end_src

** utility packages

*** all-the-icons
#+begin_src emacs-lisp
  (leaf all-the-icons
    :require t
    :straight t
    :custom
    (all-the-icons-scale-factor . 1.0))
#+end_src

*** notifications
#+begin_src emacs-lisp
  (leaf notifications :require t)
#+end_src

*** s
#+begin_src emacs-lisp
  (leaf s
    :straight t
    :commands s-join)
#+end_src

*** exec-path-from-shell
#+begin_src emacs-lisp
  (leaf exec-path-from-shell
    :straight t
    :config
    (exec-path-from-shell-initialize)
    (let ((envs '("GOROOT" "GOPATH" "PATH")))
      (exec-path-from-shell-copy-envs envs)))
#+end_src

*** google-translate
#+begin_src emacs-lisp
  (leaf google-translate
    :straight t
    :custom
    (google-translate-translation-directions-alist . '(("ja" . "en") ("en" . "ja")))
    :config ;; Workaround for search failed. See https://github.com/atykhonov/google-translate/issues/52#issuecomment-481310626
    (with-eval-after-load "google-translate-tk"
      (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130)))

    (leaf google-translate-smooth-ui :require t))
#+end_src

*** ripgrep
#+begin_src emacs-lisp
  (leaf ripgrep :straight t)
#+end_src

*** ag
#+begin_src emacs-lisp
  (leaf ag :straight t
    :config
    (leaf wgrep-ag
      :straight t
      :bind (:ag-mode-map
             :package ag
             ("r" . wgrep-change-to-wgrep-mode))
      :hook (ag-mode-hook . wgrep-ag-setup)))
#+end_src

*** langtool
#+begin_src emacs-lisp
  (leaf langtool
    :straight t
    :commands langtool-details-error-message
    :custom
    (langtool-language-tool-jar . my:langtool-cli-path)
    (langtool-default-language . "en-US")
    (langtool-java-user-arguments . '("-Dfile.encoding=UTF-8")))
#+end_src

*** company packages
company関連は色々あるので、あえて分ける。

**** company
#+begin_src emacs-lisp
  (leaf company
    :straight t
    :diminish t
    :custom
    (company-dabbrev-downcase . nil)
    (company-idle-delay . 0)
    ;; 2文字入力で補完されるように
    (company-minimum-prefix-length . 2)
    ;; 候補の一番上でselect-previousしたら一番下に、一番下でselect-nextしたら一番上に行くように
    (company-selection-wrap-around . t)
    (company-tooltip-align-annotations . t)
    :bind
    (:company-active-map
     ("M-n" . nil)
     ("M-p" . nil)
     ("C-n" . company-select-next)
     ("C-p" . company-select-previous)
     ("C-s" . company-filter-candidates)
     ("C-h" . nil)
     ("TAB" . company-complete-common)
     ;; ドキュメント表示
     ("M-d" . company-show-doc-buffer))
    ;; C-n, C-pで補完候補を選べるように
    (:company-search-map
     ("C-n" . company-select-next)
     ("C-p" . company-select-previous))
    :hook
    (emacs-startup-hook . global-company-mode)
    :config
    (leaf company-quickhelp
      :straight t
      :custom
      (company-quickhelp-color-foreground . "black")
      :bind (:company-active-map
             :package company
             ("M-h" . company-quickhelp-manual-begin))
      :hook (global-company-mode-hook . company-quickhelp-mode))

    (leaf company-box
      :straight t
      :after all-the-icons
      :hook
      (company-mode-hook . company-box-mode)
      (global-company-mode-hook . company-box-mode)
      :custom
      (company-box-doc-enable . t)
      (company-box-doc-delay . 1.0)
      (company-box-show-single-candidate . t)
      (company-box-max-candidates . 50)
      (company-box-icons-alist . 'company-box-icons-all-the-icons)
      :config
      (setq company-box-backends-colors nil)

      ;; great configuration for company-box with all-the-icons
      ;; https://ladicle.com/post/config/#company
      (declare-function all-the-icons-faicon 'all-the-icons)
      (declare-function all-the-icons-fileicon 'all-the-icons)
      (declare-function all-the-icons-material 'all-the-icons)
      (declare-function all-the-icons-octicon 'all-the-icons)
      (setq company-box-icons-all-the-icons
            `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.7 :v-adjust -0.15))
              (Text . ,(all-the-icons-faicon "book" :height 0.68 :v-adjust -0.15))
              (Method . ,(all-the-icons-faicon "cube" :height 0.7 :v-adjust -0.05 :face 'font-lock-constant-face))
              (Function . ,(all-the-icons-faicon "cube" :height 0.7 :v-adjust -0.05 :face 'font-lock-constant-face))
              (Constructor . ,(all-the-icons-faicon "cube" :height 0.7 :v-adjust -0.05 :face 'font-lock-constant-face))
              (Field . ,(all-the-icons-faicon "tags" :height 0.65 :v-adjust -0.15 :face 'font-lock-warning-face))
              (Variable . ,(all-the-icons-faicon "tag" :height 0.7 :v-adjust -0.05 :face 'font-lock-warning-face))
              (Class . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01 :face 'font-lock-constant-face))
              (Interface . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01))
              (Module . ,(all-the-icons-octicon "package" :height 0.7 :v-adjust -0.15))
              (Property . ,(all-the-icons-octicon "package" :height 0.7 :v-adjust -0.05 :face 'font-lock-warning-face)) ;; Golang module
              (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.7 :v-adjust -0.15))
              (Value . ,(all-the-icons-material "format_align_right" :height 0.7 :v-adjust -0.15 :face 'font-lock-constant-face))
              (Enum . ,(all-the-icons-material "storage" :height 0.7 :v-adjust -0.15 :face 'all-the-icons-orange))
              (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.7 :v-adjust -0.15))
              (Snippet . ,(all-the-icons-faicon "code" :height 0.7 :v-adjust 0.02 :face 'font-lock-variable-name-face))
              (Color . ,(all-the-icons-material "palette" :height 0.7 :v-adjust -0.15))
              (File . ,(all-the-icons-faicon "file-o" :height 0.7 :v-adjust -0.05))
              (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.7 :v-adjust -0.15))
              (Folder . ,(all-the-icons-octicon "file-directory" :height 0.7 :v-adjust -0.05))
              (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.7 :v-adjust -0.15 :face 'all-the-icons-blueb))
              (Constant . ,(all-the-icons-faicon "tag" :height 0.7 :v-adjust -0.05))
              (Struct . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01 :face 'font-lock-constant-face))
              (Event . ,(all-the-icons-faicon "bolt" :height 0.7 :v-adjust -0.05 :face 'all-the-icons-orange))
              (Operator . ,(all-the-icons-fileicon "typedoc" :height 0.65 :v-adjust 0.05))
              (TypeParameter . ,(all-the-icons-faicon "hashtag" :height 0.65 :v-adjust 0.07 :face 'font-lock-constant-face))
              (Template . ,(all-the-icons-faicon "code" :height 0.7 :v-adjust 0.02 :face 'font-lock-variable-name-face))))))
#+end_src

**** company-css
#+begin_src emacs-lisp
  (leaf company-css
    :require t
    :commands company-css)
#+end_src

*** treemacs
#+begin_src emacs-lisp
  (leaf treemacs
    :straight t
    :custom
    (treemacs-is-never-other-window . t)
    :hook
    (treemacs-mode-hook . (lambda ()
                            (when (version<= "27.0.0" emacs-version)
                              (display-line-numbers-mode -1))))
    :config
    (leaf treemacs-evil :straight t :require t))
#+end_src

*** mozc
#+begin_src emacs-lisp
  (leaf mozc
    :straight t
    :if (and my:use-mozc-el my:mozc-helper-locate)
    :custom
    (mozc-keymap-kana . mozc-keymap-kana-101us)
    (mozc-candidate-style . 'posframe)
    (mozc-helper-program-name . my:mozc-helper-locate)
    :config
    ;; mozc

    (when (and my:use-mozc-el
               (boundp 'my:mozc-helper-locate))
      (defun my:disable-mozc ()
        (interactive)
        (set-input-method nil))

      (defun my:enable-mozc ()
        (interactive)
        (set-input-method 'japanese-mozc))

      (setq-default default-input-method my:input-method)
      (setq default-input-method my:input-method)

      (global-set-key (kbd "<Hangul>") #'my:enable-mozc)
      (global-set-key (kbd "<henkan>") #'my:enable-mozc)
      (global-set-key (kbd "<Hangul_Hanja>") #'my:disable-mozc)
      (global-set-key (kbd "<muhenkan>") #'my:disable-mozc)))
#+end_src

*** projectile
#+begin_src emacs-lisp
  (leaf projectile
    :straight t
    :commands projectile-register-project-type
    :hook
    (emacs-startup-hook . projectile-mode)
    :bind
    (:projectile-command-map
     ("s" . my:projectile-search-dwim))
    :custom
    (projectile-enable-idle-timer . nil)
    (projectile-enable-caching . t)
    (projectile-completion-system . 'auto)
    :preface
    (defun my:projectile-search-dwim (search-term)
      "Merge version to search document via grep/ag/rg.
        Use fast alternative if it exists, fallback grep if no alternatives in system.
        "
      (interactive (list (projectile--read-search-string-with-default
                          "Dwim search for")))
      (cond
       ((executable-find "rg") (projectile-ripgrep search-term))
       ((executable-find "ag") (projectile-ag search-term))
       (t (projectile-grep search-term))))

    :config
    (projectile-register-project-type
     'yarn
     '("package.json")
     :compile "yarn build"
     :test "yarn test"
     :run "yarn start"
     :test-suffix ".test"))
#+end_src

** モードライン関連

*** nyan-mode
#+begin_src emacs-lisp
  (leaf nyan-mode
    :straight t
    :if nil
    :custom
    (nyan-animate-nyancat . nil)
    :hook
    (emacs-startup-hook . nyan-mode))
#+end_src

*** doom-modeline
#+begin_src emacs-lisp
  (leaf doom-modeline
    :straight t
    :commands doom-modeline-def-modeline
    :custom
    (doom-modeline-buffer-file-name-style . 'truncate-with-project)
    (doom-modeline-icon . t)
    (doom-modeline-major-mode-icon . t)
    (doom-modeline-minor-modes . nil)
    :hook
    (emacs-startup-hook . doom-modeline-mode)
    :config
    (doom-modeline-def-modeline
      'main
      '(bar window-number modals matches buffer-info remote-host buffer-position selection-info)
      '(misc-info debug minor-modes input-method lsp major-mode process vcs checker)))
#+end_src

*** hide-mode-line
#+begin_src emacs-lisp
  (leaf hide-mode-line
    :straight t
    :hook
    (imenu-list-major-mode-hook . hide-mode-line-mode))
#+end_src

** selectrum関連
straight.elの作者が開発したcompletion interface library。ivyとかとの置き換え。

*** selectrum
#+begin_src emacs-lisp
  (leaf selectrum
    :straight t
    :config
    (selectrum-mode +1))
#+end_src

*** consult
swiper/counselの置き換え。

#+begin_src emacs-lisp
  (leaf consult
    :straight t
    :bind
    (:evil-normal-state-map
     :package evil
     (";" . consult-buffer)
     ("C-s" . consult-line))
    :config
    (defun my:consult-search-dwim ()
      "Merge version to search document via grep/rg.
       Use fast alternative if it exists, fallback grep if no alternatives in system.
      "
      (interactive)
      (cond
       ((executable-find "rg") (consult-ripgrep))
       (t (consult-grep)))))
#+end_src

*** embark
contextに応じたアクションを実行できる、というようなもの。embark-actを実行して、そこに対して特定のキーにバインドされているアクションを実行する形。

- B :: ~embark-become~
- S :: ~embark-collect-snapshot~
- L :: ~embark-collect-live~
- E :: ~embark-export~


というのがデフォルトのバインディングになっている。

#+begin_src emacs-lisp
  (leaf embark
    :straight t
    :bind
    (("C-S-a" . embark-act)
     ("<f1> B" . embark-bindings)))

  (leaf embark-consult
    :straight t
    :after (embark consult)
    :hook
    (embark-collect-mode-hook . embark-consult-preview-minor-mode))
#+end_src

*** marginalia
minibufferの表示に対して注釈？を追加できるパッケージ。consult/embarkそれぞれのパッケージで利用が強く推奨されているので。

#+begin_src emacs-lisp
  (leaf marginalia
    :straight t
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind
    (:minibuffer-local-map
     ("M-A" . marginalia-cycle))
    :commands (marginalia-mode)
    :global-minor-mode t)
#+end_src

*** selectrum-prescient
#+begin_src emacs-lisp
    (leaf selectrum-prescient
      :straight t
      :commands (selectrum-prescient-mode)
      :global-minor-mode t)
#+end_src

** migemo関連

*** migemo
#+begin_src emacs-lisp
  (leaf migemo
    :straight t
    :if (executable-find my:migemo-command)
    :commands migemo-init
    :custom
    (migemo-command . my:migemo-command)
    (migemo-options . '("-q" "--emacs"))
    (migemo-dictionary . my:migemo-dictionary)
    (migemo-user-dictionary . nil)
    (migemo-regex-dictionary . nil)
    (migemo-coding-system 'utf-8-unix)
    ;; 遅いのを防ぐためにキャッシュする。
    (migemo-use-pattern-alist . t)
    (migemo-use-frequent-pattern-alist . t)
    (migemo-pattern-alist-length . 1024)
    :config
    (migemo-init))
#+end_src

*** avy-migemo
#+begin_src emacs-lisp
  (leaf avy-migemo
    :after swiper
    :straight (avy-migemo :type git :host github :repo "tam17aki/avy-migemo")
    :config
    (avy-migemo-mode 1)
    (leaf avy-migemo-e.g.swiper :require t))
#+end_src

** テーマ

*** gruvbox-theme
#+begin_src emacs-lisp
  (leaf gruvbox-theme
    :after company-box
    :straight t
    :require t
    :config
    (load-theme 'gruvbox-dark-hard t)
    (my:theme-initialize))
#+end_src

** SKK

*** ddskk
#+begin_src emacs-lisp
  (leaf ddskk
    :straight t
    :if (string= my:input-method "japanese-skk")
    ;; ddskkは (provide 'skk) されているので、skkでrequireするようにする
    :require skk
    :bind (("<henkan>" . my:enable-skk-mode)
           ("<muhenkan>" . my:disable-skk-mode))
    :preface
    (defun my:enable-skk-mode ()
      (interactive)
      (skk-mode 1))

    (defun my:disable-skk-mode ()
      (interactive)
      (skk-mode -1))
    :init
    (setq default-input-method my:input-method
          skk-init-file (expand-file-name "init-ddskk.el" user-emacs-directory)))
#+end_src

*** ddskk-posframe
#+begin_src emacs-lisp
  (leaf ddskk-posframe
    :straight t
    :if my:use-posframe
    :global-minor-mode t)
#+end_src

*** yaskkserv2の設定
#+begin_src emacs-lisp
  (leaf f :straight t)
  (leaf *skk-server
    :after f
    :if my:use-skkserver
    :init
    (let ((server-program (expand-file-name "yaskkserv2"  my:user-local-exec-path))
          (dictionary-program (expand-file-name "yaskkserv2_make_dictionary" my:user-local-exec-path)))
      (cond ((and my:build-skkserver
                  (executable-find "cargo")
                  (not (executable-find server-program))
                  (not (executable-find dictionary-program)))
             (let ((base-path "/tmp/yaskkserv2"))
               (unless (f-exists? base-path)
                 (call-process "git" nil nil t  "clone" "https://github.com/wachikun/yaskkserv2" "/tmp/yaskkserv2"))
               (call-process "cargo" nil nil t "build" "--release" "--manifest-path" (expand-file-name "Cargo.toml" base-path))
               (unless (f-exists? server-program)
                 (f-copy (expand-file-name "target/release/yaskkserv2" base-path) server-program))
               (unless (f-exists? dictionary-program)
                 (f-copy (expand-file-name "target/release/yaskkserv2_make_dictionary" base-path) dictionary-program))
               ))
            (t
             (let* ((target (cond ((eq window-system 'ns) "apple-darwin")
                                  (t "uknown-linux-gnu")))
                    (path (format "https://github.com/wachikun/yaskkserv2/releases/download/%s/yaskkserv2-%s-x86_64-%s.tar.gz" my:yaskkserv2-version my:yaskkserv2-version target)))
               (call-process "curl" nil nil t "-L" path "-o" "/tmp/yaskkserv2.tar.gz")
               (call-process "tar" nil nil t "-zxvf" "/tmp/yaskkserv2.tar.gz" "-C" my:user-local-exec-path "--strip-components" "1"))))))
#+end_src


