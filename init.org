#+STARTUP: content

* Initial configuration

** Header
#+begin_src emacs-lisp
  ;;; init.el --- Init file for my own -*- lexical-binding: t; -*-

  ;; Author: derui <derutakayu@gmail.com>
  ;; Maintainer: derui <derutakayu@gmail.com>

  ;;; Commentary:

  ;;: Customization:

  ;;; Code:
#+end_src
** Initialize straight
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'cl-lib))
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache" user-emacs-directory))

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Initialize setup.el
#+begin_src emacs-lisp
  (straight-use-package 'setup)
  (require 'setup)

  ;; straightを使えるようにする
  (setup-define :straight
    (lambda (recipe)
      `(unless (straight-use-package ',recipe)
         ,(setup-quit)))
    :documentation
    "Install RECIPE with `straight-use-package'.
  This macro can be used as HEAD, and will replace itself with the
  first RECIPE's package."
    :repeatable t
    :shorthand (lambda (sexp)
                 (let ((recipe (cadr sexp)))
                   (if (consp recipe)
                       (car recipe)
                     recipe))))
#+end_src
** 起動時間を計測する
#+begin_src emacs-lisp
  (defconst my:time-zero (current-time))
  (defvar my:time-list nil)
  (defvar my:profile-enabled nil)

  (defun my:time-lag-calc (lag label)
    (if (assoc label my:time-list)
        (setcdr (assoc label my:time-list)
                (- lag (cdr (assoc label my:time-list))))
      (setq my:time-list (cons (cons label lag) my:time-list))))

  (defun my:time-lag (label)
    (let* ((now (current-time))
           (min (- (car now) (car my:time-zero)))
           (sec (- (car (cdr now)) (car (cdr my:time-zero))))
           (msec (/ (- (car (cdr (cdr now)))
                       (car (cdr (cdr my:time-zero))))
                    1000))
           (lag (+ (* 60000 min) (* 1000 sec) msec)))
      (my:time-lag-calc lag label)))

  (defun my:time-lag-print ()
    (message (prin1-to-string
              (sort my:time-list
                    (lambda  (x y)  (> (cdr x) (cdr y)))))))
  (when my:profile-enabled
    (profiler-start 'cpu+mem))
  (my:time-lag "total")

  (add-hook 'after-init-hook #'(lambda ()
                                 (my:time-lag "total")
                                 (my:time-lag-print)
                                 (when my:profile-enabled
                                   (profiler-stop)
                                   (profiler-report))
                                 )
            t)
#+end_src

** elごとの読み込み時間を取る
#+begin_src emacs-lisp
  (defvar my:setup-tracker--level 0)
  (defvar my:setup-tracker--parents nil)
  (defvar my:setup-tracker--times nil)
  (defvar my:setup-tracker-enabled nil)

  (when my:setup-tracker-enabled

    (when load-file-name
      (push load-file-name my:setup-tracker--parents)
      (push (current-time) my:setup-tracker--times)
      (setq my:setup-tracker--level (1+ my:setup-tracker--level)))

    (add-variable-watcher
     'load-file-name
     (lambda (_ v &rest __)
       (cond ((equal v (car my:setup-tracker--parents))
              nil)
             ((equal v (cadr my:setup-tracker--parents))
              (setq my:setup-tracker--level (1- my:setup-tracker--level))
              (let* ((now (current-time))
                     (start (pop my:setup-tracker--times))
                     (elapsed (+ (* (- (nth 1 now) (nth 1 start)) 1000)
                                 (/ (- (nth 2 now) (nth 2 start)) 1000))))
                (with-current-buffer (get-buffer-create "*my:setup-tracker*")
                  (save-excursion
                    (goto-char (point-min))
                    (dotimes (_ my:setup-tracker--level) (insert "> "))
                    (insert
                     (file-name-nondirectory (pop my:setup-tracker--parents))
                     " (" (number-to-string elapsed) " msec)\n")))))
             (t
              (push v my:setup-tracker--parents)
              (push (current-time) my:setup-tracker--times)
              (setq my:setup-tracker--level (1+ my:setup-tracker--level)))))))

#+end_src
* ユーザーの環境定義
** カスタムの定義
基本的には、defcustomを使っていった方がいいということなので、defcustomを使う。

#+begin_src emacs-lisp
  (defgroup my nil "My custom group" :group 'configuration)
  (defcustom my:font-size 10.5
    "current font size"
    :group 'my
    :type 'number)
  (defcustom my:font-family "HackGen"
    "current font family"
    :group 'my
    :type 'string)
  (defcustom my:input-method 'japanese-mozc
    "input method"
    :group 'my
    :type 'symbol)

  (defcustom my:ispell-regexp-ja "[一-龠ぁ-🈀ァ-𛀀ー・、。々]+"
    "Regular expression to match a Japanese word.
  The expression can be [^\000-\377]+, [^!-~]+, or [一-龠ぁ-🈀ァ-𛀀ー・、。々]+"
    :group 'my
    :type 'string)

  (defcustom my:trailing-whitespace-exclude-modes
    '(org-mode)
    "Do not trailing whitespace in these modes"
    :group 'my
    :type '(symbol))
  (defcustom my:user-local-exec-path
    "~/.local/bin"
    "The location user-local executable path"
    :group 'my
    :type 'string)
#+end_src

Langtoolに関する設定変数など。

#+begin_src emacs-lisp
  (defcustom my:langtool-version
    "4.2"
    "The version of Langtool"
    :group 'my
    :type 'string)

  (defcustom my:langtool-cli-path
    (expand-file-name (locate-user-emacs-file
                       (format "share/LanguageTool-%s/languagetool-commandline.jar"
                               my:langtool-version)))
    "The path of langtool CLI"
    :group 'my
    :type 'string)
#+end_src

SKKに関する変数。辞書サーバーを使いたい場合は、 ~my:use-skkserver~ を non-nilにしたらよい。

#+begin_src emacs-lisp

  (defvar skk-user-directory (expand-file-name "skk" user-emacs-directory))
  ;; SKK server(利用するのはyaskkserv2を利用する
  (defcustom my:use-skkserver t
    "Use skk server or not"
    :group 'my
    :type 'boolean)

  ;; SKK serverをbuildする(要cargo)
  (defcustom my:build-skkserver
    nil
    "Build skk server if not available in system"
    :group 'my
    :type 'boolean)

  ;; yaskkserv2のバージョン
  (defcustom my:yaskkserv2-version "0.1.1"
    "The version of yaskkserv2"
    :group 'my
    :type 'string)
#+end_src

posframeを使うかどうか。

#+begin_src emacs-lisp
  (defcustom my:use-posframe t
    "Use posframe entirely"
    :group 'my
    :type 'boolean)
#+end_src

*** org-roam
#+begin_src emacs-lisp
  (defcustom my:org-roam-db-location
    "~/.emacs.d/share/org-roam.db"
    "The location of database that is used by org-roam"
    :group 'my
    :type 'string)

  (defcustom my:org-roam-directory
    "~/Dropbox/git/roam"
    "The location of roam files"
    :group 'my
    :type 'directory)

  (defcustom my:org-roam-dailies-directory
    "~/Dropbox/git/roam-daily"
    "The location of roam-daily files"
    :group 'my
    :type 'directory)

  (defcustom my:org-roam-index-file
    (expand-file-name "index.org" my:org-roam-directory)
    "The location of index file"
    :group 'my
    :type 'file)
#+end_src

** 環境ごとの設定
環境によって異なる設定はここで定義しておく。これらは別ファイルで設定できるようにする。

#+begin_src emacs-lisp
  (defcustom my:mozc-el-locate nil
    "Location of mozc.el"
    :group 'my
    :type 'file)

  (defcustom my:mozc-helper-locate nil
    "Location of emacs-mozc-helper"
    :group 'my
    :type 'file)

  (defcustom my:virtualenv-path nil
    "Location of virtualenv's environment"
    :group 'my
    :type 'file)

  (defcustom my:roswell-path nil
    "Location of roswell"
    :group 'my
    :type 'file)

  (defcustom my:use-mozc-el nil
    "Use mozc as input method"
    :group 'my
    :type 'boolean)

  (defcustom my:migemo-command nil
    "The path of migemo-like executable"
    :group 'my
    :type 'file)

  (defcustom my:migemo-dictionary nil
    "The path of dictionaries for migemo"
    :group 'my
    :type 'directory)

  (defcustom my:cargo-path nil
    "The path of cargo executable"
    :group 'my
    :type 'file)

  (defcustom my:rust-analyzer-version nil
    "The path of rust-analyzer executable"
    :group 'my
    :type 'file)
#+end_src

** 外部設定の読込み
git管理外になっているファイル。これは、パス関連など、環境毎に違うので登録するとめんどくさいものに対して利用する。

#+begin_src emacs-lisp
  (let ((user-env (locate-user-emacs-file "conf/user-env.el")))
    (load user-env t))
#+end_src

** 実行パスの設定
exec-pathに必要なパスを追加する。

#+begin_src emacs-lisp
  (add-to-list 'exec-path (expand-file-name "~/.npm/bin"))
  (add-to-list 'exec-path (expand-file-name "~/.asdf/shims"))
  (add-to-list 'exec-path "/usr/local/bin")
  (add-to-list 'exec-path "/usr/bin")
  (add-to-list 'exec-path "/usr/sbin")
  (add-to-list 'exec-path my:user-local-exec-path)
  (add-to-list 'exec-path (expand-file-name "bin" my:roswell-path))
  (add-to-list 'exec-path (expand-file-name "bin" my:cargo-path))
#+end_src

** init.elの内容
#+begin_src emacs-lisp
  (defvar my:init.el-content
    '(progn
       (require 'org)
       ;; Do always overwrite init.el from generated source from init.org
       (org-babel-tangle-file (expand-file-name "init.org" user-emacs-directory)
                              (expand-file-name "init.el" user-emacs-directory))
       (batch-byte-compile-file (expand-file-name "init.el" user-emacs-directory))
       (message "Once kill emacs for apply new init.el written from init.org")
       (setq kill-emacs-hook nil)
       (kill-emacs nil t))

    "init.el contents")
#+end_src
* Emacs base configuration
** 基本設定
*** languages
right-to-leftを無効化して、多少でもパフォーマンスを上げる。
#+begin_src emacs-lisp
  (setq-default bidi-display-reordering nil)
#+end_src

言語環境は日本語。かつ、キーボードから入力される文字コードはutf-8。
#+begin_src emacs-lisp
  (set-language-environment 'Japanese)
  (set-keyboard-coding-system 'utf-8)
#+end_src

文字コードの推測ではutf-8を優先する。
#+begin_src emacs-lisp
  (setq buffer-file-coding-system 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
#+end_src

*** enable functions
各種のデフォルトでは無効化されている関数を有効化する。
#+begin_src emacs-lisp
  (put 'narrow-to-defun 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'set-goal-column 'disabled nil)
#+end_src

backspaceまたはdeleteキーで削除が行えるようにする。
#+begin_src emacs-lisp
  (if (fboundp 'normal-erase-is-backspace-mode)
      (normal-erase-is-backspace-mode 0))
#+end_src

*** change default behaviors
**** スタートページを表示しない
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

**** yes/noではなくy/nで回答できるようにする
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

**** バックアップファイルは作らない
#+begin_src emacs-lisp
  (setq backup-inhibited t)
#+end_src

**** 自動保存ファイルは作らない
#+begin_src emacs-lisp
  (setq auto-save-default nil)
#+end_src

**** タブ入力時のインデント設定
#+begin_src emacs-lisp
  (setq indent-line-function #'indent-relative-first-indent-point)
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-always-indent 'complete)
#+end_src

**** コメントのスタイル設定
#+begin_src emacs-lisp
  (setq comment-style 'indent)
#+end_src

**** 画面端での折り返しを有効にする
#+begin_src emacs-lisp
  (setq truncate-lines t)
#+end_src

**** auto-fill時にインデントを考慮する
#+begin_src emacs-lisp
  (setq adaptive-fill-regexp "[ \t]*")
#+end_src

**** lockファイルは作成しない
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

**** bufferのrevertをすぐに行うようにする
#+begin_src emacs-lisp
  (setq auto-revert-interval 1)
#+end_src

**** processから読み出せる量を増やす
#+begin_src emacs-lisp
  (setq read-process-output-max (* 1024 1024))
#+end_src

**** capfの挙動を変更する
capfでは大文字小文字を区別しない。
#+begin_src emacs-lisp
  (setq completion-ignore-case t)
  (setq completion-styles `(basic
                            ,(if (version<= emacs-version "27.0") 'helm-flex 'flex)))
#+end_src

**** ring bellは鳴らさない
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

**** cursorは点滅させない
#+begin_src emacs-lisp
  (blink-cursor-mode 0)

  ;; defaultのカーソルはbar
  (setq-default cursor-type 'bar)
#+end_src

**** 常に最終行を追加する
#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

**** VCでのsymlink確認をしないようにする
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

**** ダイアログボックスを利用しない
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src

**** native comp
#+begin_src emacs-lisp
  ;; native-comp時の警告を表示しない
  (setq native-comp-async-report-warnings-errors 'silent)
#+end_src

*** macOS限定の設定
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    ;; altとMetaを入れ替える
    (setq mac-option-modifier 'alt)
    (setq mac-command-modifier 'meta)

    ;; macOSで描画がかなり遅いのを解消できるかもしれない設定
    (add-to-list 'default-frame-alist '(inhibit-double-buffering . t)))
#+end_src

*** font-lock
#+begin_src emacs-lisp
  (setq font-lock-support-mode 'jit-lock-mode)
#+end_src

**** 全角空白やタブに色をつける
#+begin_src emacs-lisp
  (defface my-face-b-2 '((t (:background "gray26"))) "face for tab" :group 'my)
  (defface my-face-u-1 '((t (:foreground "SteelBlue" :underline t))) "" :group 'my)
  (defvar my-face-b-2 'my-face-b-2)
  (defvar my-face-u-1 'my-face-u-1)

  (defun my:font-lock-mode (&rest args)
    (font-lock-add-keywords
     major-mode
     '(("\t" 0 my-face-b-2 append)
       ("[ \t]+$" 0 my-face-u-1 append))))
  (advice-add 'font-lock-mode :before 'my:font-lock-mode)
#+end_src

**** bookmarkのfaceを無効化する
Emacs 28.1からデフォルト値が変更されたので、元々のfaceに合うように戻す。

#+begin_src emacs-lisp
  (setup *face
    (with-eval-after-load 'bookmark
      (with-eval-after-load 'modus-themes
        (set-face-attribute 'bookmark-face nil :foreground nil :background nil :inherit nil))))
#+end_src

*** mode lineでvariable pitchを使わないようにする
Emacs 29でなんでかmode lineのフォントとしてvariable pitchが利用されるような設定が追加されたので、同じものを利用するようにする。

#+begin_src emacs-lisp
  (setup *mode-line-face
    ;; mode lineをvariable pitchではなく等幅フォントを利用する。
    (set-face-attribute 'mode-line-active nil :inherit 'mode-line))
#+end_src
*** グローバルに有効にするmode
#+begin_src emacs-lisp
  (global-font-lock-mode +1)

  (show-paren-mode +1)

  (transient-mark-mode +1)

  ;; pixelベースのスクロール処理
  (pixel-scroll-precision-mode +1)
#+end_src

*** GUI設定
GUIで起動しても、スクロールバーやメニューはいらないので表示しない。
行番号についても、ネイティブの表示があるので表示しない。

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (line-number-mode -1)
  (column-number-mode -1)
  (setopt resize-mini-windows t)
  #+end_src

*** GCの設定
~#x10000000~ = ~256MiB~ を閾値としておく。これはLSPの対策のため。

#+begin_src emacs-lisp
  (setq gc-cons-threshold #x10000000)
  (setq gc-cons-percentage 0.5)
  (setq garbage-collection-messages t)
  ;; font cacheのcompact化を抑制する
  (setq inhibit-compacting-font-caches t)
#+end_src

*** major-modeのhookをdirectory localの後に起動できるようにする
https://blog.tomoya.dev/posts/how-to-automatically-switch-lsp-servers-in-lsp-mode/

denoとts-lsを切り替えながらやりたい場合などに利用する。directory localを適用してからhookを実行したい場合は、  ~<major-mode>-local-vars-hook~ というhookを実行すること。

#+begin_src emacs-lisp
  (defun my:run-local-vars-mode-hook ()
    "Run `major-mode' hook after the local variables have been processed."
    (run-hooks (intern (concat (symbol-name major-mode) "-local-vars-hook"))))
  (add-hook 'hack-local-variables-hook 'my:run-local-vars-mode-hook)
#+end_src

*** themeの設定
theme全体に関わる設定。

#+begin_src emacs-lisp
  ;; 主にmodus themeにおいて、lisp codeの実行を許容するための設定
  (setopt custom-safe-themes t)
#+end_src

*** focus outしたら強制保存
#+begin_src emacs-lisp
  (defun my:save-all-buffers ()
    (save-some-buffers "!"))

  (add-hook 'focus-out-hook #'my:save-all-buffers)
#+end_src

*** 複数のスペースは段落とみなさないように
#+begin_src emacs-lisp
  (setopt sentence-end-double-space nil)
#+end_src
** 標準パッケージ
*** browse-url
#+begin_src emacs-lisp
  (setup browse-url
    (cond
     ((executable-find "firefox-bin")
      (progn
        (setq browse-url-browser-function #'browse-url-firefox)
        (setq browse-url-generic-program "firefox-bin")
        (setq browse-url-firefox-program "firefox-bin")))
     ((executable-find "chromium")
      (progn
        (setq browse-url-browser-function #'browse-url-chromium)
        (setq browse-url-generic-program "chromium")))
     ((executable-find "vivaldi")
      (progn
        (setq browse-url-browser-function #'browse-url-chromium)
        (setq browse-url-generic-program "vivaldi")))))
#+end_src
*** server
#+begin_src emacs-lisp
  (setup server
    (:when-loaded
      ;; serverで開いたバッファをkillする
      (setopt server-kill-new-buffers t)
      (setopt server-temp-file-regexp "\\`/tmp/Re\\|/draft\\|COMMIT_EDITMSG\\'"))

    (:with-mode temporary-edit-mode
      (:hook-into server-switch-hook))
    (:require server)

    (:with-hook after-init-hook
      (:hook server-start))

    ;; define server-editing specialized minor mode
    (defun my:copy-input-and-exit ()
      "Copy the current input to the kill ring and exit."
      (interactive)
      (let ((buffer (current-buffer))
            (select-enable-clipboard t))

        (my:copy-with-system-clipboard (buffer-substring-no-properties (point-min) (point-max)))

        (or (delete-frame)
            (server-edit))

        (with-current-buffer buffer
          (let (kill-buffer-hook kill-buffer-query-functions)
            (set-buffer-modified-p 'nil)
            (kill-buffer)))))
    
    (define-minor-mode temporary-edit-mode
      "Temporary editing mode with server"
      :keymap (let ((map (make-sparse-keymap)))
                (define-key map (kbd "C-c C-y") 'my:copy-input-and-exit)
                map)))
#+end_src
*** dired
#+begin_src emacs-lisp
  (setup dired
    (defun my:dired-do-native-comp ()
      "選択されているファイルをnative-compする"
      (interactive)
      (when-let* ((file (dired-get-filename))
                  (enabled (fboundp 'native-compile-async)))
        (condition-case err
            (native-compile-async file)
          (error (dired-log "native-compile error for %s:\n%s\n" file err)))))
    
    (defun my:dired-next-buffer-on-window ()
      "現在のdiredバッファ以外で、かつ他のwindowに存在しているdired bufferに移動する。
  対象になるバッファが無い場合は何もしない"
      (interactive)
      (when-let ((next-dired-buffer (seq-find
                                     (lambda (buf)
                                       (and (eq 'dired-mode (buffer-local-value 'major-mode buf))
                                            (not (eq (current-buffer) buf))
                                            (get-buffer-window buf)))
                                     (buffer-list))))
        (select-window (get-buffer-window next-dired-buffer))))

    (defun my:dired-balance ()
      "diredを使うにあたってよく利用する状態になるように調整する.

  - 今のdired bufferが side-window用の場合は何もしない
  - windowが一つしかない場合、vertical splitをする
  - windowが３つ以上ある場合、2つにする
  - windowが２つあるが、片方がdired bufferではない場合、current bufferを表示する
  "
      (interactive)
      (unless (window-parameter (selected-window) 'window-side)
        (when (< 2 (count-windows))
          (delete-other-windows))
        (when (= 1 (count-windows))
          (split-window-horizontally))
        (let* ((current-w (get-buffer-window (current-buffer)))
               (b (seq-find (lambda (buf)
                              (let ((w2 (get-buffer-window buf)))
                                ;; side windowは対象にしない
                                (and (not (equal current-w w2))
                                     (not (window-parameter w2 'window-side)))
                                ))
                            (buffer-list)))
               (w (get-buffer-window b))
               (other-buffer-mode (buffer-local-value 'major-mode b)))
          (when (not (eq 'dired-mode other-buffer-mode))
            (save-current-buffer
              (select-window w)
              (switch-to-buffer (current-buffer))
              )
            ))))

    (:with-mode dired-mode
      ;; wdiredを有効にする
      (:bind
       "N" my:dired-do-native-comp
       ;; dired内でもhjklで移動できるようにしておく
       "h" dired-up-directory
       "l" dired-find-file
       "j" dired-next-line
       "k" dired-previous-line
       ;; 2画面ファイラっぽく、次に開いているdiredバッファに移動できるようにする
       "<tab>" my:dired-next-buffer-on-window
       "." my:dired-balance
       ))

    (:when-loaded
      ;; diredでファイルをコピーする際に、コピー先をもう一つのdiredに切り替える
      (setopt dired-dwim-target t)
      (setopt dired-recursive-copies 'always)
      (setopt dired-recursive-deletes 'always)
      (setopt dired-listing-switches "-al --group-directories-first")
      ;; 標準で用意された、新規にdiredを開かないようにするための処理
      (setopt dired-kill-when-opening-new-dired-buffer t)

      (when (eq system-type 'darwin)
        ;; macOSの場合、lsがcoreutilsとは別物なので、coreutils版の方を利用するように切り替える
        (setopt insert-directory-program "gls")
        )))
#+end_src
*** uniquify
バッファ名を単一化するためのpackage。
    
#+begin_src emacs-lisp
  (setup uniquify
    (:when-loaded
      (setopt uniquify-buffer-name-style 'forward)
      (setopt uniquify-separator "/")
      (setopt uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
      (setopt uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
      )
    (:require uniquify))
#+end_src
*** shell
#+begin_src emacs-lisp
  (setup shell
    (:when-loaded
      (setopt explicit-shell-file-name "/bin/bash")
      (setopt shell-file-name "/bin/bash")
      (setq shell-command-switch "-c"))
    
    (setenv "EMACS" "t"))
#+end_src
*** flyspell
flyspellは、そのままだと日本語が混ざっていてもエラーにしてしまうので、日本語が混ざっている場合は無視するようにする。

#+begin_src emacs-lisp
  (setup ispell
    (:when-loaded
      (setopt ispell-dictionary "en_US")
      (setopt ispell-local-dictionary-alist 
              '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
      (setopt ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)
      (setopt ispell-program-name (executable-find "hunspell"))))

  (setup flyspell
    (:when-loaded
      (setopt flyspell-issue-message-flag nil)
      (setopt flyspell-default-dictionary "en_US")
      (add-hook 'flyspell-incorrect-hook #'my:flyspell-skip-ja))
    
    (defun my:flyspell-skip-ja (beg end info)
      "Tell flyspell to skip a Japanese word.
  Call this on `flyspell-incorrect-hook'."
      (string-match my:ispell-regexp-ja (buffer-substring beg end)))

    (defun my:flyspell-enable ()
      "The function to enable flyspell in current buffer."
      (interactive)
      (flyspell-mode 1))
    )
#+end_src

*** recentf
#+begin_src emacs-lisp
  (setup recentf
    (:when-loaded
      ;; 最大1000まで保存するようにする
      (setopt recentf-max-saved-items 1000)
      ;; /tmpのものはそもそも残らないようにする
      (add-to-list 'recentf-exclude "/tmp/*"))
    
    (:hook-into emacs-startup-hook))
#+end_src
*** dabbrev
#+begin_src emacs-lisp
  (setup dabbrev
    (:global
     "M-/" dabbrev-completion
     "C-M-/" dabbrev-expand
     ))
#+end_src
*** project.el
プロジェクト管理用の各種基本的な処理を提供してくれる。projectileより機能としては少ないが、必要十分な機能はある。

#+begin_src emacs-lisp
  (setup project
    (defun my:project-try-nodejs (dir)
      "Find a super-directory of DIR containing a package.json file."
      (let ((dir (locate-dominating-file dir "package.json")))
        (and dir (cons 'explicit dir))))

    (cl-defmethod project-root ((project (head explicit)))
      (cdr project))

    (:when-loaded
      (add-hook 'project-find-functions #'my:project-try-nodejs)
      )
    )
#+end_src
*** files
#+begin_src emacs-lisp
  (setup files
    (:require files)
    ;; 5秒操作がなかったら自動保存
    (setopt auto-save-interval 5)
    (auto-save-visited-mode +1))
#+end_src
*** electric-pair
標準であるpairの挿入package。

    #+begin_src emacs-lisp
      (setup elec-pair
        (add-hook 'prog-mode-hook #'electric-pair-local-mode))
    #+end_src
*** isearch
consult/isearchを使い分けたいので、設定する。

#+begin_src emacs-lisp
  (setup isearch
    (:with-mode isearch-mode
      (:bind
       "C-l" consult-line
       "C-g" isearch-cancel  ; abortだと戻ってしまうため、Cancel にしている

       ;; C-hで文字の削除
       "C-h" isearch-delete-char

       ;; avyで結果に移動する
       "C-j" avy-isearch
       ))

    (:when-loaded
      ;; isearchでwrapするときにdingを鳴らさない
      (setopt isearch-wrap-pause t)
      ;; 検索する方向を変えるときに、再度検索し直す
      (setopt isearch-repeat-on-direction-change t)

      ;; isearchを実行しているときにlazinessに件数をカウントする
      (setopt isearch-lazy-count t)
      (setopt lazy-count-prefix-format "(%s/%s) ")
      (setopt lazy-count-suffix-format nil)

      ;; highlightをlazyにする
      (setopt isearch-lazy-highlight t)
      (setopt lazy-highlight-no-delay-length 4)))
#+end_src
** global-set-keyの設定
#+begin_src emacs-lisp
  (setup *key-binding
    (:global
     (kbd "C-z") nil
     (kbd "C-h") #'backward-delete-char
     (kbd "M-?") #'help-for-help
     (kbd "C-m") #'newline-and-indent
     (kbd "C-x /") #'dabbrev-expand
     (kbd "C-x ,") #'delete-region
     (kbd "M-;") #'comment-dwim
     (kbd "C-x C-b") #'ibuffer
     (kbd "C-/") #'undo
     (kbd "M-y") #'consult-yank-pop
     (kbd "C-<tab>") #'completion-at-point
     (kbd "M-i") #'backward-paragraph
     (kbd "M-o") #'forward-paragraph
     (kbd "C-;") #'consult-buffer
     (kbd "<escape>") #'modalka-mode
     (kbd "<f2>") nil
     )
    (define-key read-expression-map (kbd "TAB") #'completion-at-point)
    )
#+end_src

** 標準処理に対するadvice
#+begin_src emacs-lisp
  (setup *advices
    (defun my:no-kill-new-duplicate (yank &optional _)
      "kill-ringにおなじ内容が保存されないようにする"
      (setq kill-ring (delete yank kill-ring)))
    (advice-add 'kill-new :before #'my:no-kill-new-duplicate)

    (defun my:no-kill-empty-only-content (f &rest args)
      "空文字列に相当する場合はkill-ringに保存しないようにする"
      (let* ((yank (car args)))
        (unless (string-blank-p yank)
          (apply f args))))
    
    (advice-add 'kill-new :around #'my:no-kill-empty-only-content))
#+end_src

** OSごとの設定
#+begin_src emacs-lisp
  (when window-system
    (cond
     ((eq window-system 'x)
      ;; window-systemがxの場合に実行される初期化elisp
      ;; x11を利用している場合、クリップボードの連携を有効にする。
      (setopt select-enable-clipboard t)
      (setopt select-enable-primary nil))
     ((eq window-system 'pgtk)
      (setq my:wl-copy-process nil)
      (defun my:wl-copy (text)
        (setq my:wl-copy-process (make-process :name "wl-copy"
                                               :buffer nil
                                               :command '("wl-copy" "-f" "-n")
                                               :connection-type 'pipe
                                               :noquery t))
        (process-send-string my:wl-copy-process text)
        (process-send-eof my:wl-copy-process))
      (defun my:wl-paste ()
        (if (and my:wl-copy-process (process-live-p my:wl-copy-process))
            nil ; should return nil if we're the current paste owner
          (shell-command-to-string "wl-paste -n | tr -d \r")))
      (setq interprogram-cut-function #'my:wl-copy)
      (setq interprogram-paste-function #'my:wl-paste)
      )))
#+end_src

* ユーザー定義
** 便利関数など
#+begin_src emacs-lisp
  (setup *utility-functions

    (defun my:buffer-name-list ()
      "Get list of buffer name"
      (mapcar (function buffer-name) (buffer-list)))

    (defun my:delete-trailing-whitespace ()
      "delete trailing whitespace if the buffer is associated a major mode in `my:trailing-whitespace-exclude-modes'"
      (unless (seq-some (lambda (x) (eq major-mode x)) my:trailing-whitespace-exclude-modes)
        (delete-trailing-whitespace)))

    (defun my:minor-mode-active-p (mode)
      "return specified minor mode is active or not"
      (let ((active-modes (cl-remove-if-not (lambda (it) (and (boundp it) (symbol-value it))) minor-mode-list)))
        (member mode active-modes)))

    (defun my:copy-with-system-clipboard (str)
      "Copy passed string to system clipboard.
  This function does not add `str' to the kill ring."
      (when (display-graphic-p)
        (cond
         ((eq system-type 'darwin)
          (let ((proc (make-process :name "pbcopy" :buffer nil :command '("pbcopy") :connection-type 'pipe)))
            (process-send-string proc str)
            (process-send-eof proc)
            (kill-process proc)))
         ((and (eq system-type 'gnu/linux)
               (eq window-system 'pgtk)
               (executable-find "wl-copy"))
          (let ((proc (make-process :name "wl-copy"
                                    :buffer nil
                                    :command '("wl-copy" "-f" "-n")
                                    :connection-type 'pipe)))
            (process-send-string proc str)
            (process-send-eof proc)
            (kill-process proc)))
         (t
          nil)
         )))
    )
#+end_src
*** treesitを利用したexpand-region的な関数
https://github.com/magnars/expand-region.el/pull/279/files

上記のPrを参考に。

#+begin_src emacs-lisp
  (defun my:treesit-expand-region--between-node (a b)
    "`(A B)' の間に存在するnodeを取得する"
    (let ((start (min a b))
          (end (max a b)))
      (treesit-parent-until
       (treesit-node-at start)
       (lambda (node) (< end (treesit-node-end node)))))
    )

  (defun my:treesit-expand-region--parent-node ()
    "pointの位置にあるnodeの親を取得する"
    (when-let* ((node (if (region-active-p)
                          (my:treesit-expand-region--between-node (region-beginning) (region-end))
                        (treesit-node-at (point)))))
      (goto-char (treesit-node-start node))
      (set-mark (treesit-node-end node))
      (activate-mark))
    )

  (defun my:treesit-expand-region ()
    "treesitが有効な場合にexpand regionを実施する。treesitが有効ではない場合はpuniを利用する"
    (interactive)
    (if (and (functionp 'treesit-available-p)
             (treesit-available-p)
             (treesit-language-at (point))
             )
        (my:treesit-expand-region--parent-node)
      (puni-expand-region))
    )
#+end_src
** 既存機能の拡張
*** kill-regionの拡張
#+begin_src emacs-lisp
  (setup *extend-kill-region
    (defun my:kill-word-or-kill-region (f &rest args)
      "kill-regionにおいて、リージョンが選択されていない場合にはbackward-kill-wardを実行するように。"
      (if (and (called-interactively-p 'interactive) transient-mark-mode (not mark-active))
          (backward-kill-word 1)
        (apply f args)))

    (advice-add 'kill-region :around 'my:kill-word-or-kill-region))
#+end_src

*** kill-lineの拡張
#+begin_src emacs-lisp
  (setup *extend-kill-line
    (defun my:kill-line-and-fixup (f &rest args)
      "kill-lineの際に、次の行の行頭に連続している空白を削除する"
      (if (and (not (bolp)) (eolp))
          (progn
            (forward-char)
            (fixup-whitespace)
            (backward-char))
        (apply f args)))

    (advice-add 'kill-line :around 'my:kill-line-and-fixup))
#+end_src

*** downcase/upcase-char
なぜかこの処理が存在しなかったので追加する。

#+begin_src emacs-lisp
  (defun my:upcase-char ()
    "upcase current point character"
    (interactive)
    (save-excursion
      (let* ((current-point (point))
             (upcased (s-upcase (buffer-substring-no-properties current-point (1+ current-point)))))
        (replace-region-contents current-point (1+ current-point) (lambda () upcased)))))

  (defun my:downcase-char ()
    "downcase current point character"
    (interactive)
    (save-excursion
      (let* ((current-point (point))
             (downcased (s-downcase (buffer-substring-no-properties current-point (1+ current-point)))))
        (replace-region-contents current-point (1+ current-point) (lambda () downcased)))))
#+end_src
*** ファイルシステム関連
#+begin_src emacs-lisp
  (defun my:th-rename-tramp-buffer ()
    "trampで開いたファイルについて、バッファ名を変更する"
    (when (file-remote-p (buffer-file-name))
      (rename-buffer
       (format "%s:%s"
               (file-remote-p (buffer-file-name) 'method)
               (buffer-name)))))

  (defun my:th-find-file-sudo (file)
    "Opens FILE with root privileges."
    (interactive "F")
    (set-buffer (find-file (concat "/sudo::" file))))

  (add-hook 'find-file-hook #'my:th-rename-tramp-buffer)
#+end_src

*** scratchバッファの拡張
#+begin_src emacs-lisp
  (setup *scratch-expansion
    ;; (@> "*scratch*をkillできないようにする")
    (defun my:make-scratch (&optional arg)
      "scratchバッファをkillできないようにする"
      ;; "*scratch*" を作成して buffer-list に放り込む
      (set-buffer (get-buffer-create "*scratch*"))
      (funcall initial-major-mode)
      (erase-buffer)
      (when (and initial-scratch-message (not inhibit-startup-message))
        (insert initial-scratch-message))
      (or arg (progn (setq arg 0)
                     (switch-to-buffer "*scratch*")))
      (cond ((= arg 0) (message "*scratch* is cleared up."))
            ((= arg 1) (message "another *scratch* is created"))))

    (defun my:clear-scratch-when-kill-buffer ()
      (if (string= "*scratch*" (buffer-name))
          (progn (my:make-scratch 0) nil)
        t))

    ;; *scratch* バッファで kill-buffer したら内容を消去するだけにする
    (add-hook 'kill-buffer-query-functions #'my:clear-scratch-when-kill-buffer))
#+end_src

** side window
https://www.gnu.org/software/emacs/manual/html_node/elisp/Side-Windows.html

Side windowという形で、frameの特定の側にwindowを作成することができる。

#+begin_src emacs-lisp
  (defvar my:display-buffer-list-in-side-window nil)
  (setq my:display-buffer-list-in-side-window
        `(((0 left) . ,(rx (or
                            "*completion*"
                            "*Help*"
                            "*Messages*"
                            ;; magit-staus系統はside window
                            "magit: "
                            ;; deepl系統もside window
                            "*DeepL Translate*")
                           ))
          ((0 right) . ,(rx (or
                             ;; xref-referenceとかで分割されるのが結構ストレスなので
                             "*xref*"
                             )))
          
          ((1 left) . ,(rx (or
                            ;; commit messageはmagitと並ぶ格好にする
                            "COMMIT_EDITMSG")))))

  (setq display-buffer-alist nil)

  (seq-each (lambda (x)
              (let* ((config-slot (caar x))
                     (config-side (cadar x))
                     (config-buffer-regexp (cdr x)))
                (add-to-list 'display-buffer-alist
                             `(,config-buffer-regexp
                               (display-buffer-in-side-window)
                               (side . ,config-side)
                               (slot . ,config-slot)
                               (dedicated . t)
                               (window-width . 0.25)
                               (window-parameters . ((no-other-window . nil) ; disable because it makes me easier to switch window
                                                     (no-delete-other-windows . t)))))
                ))
            my:display-buffer-list-in-side-window)
#+end_src
** deepl連携
deeplと連携して、翻訳した文章をコピペするための処理を提供する。

#+begin_src emacs-lisp
  (defcustom my:deepl-auth-key nil
    "Auth key for deepl"
    :group 'my
    :type '(string))

  (defcustom my:deepl-api-host "api-free.deepl.com"
    "The host for deepl API. Use `api-free' when your plan is free."
    :type 'string
    :group 'my)

  (defcustom my:deepl-send-confirmation-threshold 3000
    "Threshold of string before sending deepl"
    :type 'string
    :group 'my)

  (setup request (:straight request))
  (setup *deepl
    (cl-defun my:deepl-send-string-confirm (&key retry)
      "Do confirmation before sending large string to deepl."
      (y-or-n-p (format "It's over %d characters, do you really want to send it" my:deepl-send-confirmation-threshold)))

    (cl-defun my:deepl-translate-internal (text source-lang target-lang callback)
      "Call deepl translate with confirmation."
      (when (and (> (length text) my:deepl-send-confirmation-threshold)
                 (not (my:deepl-send-string-confirm)))
        (cl-return-from my:deel-translate-internal))

      (request (format "https://%s/v2/translate" my:deepl-api-host)
        :method "POST"
        :data `(
                ("auth_key" . ,my:deepl-auth-key)
                ("text" . ,text)
                ("source_lang" . ,source-lang)
                ("target_lang" . ,target-lang))
        :parser 'json-read
        :success callback))

    (cl-defun my:deepl-output-message (&key data &allow-other-keys)
      "Output and kill message with temporary buffer."
      (save-excursion
        (with-temp-buffer
          (rename-buffer "*DeepL Translate*")
          (switch-to-buffer (current-buffer))
          (let ((translated-text (cdr (assoc 'text (aref (cdr (assoc 'translations data)) 0)))))
            (insert translated-text)
            (when (y-or-n-p "Use this translation?")
              (kill-new translated-text))))))

    (defun my:japanese-character-p (char)
      (or (<= #x3041 char #x309f) ; hiragana
          (<= #x30a1 char #x30ff) ; katakana
          (<= #x4e01 char #x9faf) ; kanji
          ))

    (defun my:deepl-translate (start end)
      "Translate region via deepl."
      (interactive "r")
      (let ((region (buffer-substring-no-properties start end)))
        ;; 3文字以上日本語が含まれている場合は日本語と判断する。
        (if (>= (cl-count-if #'my:japanese-character-p region) 3)
            (my:deepl-translate-internal region "JA" "EN" #'my:deepl-output-message)
          (my:deepl-translate-internal region "EN" "JA" #'my:deepl-output-message))))
    )
#+end_src

* フォントの設定
色々難しいところなので、ここはsetupでラップする。

#+begin_src emacs-lisp
  (setup *font
    (with-eval-after-load 'nerd-icons
      (:and window-system
          (add-hook 'emacs-startup-hook #'my:font-initialize))
      (defun my:font-initialize (&optional font-size)
        "Initialize fonts on window-system"
        (interactive "P")

        (let ((font-size (if font-size
                             (read-minibuffer "Font Size:")
                           my:font-size)))
          (when window-system
            (cond
             ((eq window-system 'ns)
              (let* ((size (or font-size my:font-size))
                     (asciifont my:font-family)
                     (jpfont my:font-family)
                     (h (round (* size 10)))
                     (fontspec)
                     (jp-fontspec))
                (set-face-attribute 'default nil :family asciifont :height h)
                (setq fontspec (font-spec :family asciifont))
                (setq jp-fontspec (font-spec :family jpfont))
                (set-fontset-font nil 'japanese-jisx0208 jp-fontspec)
                (set-fontset-font nil 'japanese-jisx0212 jp-fontspec)
                (set-fontset-font nil 'japanese-jisx0213-1 jp-fontspec)
                (set-fontset-font nil 'japanese-jisx0213-2 jp-fontspec)
                (set-fontset-font nil '(#x0080 . #x024F) fontspec)
                (set-fontset-font nil '(#x0370 . #x03FF) fontspec)
                (when (featurep 'nerd-icons)
                  (set-fontset-font nil 'unicode (font-spec :family nerd-icons-font-family) nil 'append))
                (message (format "Setup for %s with %f" asciifont size))))
             ((or (eq window-system 'x) (eq window-system 'pgtk))
              (let* ((size (or font-size my:font-size))
                     (asciifont my:font-family)
                     (jpfont my:font-family)
                     (h (round (* size 10)))
                     (jp-fontspec (font-spec :family jpfont)))
                (when (featurep 'nerd-icons)
                  (set-fontset-font nil 'unicode (font-spec :family nerd-icons-font-family) nil 'append))
                (set-face-attribute 'default nil :family asciifont :height h)
                (unless (string= asciifont jpfont)
                  (set-fontset-font nil 'unicode jp-fontspec nil))
                (message (format "Setup for %s with %f" asciifont size))))
             (t
              (message "Not have window-system"))))))))
#+end_src

** 不要なフォント表示を抑制する
#+begin_src emacs-lisp
  (setq redisplay-skip-fontification-on-input t)
#+end_src
* init.org関連の設定
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setup *for-init-org
      (defun my:restore-init.el ()
        (when (string=
               (expand-file-name "init.org" user-emacs-directory)
               (buffer-file-name))
          (when-let* ((byte-compiled-file (expand-file-name "init.elc" user-emacs-directory)))
            (when (file-exists-p byte-compiled-file)
              (delete-file byte-compiled-file)))
          
          (with-temp-buffer
            (insert ";; -*- coding: utf-8 -*-")
            (newline)
            (insert (prin1-to-string my:init.el-content))
            (write-file (expand-file-name "init.el" user-emacs-directory) nil))))
      
      (:with-function my:restore-init.el
        (:hook-into after-save-hook))
      )
    )
#+end_src

* package設定
原則は、1packageにつき1見出しであり、関連するパッケージはleaf側でくくるようにする。

major-modeなどという単位は、org側のoutlineで設定するようにする。
** テーマ

*** modus-themes
#+begin_src emacs-lisp
  (setup modus-themes
    (:straight (modus-themes :type git :host github :repo "protesilaos/modus-themes"))
    (:when-loaded
      (setopt modus-themes-slanted-constructs t)
      (setopt modus-themes-bold-constructs t)
      (setopt modus-themes-mixed-fonts nil)
      (setopt modus-themes-variable-pitch-ui nil)
      
      (set-face-attribute 'modus-themes-completion-selected nil :inherit nil))

    (load-theme 'modus-vivendi-tinted)

    ;; mode lineの表示が微妙だったので調整している
    (let ((line (face-attribute 'mode-line :underline)))
      (set-face-attribute 'mode-line          nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :underline  line)
      (set-face-attribute 'mode-line          nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :box        nil))

    )
#+end_src

** transient
magitで使われているUIをlibraryにしたもの。

#+begin_src emacs-lisp
  (setup transient
    (:straight (transient :type git :host github :repo "magit/transient" :branch "main"))
    (:require transient))
#+end_src

*** org
#+begin_src emacs-lisp
  (setup *org-transient
    (with-eval-after-load 'transient
      (transient-define-prefix my:org-transient ()
        "Prefix for Org-mode related"
        [["Navigation"
          ("J" "Forward heading same level" org-forward-heading-same-level :transient t)
          ("K" "Backward heading same level" org-backward-heading-same-level :transient t)
          ("j" "Next heading" org-next-visible-heading :transient t)
          ("k" "Previous heading" org-previous-visible-heading :transient t)
          ("u" "Up level" outline-up-heading :transient t)
          ("l" "Change TODO state" org-cycle :transient t)
          ("h" "Org heading" consult-org-heading)
          ]
         ["Capture"
          ("c" "Capture" org-capture)
          ("r" "Org roam capture" org-roam-capture)
          ("d" "Done TODO" my:org-done-todo)
          ("n" "Toggle narrow subtree" org-toggle-narrow-to-subtree :transient t)
          ]
         ]
        )))
#+end_src

*** Mark/Replace
markしたりnarrow/widenしたりするcommandをまとめたtransient.
#+begin_src emacs-lisp
  (setup *mark/replace-transient
    (with-eval-after-load 'transient
      (transient-define-prefix my:mark/replace-transient ()
        "The prefix for mark/replace related commands"
        [
         ["Rectangle"
          ("v" "Mark rectangle" rectangle-mark-mode)
          ("k" "Kill rectangle" kill-rectangle)
          ("y" "Copy rectangle" copy-rectangle-as-kill)
          ]
         ["Narrow/Widen"
          ("n" "Narrow to region" narrow-to-region)
          ("w" "Widen" widen)
          ]
         ["Replace"
          ("r" "Replace by visual" visual-replace)
          ("t" "Replace thing at point by visual" visual-replace-thing-at-point)
          ]
         ])))
#+end_src
*** Navigation
consultなどでの、buffer/fileなどでの移動をまとめるTransient

#+begin_src emacs-lisp
  (setup *navigation-transient
    (with-eval-after-load 'transient
      
      (transient-define-prefix my:navigation-transient ()
        "The prefix for navigation via consult and other commands."
        [
         ["Consult"
          ("b" "Buffer" consult-buffer)
          ("h" "Recentf" consult-recent-file)
          ("l" "Line" consult-line)
          ("s" "Ripgrep" consult-ripgrep)
          ("F" "Search file by Fd" consult-fd)
          ("i" "Imenu list" consult-imenu)
          ]
         ["File and directory"
          ("e" "find file" find-file)
          ("d" "Dired jump" dired-jump)
          ("f" "Find file for project" projectile-find-file)
          ]
         ["Search by command"
          ("R" "Find by ripgrep" rg-menu)
          ]
         ])
      )
    )
#+end_src
*** Perspective
perspective関連のcommandをまとめるTransient.

#+begin_src emacs-lisp
  (setup *persp-transient
    (with-eval-after-load 'transient
      (transient-define-prefix my:persp-transient ()
        "The prefix for persp command."
        [
         ["Buffer navigation"
          ("b" "Switch buffer" persp-switch-to-buffer*)
          ]
         ["Change perspective"
          ("s" "Switch perspective" persp-switch)
          ("k" "Kill perspective" persp-kill)
          ]
         ["Move default perspective"
          ("o" "Switch org perspective" (lambda () (interactive) (persp-switch "org")))
          ("c" "Switch code perspective" (lambda () (interactive) (persp-switch "code")))
          ("m" "Switch misc perspective" (lambda () (interactive) (persp-switch "misc")))
          ]
         ])
      )
    )

#+end_src
*** Projective
#+begin_src emacs-lisp
  (setup *project-transient
    (with-eval-after-load 'transient
      (transient-define-prefix my:project-transient ()
        "The prefix for project-related command"
        [
         ["Open/Select"
          ("o" "Open project" project-switch-project)
          ("D" "Forget project" project-forget-project)
          ("Z" "Forget zombie projects" project-forget-zombie-projects)]
         ["Find file/Search/Buffer"
          ("s" "Search project" consult-ripgrep)
          ("f" "Find file in project" consult-fd)
          ("b" "Switch to project buffer" project-switch-to-buffer)]])
      )
    )
#+end_src
*** Puni's structturing editing
puniが提供するStructuring edit を継続して実行するTransient 。modalka-modeがOffであることを前提としている。

#+begin_src emacs-lisp
  (setup *structuring-edit-transient
    (with-eval-after-load 'transient
      (transient-define-prefix my:structuring-transient ()
        "The prefix for structuring editing command"
        [
         ["Quit"
          ("q" "Quit" ignore)]
         ["Move with structuring"
          ("h" "backward char" backward-char :transient t)
          ("j" "Next sexp" puni-forward-sexp :transient t)
          ("k" "Previous sexp" puni-backward-sexp :transient t)
          ("l" "Forward char" forward-char :transient t)
          ("H" "Beginning of sexp" puni-beginning-of-sexp :transient t)
          ("L" "End of sexp" puni-end-of-sexp :transient t)
          ("," "Backward punct" puni-syntactic-backward-punct :transient t)
          ("." "Forward punct" puni-syntactic-forward-punct :transient t)
          ]
         ["Basic editing"
          ("D" "Kill line balanced" puni-kill-line :transient t)
          ("x" "Delete character force" (lambda () (interactive) (forward-char) (puni-force-delete)) :transient t)
          ("d" "Delete backward" puni-backward-delete-char :transient t)
          ("w" "Kill active region" puni-kill-active-region :transient t)
          ("u" "undo" undo :transient t)
          ("U" "redo" vundo :transient t)]
         ["Useful editing"
          ("s" "Sqeeze" puni-squeeze :transient t)
          ("b" "Barf forward" puni-barf-forward :transient t)
          ("B" "Barf backward" puni-barf-backward :transient t)
          ("f" "Slurp forward" puni-slurp-forward :transient t)
          ("F" "Slurp backward" puni-slurp-backward :transient t)]
         ["Advanced editing"
          ("r" "Raise current exp" puni-raise :transient t)
          ("(" "Wrap with ())" puni-wrap-round :transient t)
          ("<" "Wrap with <>" puni-wrap-angle :transient t)
          ("[" "Wrap with []" puni-wrap-square :transient t)
          ("{" "Wrap with {}" puni-wrap-curly :transient t)
          ]])
      )
    )
#+end_src
** diminish
#+begin_src emacs-lisp
  (setup diminish
    (:straight diminish))
#+end_src

** major-modes
*** org
#+begin_src emacs-lisp
  (setup org
    (:straight org)
    (:when-loaded
      
      ;; org-mode内部のソースを色付けする
      (setopt org-src-fontify-natively t)
      ;; org-modeの開始時に、行の折り返しを無効にする。
      (setopt org-startup-truncated t)
      ;; follow-linkから戻ることを可能とする。
      (setopt org-return-follows-link t)
      ;; 自動的にタグをalignしない
      (setopt org-auto-align-tags nil)
      (setopt org-tags-column 0)
      (setopt org-catch-invisible-edits 'show-and-error)
      ;; 先頭にあるstarを隠す
      (setopt org-hide-leading-stars t)
      ;; org特有のCtrl-a/eの挙動を使う
      (setopt org-special-ctrl-a/e t)
      ;; 現在のsubtreeの後にheadingを追加するようにする
      (setopt org-insert-heading-respect-content t)

      ;; UTF8にあるentitiesを利用するようにする
      (setopt org-prettiy-entities t)
      ;; outlineのellipsisで使う文字を指定する
      (setopt org-ellipsis "…")
      (setopt org-refile-use-outline-path 'file)
      (setopt org-outline-path-complete-in-steps nil)
      (setopt org-log-done 'time)
      (setopt org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))

      (setopt org-adapt-indentation nil)
      (setopt org-clock-out-remove-zero-time-clocks t)

      (setopt org-structure-template-alist '(("s" . "src")
                                             ("e" . "example")
                                             ("c" . "center")
                                             ("q" . "quote")
                                             ("v" . "verse")
                                             ("C" . "comment")
                                             ("E" . "export")
                                             ("l" . "src emacs-lisp")
                                             ("h" . "export html")
                                             ("a" . "export ascii")))))

  (setup ob-plantuml
    (:with-feature org
      (:when-loaded
        (:require ob-plantuml)
    (setq org-plantuml-jar-path (expand-file-name (locate-user-emacs-file "plantuml.jar")))
    (add-to-list 'org-babel-load-languages '(plantuml . t)))))

  (setup *org-local-functions
    (:with-function my:org-roam-project-update-tag
      (:hook-into after-save-hook))
    
    (defun my:org-capture ()
      "do capture fastest"
      (interactive)
      (org-capture nil "t"))

    (defun my:org-done-todo ()
      (interactive)
      (org-todo "DONE"))

    (defun my:org-current-is-todo ()
      (string= "TODO" (org-get-todo-state)))

    (defun my:org-roam-buffer-p (&optional buffer)
      "Return boolean that current buffer is roam buffer or not"
      (with-current-buffer (or buffer (current-buffer))
        (and buffer-file-name
             (string= (expand-file-name (file-name-as-directory my:org-roam-directory))
                      (expand-file-name (file-name-directory buffer-file-name))))))

    (defun my:org-roam-project-file-p (&optional buffer)
      "Return non-nil if current buffer has any todo entry"
      (org-element-map
          (org-element-parse-buffer 'headline)
          'headline
        (lambda (e) (eq (org-element-property :todo-type e) 'todo))
        nil 'first-match))

    (defun my:org-roam-update-roam-tags (&rest tags)
      "Update filetags with TAGS list"
      (let* ((tags (combine-and-quote-strings tags " ")))
        (my:org-set-keyword "filetags" tags)))

    (defun my:org-roam-project-update-tag ()
      "Update PROJECT tag in the current buffer."
      (when (and (not (active-minibuffer-window))
                 (my:org-roam-buffer-p))
        (save-excursion
          (goto-char (point-min))
          (let* ((tags (or (my:org-get-keyword "filetags") ""))
                 (tags (--map (s-replace-all '(("\"" . "")) it) (s-split " " tags)))
                 (original-tags tags))
            (if (my:org-roam-project-file-p)
                (setq tags (seq-uniq (cons "project" tags)))
              (setq tags (remove "project" tags)))
            (unless (equal original-tags tags)
              (apply #'my:org-roam-update-roam-tags tags))))))

    (defun my:org-roam-project-files ()
      "Return a list of note files containing 'project' tag." ;
      (seq-uniq
       (seq-map
        #'car
        (org-roam-db-query
         [:select [nodes:file]
                  :from tags
                  :left-join nodes
                  :on (= tags:node-id nodes:id)
                  :where (like tag (quote "%\"project\"%"))]))))


    (defun my:org-set-keyword (keyword value &optional buffer)
      "Add or replace VALUE of KEYWORD of org-mode to current buffer. "
      (save-excursion
        (with-current-buffer (or buffer (current-buffer))
          (let* ((org-tree (org-element-parse-buffer))
                 (el (org-element-map
                         org-tree
                         'keyword
                       (lambda (el) (let ((keyword-in-el (org-element-property :key el)))
                                      (and (string-match-p keyword keyword-in-el)
                                           el)))
                       nil 'first-match)))
            (when el
              (delete-region (org-element-property :begin el) (org-element-property :end el))
              (setq org-tree (org-element-parse-buffer)))

            (let* ((first-keyword (org-element-map org-tree 'keyword #'identity nil t))
                   (el (if (not el)
                           (let* ((el (org-element-create 'keyword))
                                  (el (org-element-put-property el :key keyword))
                                  (el (org-element-put-property el :value value)))
                             (goto-char (1+ (org-element-property :end first-keyword)))
                             (newline)
                             (insert (org-element-interpret-data el)))
                         (org-element-put-property el :value value))))

              (goto-char (org-element-property :end first-keyword))
              (insert (org-element-interpret-data el))
              (save-buffer))))))

    (defun my:org-get-keyword (keyword &optional buffer)
      "Get KEYWORD from BUFFER or current buffer. You can use regexp or raw string for KEYWORD."
      (with-current-buffer (or buffer (current-buffer))
        (let ((el (org-element-map
                      (org-element-parse-buffer)
                      'keyword
                    (lambda (el)
                      (when (string-match-p (s-upcase keyword) (org-element-property :key el)) el)) nil 'first-match)))
          (when el
            (org-element-property :value el)))))

    (defun my:org-global-props (&optional property buffer)
      "Get the plists of global org properties of current buffer."
      (unless property (setq property "PROPERTY"))
      (with-current-buffer (or buffer (current-buffer))
        (org-element-map
            (org-element-parse-buffer)
            'keyword
          (lambda (el) (when (string-match property (org-element-property :key el)) el)))))

    (defun my:org-add-ymd-to-archive (name)
      "replace anchor to YYYY-MM string"
      (let* ((ymd (format-time-string "%Y-%m")))
        (replace-regexp-in-string "#YM" ymd name)))

    (:with-feature org
      (:when-loaded
        (advice-add 'org-extract-archive-file :filter-return #'my:org-add-ymd-to-archive))))

  (setup *refile-settings
    (:with-feature org
      (:when-loaded
        (let ((project (expand-file-name "project.org" my:org-roam-directory)))
          (setq org-refile-targets
                `((,project :maxlevel . 1)))))))

  (setup *capture-settings
    (:with-feature org
      (:when-loaded
        (:and my:org-roam-directory
              (progn 
                (let ((inbox (expand-file-name "inbox.org" my:org-roam-directory)))
                  (setq org-capture-templates
                        `(("t" "todo" plain (file ,inbox)
                           "* TODO %?\n%U\n" :clock-resume t))))

                (defun my:org-set-archive-name-for-month (&rest args)
                  (setq-local org-archive-location (concat "./archives/"
                                                           (format-time-string "%Y%m" (current-time))
                                                           "-%s_archive::datetree/* Finished Tasks")))

                (advice-add 'org-archive-subtree :before #'my:org-set-archive-name-for-month))))))

  (setup org-agenda
    (:and my:org-roam-directory)
    (:global
     (kbd "C-c a")  org-agenda)
    (:when-loaded
      
      
      (setopt org-agenda-custom-commands '((" " "Agenda"
                                            ((tags
                                              "REFILE"
                                              ((org-agenda-overriding-header "To refile")
                                               (org-tags-match-list-sublevels nil)))
                                             (tags
                                              "PROJECT"
                                              ((org-agenda-overriding-header "To project")
                                               (org-tags-match-list-sublevels nil)))))))
      (setopt org-agenda-current-time-string "← now")
      (setopt org-agenda-time-grid '((daily today require-timed)
                                     (0700 0800 0900 01000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400)
                                     "-"
                                     "────────────────"))
      (setopt org-agenda-prefix-format '((agenda . " %i %-15(my:org-agenda-category 15)%?-12t%s")
                                         (todo . " %i %-15(my:org-agenda-category 15) ")
                                         (tags . " %i %-15(my:org-agenda-category 15) ")
                                         (search . " %i %-15(my:org-agenda-category 15) ")))

      (setopt org-agenda-clockreport-parameter-plist '(
                                                       :maxlevel 5
                                                       :block t
                                                       :tstart t
                                                       :tend t
                                                       :emphasize t
                                                       :link t
                                                       :narrow 80
                                                       :indent t
                                                       :formula nil
                                                       :level 5
                                                       :tcolumns nil
                                                       :properties ("CATEGORY")
                                                       :hidefiles t)))

    (:when-loaded

      (defun my:org-agenda-files-update (&rest _)
        "Update the value of `org-agenda-files'."
        (setq org-agenda-files (my:org-roam-project-files))
        (add-to-list 'org-agenda-files (expand-file-name "inbox.org" my:org-roam-directory)))

      (advice-add 'org-agenda :before #'my:org-agenda-files-update)
      
      (defun my:org-agenda-category (&optional len)
        "Get category of item at point for agenda.

  Category is defined by one of the following items:

  - CATEGORY property
  - TITLE keyword
  - TITLE property
  - filename without directory and extension

  When LEN is a number, resulting string is padded right with
  spaces and then truncated with ... on the right if result is
  longer than LEN.

  Usage example:

    (setq org-agenda-prefix-format
          '((agenda . \" %(my:org-agenda-category) %?-12t %12s\")))

  Refer to `org-agenda-prefix-format' for more information."
        (let* ((file-name (when buffer-file-name
                            (file-name-sans-extension
                             (file-name-nondirectory buffer-file-name))))
               (title (my:org-get-keyword "title"))
               (category (org-get-category))
               (result
                (or (if (and
                         title
                         (string-equal category file-name))
                        title
                      category)
                    "")))
          (if (numberp len)
              (s-truncate len (s-pad-right len " " result))
            result)))))

  (setup org-clock
    (:with-hook org-clock-out-hook
      (:hook org-update-all-dblocks))
    (:when-loaded
      
      (setopt org-clock-out-remove-zero-time-clocks t)
      (setopt org-clock-clocked-in-display 'frame-title)
      (setopt org-clock-frame-title-format '((:eval (format "%s %s"
                                                            (if (require 'org-clock-today nil t)
                                                                (if org-clock-today-count-subtree
                                                                    (format "%s / %s"
                                                                            org-clock-today-subtree-time
                                                                            org-clock-today-buffer-time)
                                                                  (format "%s" org-clock-today-buffer-time))
                                                              "")
                                                            org-mode-line-string)))))
    (:with-function my:org-clock-out-and-save-when-exit
      (:hook-into kill-emacs-hook))
    
    (defun my:org-clock-out-and-save-when-exit ()
      "Save buffers and stop clocking when kill emacs."
      (when (org-clocking-p)
        (org-clock-out)
        (save-some-buffers t)))
    
    (defun my:task-clocked-time ()
      (interactive)
      (let* ((clocked-time (org-clock-get-clocked-time))
             (h (truncate clocked-time 60))
             (m (mod clocked-time 60))
             (work-done-str (format "%d:%02d" h m)))
        (if org-clock-effort
            (let* ((effort-in-minutes
                    (org-duration-to-minutes org-clock-effort))
                   (effort-h (truncate effort-in-minutes 60))
                   (effort-m (truncate (mod effort-in-minutes 60)))
                   (effort-str (format "%d:%02d" effort-h effort-m)))
              (format "%s/%s" work-done-str effort-str))
          (format "%s" work-done-str))))

    (defun my:update-task-clocked-time ()
      (setq my:org-clocked-time-mode-line (my:task-clocked-time))))

  (setup ox-hugo
    (:straight ox-hugo)
    (:with-hook org-mode-hook
      (:hook my:org-hugo-enable-if-hugo-buffer))
    
    (defun my:org-hugo-enable-if-hugo-buffer ()
      (let ((prop (my:org-global-props "HUGO_.\+" (current-buffer))))
        (when prop
          (org-hugo-auto-export-mode +1)))))

  (setup org-onit
    (:straight (org-onit :type git :host github :repo "takaxp/org-onit"))
    (:global 
     (kbd "C-<f11>") org-clock-goto)
    (:with-map org-mode-map
      (:bind
       (kbd "<f11>")  org-onit-toggle-doing
       (kbd "S-<f11>") org-onit-goto-anchor)))

  (setup org-clock-today
    (:straight org-clock-today)
    (:hook-into emacs-startup-hook))

  (setup org-tempo
    (:require org-tempo))
#+end_src

**** org-roam
#+begin_src emacs-lisp
  (setup org-roam
    (:and (and (file-exists-p my:org-roam-directory))
          (:straight (org-roam :type git :host github :repo "org-roam/org-roam"))
          )

    (:when-loaded
      (setq org-roam-directory my:org-roam-directory)
      (setopt org-roam-db-update-on-save t)
      (setopt org-roam-db-location my:org-roam-db-location)
      (setopt org-roam-database-connector 'sqlite-builtin)
      (setopt org-roam-capture-ref-templates '(("r" "ref" plain "%?"
                                                :if-new (file+head "%<%Y-%m-%d--%H-%M-%SZ>--${slug}.org" "#+title: ${title}\n#+filetags: \n#+roam_key: ${ref}")
                                                :unnarrowed t)))
      (setopt org-roam-capture-templates '(("d" "default" plain
                                            "%?"
                                            :if-new (file+head "%<%Y-%m-%d--%H-%M-%SZ>--${slug}.org" "#+title: ${title}\n#+filetags: \n")
                                            :unnarrowed t))))
    (:with-feature org
      (:with-map org-mode-map
        (:bind 
         (kbd "C-c r") org-roam-node-insert
         (kbd "C-c t") org-roam-tag-add)))
    (:with-function org-roam-db-autosync-mode
      (:hook-into emacs-startup-hook)
      ))
#+end_src

***** emacsql-sqlite-builtin
emacsqlのバックエンドとしてsqliteを使うが、使うsqliteとしてemacsにbuiltinされているものを使う、というやつ。

#+begin_src emacs-lisp
  (setup emacsql-sqlite-builtin
    (:straight emacsql-sqlite-builtin))
#+end_src
**** org-modern
org-modeの表現をモダンなものにしてくれるパッケージ。variable pitch的な挙動になるので、結構気をつける必要がある。
#+begin_src emacs-lisp
  (setup org-modern
    (:straight org-modern)
    (:when-loaded
      (setopt org-modern-block-fringe t)
      ;; UDEV Gothicだとガタつくので、ガタつかないのと視覚的にわかりやすいものを使う
      (setopt org-modern-star 'replace)
      (setopt org-modern-replace-stars "①②③④⑤")
      (setopt org-modern-hide-stars nil))

    (:with-feature org
      (:hook org-modern-mode)))
#+end_src
*** go-mode
#+begin_src emacs-lisp
  (setup go-mode
    (:straight go-mode)
    (:bind
     "M-." godef-jump)
    (:hook my:go-mode-hook-1)

    ;; go.modがある場所をrootとする
    (defun my:project-find-go-module (dir)
      (when-let ((root (locate-dominating-file dir "go.mod")))
        (cons 'go-module root)))

    (cl-defmethod project-root ((project (head go-module)))
      (cdr project))

    (defun my:go-mode-hook-1 ()
      ;; そのバッファでのみ有効にする
      (add-hook 'project-find-functions #'my:project-find-go-module 0 t)

      (eglot-ensure)))
#+end_src

*** common lisp

**** lisp-mode
#+begin_src emacs-lisp
  (setup lisp-mode
    (defun my:lisp-mode-hook-0 ())
    (:hook my:lisp-mode-hook-0))
#+end_src

**** roswell
#+begin_src emacs-lisp
  (setup *roswell
    (:and (let ((helper (expand-file-name "helper.el" my:roswell-path)))
            (and (file-exists-p helper) my:roswell-path))
          (progn
            (defvar roswell-slime-contribs '(slime slime-fancy))
            (load helper)

            (defun slime-qlot-exec (directory)
              "start slime with qlot"
              (slime-start :program "qlot"
                           :program-args '("exec" "ros" "-S" "." "run")
                           :directory directory
                           :name 'qlot
                           :env (list (concat "PATH="
                                              (mapconcat 'identity exec-path ":"))
                                      (concat "QUICKLISP_HOME="
                                              (file-name-as-directory directory) "quicklisp/"))))

            (defun slime-qlot (directory)
              "start slime with qlot"
              (interactive (list (read-directory-name "Project directory: ")))
              (slime-qlot-exec directory))

            (defun slime-qlot-restart (directory)
              (interactive (list (read-directory-name "Project directory: ")))
              (ignore-errors
                (let* ((buffer (get-buffer "*inferior-lisp*"))
                       (process (get-buffer-process buffer)))
                  (when (and buffer process)
                    (set-process-query-on-exit-flag process nil)
                    (kill-buffer buffer))))
              (slime-qlot-exec directory))
            )
          ))
#+end_src

**** hyperspec
#+begin_src emacs-lisp
  (setup hyperspec
    (:if-feature slime)
    ;; HyperSpecをewwで見る設定
    (setq common-lisp-hyperspec-root "~/.emacs.d/share/HyperSpec/")

    (unless (file-exists-p (expand-file-name "~/.emacs.d/share/HyperSpec"))
      (when (eq window-system 'x)

        (make-directory (expand-file-name "~/.emacs.d/share") t)
        (let ((hyperspec-url "ftp://ftp.lispworks.com/pub/software_tools/reference/HyperSpec-7-0.tar.gz")
              (output "/tmp/HyperSpec.tar.gz"))

          (call-process "curl" nil nil t "-L" "-o" output hyperspec-url)
          (shell-command (format "tar zxvf %s -C %s" output "~/.emacs.d/share")))))

    ;; redefine function
    (defun common-lisp-hyperspec (symbol-name)
      (interactive (list (common-lisp-hyperspec-read-symbol-name)))
      (let ((buf (current-buffer)))
        (let ((name (common-lisp-hyperspec--strip-cl-package
                     (downcase symbol-name))))
          (cl-maplist (lambda (entry)
                        (eww-open-file (concat common-lisp-hyperspec-root "Body/"
                                               (car entry)))
                        (when (cdr entry)
                          (sleep-for 1.5)))
                      (or (common-lisp-hyperspec--find name)
                          (error "The symbol `%s' is not defined in Common Lisp"
                                 symbol-name))))
        (switch-to-buffer buf)
        (display-buffer "*eww*"))))
#+end_src

*** ruby
#+begin_src emacs-lisp
  (setup ruby-mode
    (:file-match "\\.rb\\'")
    (:hook ruby-end-mode)
    (:bind
     "C-c x" xmp))

  (setup ruby-end
    (:straight ruby-end))
#+end_src

*** rust-mode
Rust用のmajor mode

#+begin_src emacs-lisp
  (setup rust-mode
    (:and (version< emacs-version "29")
          (:straight rust-mode)
          )
    (:when-loaded
      (setopt rust-indent-offset 4)
      ;; formatterはcommit時にのみ実行するようにした方がよいので、機能をオフにする
      (setopt rust-format-on-save nil))

    (:hook eglot-ensure
           cargo-minor-mode))

  (setup rust-ts-mode
    (:and (version< "29" emacs-version)
          (:require rust-ts-mode))
    (:hook my:rust-mode-hook
           cargo-minor-mode)
    (:when-loaded
      (setopt rust-ts-indent-offset 4))
    
    (defun my:find-rust-project-root (dir)
      (when-let ((root (locate-dominating-file dir "Cargo.lock")))
        (list 'vc 'Git root)))

    (defun my:rust-mode-hook ()
      (setq-local project-find-functions (list #'my:find-rust-project-root))
      (eglot-ensure)))

  (setup cargo
    (:straight cargo))
#+end_src

*** python

**** python mode
#+begin_src emacs-lisp
  (setup python
    (:file-match "\\.py\\'")
    (:hook my:python-mode-hook-0)
    (defun my:python-mode-hook-0 ()
      (setq-local indent-tabs-mode nil)
      (pyvenv-mode +1)))
#+end_src

**** pyvenv
venvを利用できるようにする。実際には、その時点で利用するvenvを変更する・・・みたいなこともできるみたいだが、まぁそこまではできなくてもいいかなっていう。

#+begin_src emacs-lisp
  (setup pyvenv
    (:and  my:virtualenv-path
           (file-exists-p my:virtualenv-path)
           (:straight pyvenv))
    
    (defun my:pyvenv-activate-hook ()
      "pyvenvを有効にする"
      (pyvenv-activate my:virtualenv-path))
    (:with-function my:pyvenv-activate-hook
      (:hook-into python-mode-hook))
    )
#+end_src

*** emacs-lisp
#+begin_src emacs-lisp
  (setup elisp-mode
    (defun my:emacs-lisp-hooks ()
      (when (featurep 'cape)
        (setq-local completion-at-point-functions
                    (list (cape-capf-case-fold
                           (cape-capf-super
                            #'tempel-complete
                            #'elisp-completion-at-point))))
        ))
    (:with-hook emacs-lisp-mode-hook
      (:hook my:emacs-lisp-hooks)
      ))

  (setup eldoc
    ;; idle時にdelayをかけない
    (:when-loaded
      (setopt eldoc-idle-delay 0)
      ;; echo areaに複数行表示を有効にする
      (setopt eldoc-echo-area-use-multiline-p t))
    
    (:hook-into emacs-lisp-mode-hook
                lisp-interaction-mode-hook
                ielm-mode-hook))
#+end_src

*** ocaml
OPAMの動作が前提なので、最初にOPAMにあるやつを読み込めるようにしておく。

#+begin_src emacs-lisp
  (eval-and-compile
    (defun my:opam-share-directory-p ()
      (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
        (and opam-share (file-directory-p opam-share))))

    (defun my:opam-load-path ()
      (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
        (when (and opam-share (file-directory-p opam-share))
          (expand-file-name "emacs/site-lisp" opam-share)))))

  (when (my:opam-share-directory-p)
    (add-to-list 'load-path (my:opam-load-path)))
#+end_src

**** ocamlformat
ocamlformatはOPAMで入って初めて使えるのだが、とりあえずはrequireしておく。

#+begin_src emacs-lisp
  (setup ocamlformat
    (:and (my:opam-share-directory-p)
          (:require ocamlformat))
    (setopt ocamlformat-show-errors nil))
#+end_src

**** tuareg
caml-modeよりもこちらを利用する。

#+begin_src emacs-lisp
  (setup tuareg
    (:straight tuareg)

    (:hook my:tuareg-mode-hook-1)
    (:bind
     "C-c C-c" my:dune-compile
     ;; caml-helpを潰しておく
     "C-h" delete-backward-char)
    
    (defun my:tuareg-mode-hook-1 ()
      (let ((bufname (buffer-name)))

        (electric-indent-mode 1)

        (eglot-ensure)))

    (defun my:dune-compile ()
      (interactive)
      (save-buffer)
      (let* ((default-directory
              (or (locate-dominating-file buffer-file-name "Makefile") default-directory))
             (compile-command (concat "(cd " default-directory " && dune build @check)"))
             (compilation-directory
              (or (locate-dominating-file buffer-file-name "Makefile") nil)))
        (recompile)))

    (:when-loaded
      ;; Global tuareg setting
      ;; ただしインデント系統はocamlformatでフォーマットされるので、ほぼここにある設定は意味がなくなっている
      (setopt tuareg-let-always-indent t)
      (setopt tuareg-function-indent 0)
      (setopt tuareg-match-indent 0)
      (setopt tuareg-sig-struct-indent 0)
      (setopt tuareg-match-patterns-aligned t)

      ;; use ocamllsp valid in eglot
      ;; https://github.com/joaotavora/eglot/issues/525
      (put 'tuareg-mode 'eglot-language-id "ocaml")
      )
    )
#+end_src

**** ocaml-ts-mode
Emacs29から組み込まれたtreesitterのmoduleを前提としたもの。

#+begin_src emacs-lisp
  (setup ocaml-ts-mode
    (and (and (version<= "29" emacs-version) (featurep 'treesit))
         (:straight (ocaml-ts-mode :type git :host github :repo "dmitrig/ocaml-ts-mode")))
    (:file-match "\\.ml[ily]?\\'" "\\.topml\\'")
    (:hook my:ocaml-ts-mode-hook-1)
    (:bind
     (kbd "C-h") delete-backward-char)
    
    (defun my:ocaml-ts-mode-hook-1 ()
      (let ((bufname (buffer-name)))

        (electric-indent-mode 1)

        (eglot-ensure)))

    (:when-loaded
      ;; use ocamllsp valid in eglot
      ;; https://github.com/joaotavora/eglot/issues/525
      (put 'ocaml-ts-mode 'eglot-language-id "ocaml")
      )
    )
#+end_src
*** adoc-mode
asciidoc用のモード。ちょっと表示がうるさいのが玉に瑕。
#+begin_src emacs-lisp
  (setup adoc-mode
    (:straight adoc-mode))
#+end_src

*** lua-mode
#+begin_src emacs-lisp
  (setup lua-mode
    (:straight lua-mode))
#+end_src

*** markdown-mode
#+begin_src emacs-lisp
  (setup markdown-mode
    (:straight markdown-mode))
#+end_src

*** rst
わかりづらいが、reStructuredText。

#+begin_src emacs-lisp
  (setup rst
    (:file-match "\\.rst\\'"))
#+end_src

*** css-mode
#+begin_src emacs-lisp
  (setup css-mode
    (:when-loaded
      (setopt css-indent-offset 2)
      )
    
    (defun my:css-mode-hook-0 ()
      (add-node-modules-path)

      (setq-local flycheck-check-syntax-automatically '(save mode-enabled))
      (setq-local flycheck-css-stylelint-executable "stylelint")
      (rainbow-mode +1))
    (:with-mode css-ts-mode
      (:file-match "\\.s?css\\'")
      (:hook my:css-mode-hook-0)
      ))
#+end_src

**** rainbow-mode
文字の名前やコードに対して色をつける。CSS書く場合はないと、一部の特殊な人間以外はわけわからなくなる。ただし問題としては、 hex形式  ~#xxx~ じゃないと表示できない。これはこれで結構辛いけど、まぁvariableのときくらいしか使わないというのはある。

#+begin_src emacs-lisp
  (setup rainbow-mode
    (:straight rainbow-mode))
#+end_src

*** yaml-mode
#+begin_src emacs-lisp
  (setup yaml-ts-mode
    (:file-match "\\.ya?ml\\'"))
#+end_src

*** web-mode
jsxを使うときにたまに使う。

#+begin_src emacs-lisp
  (setup web-mode
    (:straight web-mode)
    (:file-match "\\.html\\'" "\\.rt\\'")

    (:when-loaded
     (setopt web-mode-markup-indent-offset 2)
     (setopt web-mode-code-indent-offset 2))

    (:hook my:web-mode-hook-angular-service)
    
    (defun my:web-mode-hook-angular-service ()
      (when (and
             (string-match-p "\.component\.html\\'" (or buffer-file-name "")))
        (eglot-ensure)))
    )
#+end_src

*** JavaScript/TypeScript
ここも色々多いので、個別に記載していく。

**** add-node-modules-path
node_modules/.binをexec-pathに追加してくれる。

#+begin_src emacs-lisp
  (setup add-node-modules-path
    (:straight add-node-modules-path))
#+end_src

**** js-mode
#+begin_src emacs-lisp
  (setup js-mode
    (:when-loaded
      (setopt js-indent-level 2))
    
    (defun my:js-mode-hook ()
      )

    (:hook my:js-mode-hook)
    (:file-match "\\.[cm]?js\\'"))
#+end_src

**** typescript-mode
#+begin_src emacs-lisp
  (setup typescript-ts-mode
    (:file-match "\\.m?ts\\'" "\\.m?tsx\\'")
    (:with-hook typescript-ts-mode-local-vars-hook
      (:hook my:typescript-ts-mode-hook))
    (:bind
     (kbd "M-j") c-indent-new-comment-line)

    (:when-loaded
      (setopt typescript-ts-mode-indent-offset 2))
    
    (defun my:typescript-ts-mode-hook ()
      (add-node-modules-path)
      (eglot-ensure)))
#+end_src

*** terraform-mode
#+begin_src emacs-lisp
  (setup terraform-mode
    (:straight terraform-mode))
#+end_src

*** plantuml-mode
#+begin_src emacs-lisp
  (setup plantuml-mode
    (:straight plantuml-mode)

    (:when-loaded
      (setq plantuml-output-type "png")
      (setopt plantuml-jar-args '("-charset UTF-8"))
      (setopt plantuml-default-exec-mode 'jar)

      (let ((plantuml-jar-file (expand-file-name (locate-user-emacs-file "plantuml.jar"))))
        (setopt plantuml-jar-path plantuml-jar-file)
        (unless (file-exists-p plantuml-jar-file)
          (call-process "curl" nil nil t "-L" "-o" plantuml-jar-file
                        "https://sourceforge.net/projects/plantuml/files/plantuml.jar/download")))
      )
    )
#+end_src

*** groovy-mode
#+begin_src emacs-lisp
  (setup groovy-mode
    (:straight groovy-mode))
#+end_src

*** protobuf-mode
#+begin_src emacs-lisp
  ;; protobuf-modeが要求しているのでここで追加している
  (setup gtags-mode
    (:straight gtags-mode))

  (setup protobuf-mode
    (:straight (protobuf-mode :type git :host github :repo "protocolbuffers/protobuf"))
    (:when-loaded
      (:hook my:protobuf-mode-hook)
      )
    
    (defconst my:protobuf-style
      '((c-basic-offset . 2)
        (indent-tabs-mode . nil)))
    
    (defun my:protobuf-mode-hook ()
      (c-add-style "my-protobuf-style" my:protobuf-style)))
#+end_src

*** fish-mode
#+begin_src emacs-lisp
  (setup fish-mode
    (:straight fish-mode))
#+end_src

*** nushell-mode
nushell用のsytax hightling
#+begin_src emacs-lisp
  (setup nushell-mode
    (:straight (nushell-mode :type git :host github :repo "mrkkrp/nushell-mode")))
#+end_src
*** csv-mode
#+begin_src emacs-lisp
  (setup csv-mode
    (:straight csv-mode))
#+end_src

*** kotlin-mode
#+begin_src emacs-lisp
  (setup kotlin-mode
    (:straight kotlin-mode)
    (:hook eglot-ensure))
#+end_src

*** text-mode

#+begin_src emacs-lisp
  (setup text-mode
    (:when-loaded
      ;; emacs 30.1以降で追加されるオプションで、これがあるとcompleption-at-point-functionsが上書きされてしまうので、
      ;; 一旦切る。これはorg modeとかでも影響する。
      (setopt text-mode-ispell-word-completion nil)))
#+end_src
** magit
#+begin_src emacs-lisp
  (setup with-editor
    (:straight with-editor))

  (setup compat
    (:straight compat))

  (setup magit
    (:straight (magit :type git :host github :repo "magit/magit"))
    (with-eval-after-load 'compat
      (defun my:insert-commit-template-on-magit ()
        "Insert commit comment template after opened commit buffer on magit."
        (tempel-insert 'cc))

      (defun my:git-post-commit--delete-EDITMSG ()
        "EDITMSGを削除する"
        (when-let* ((target-name "COMMIT_EDITMSG")
                    (buffer (seq-find (lambda (buf)
                                        (let ((name (buffer-name buf)))
                                          (string-match-p name target-name)))
                                      (buffer-list))))
          (condition-case err
              (kill-buffer buffer)
            nil
            )))

      (defun my:disable-modalka-on-commit ()
        "commitではmodalを無効化する"
    (when (featurep 'modalka)
        (modalka-mode -1)))

      (:with-hook git-commit-post-finish-hook
        (:hook my:git-post-commit--delete-EDITMSG))
      (:with-hook git-commit-mode-hook
        (:hook my:flyspell-enable
               my:insert-commit-template-on-magit
               my:disable-modalka-on-commit))
      )
    )
#+end_src

*** magit-delta
    deltaをmagitのdiffとしてつかえるようにする。

    #+begin_src emacs-lisp
      (setup magit-delta
        (:straight magit-delta)
        (:with-feature magit
          (:hook magit-delta-mode)))
    #+end_src
** modalka
Ryo-modalの元となったmodalkaに切り替える。

#+begin_src emacs-lisp
  (setup modalka
    (:straight modalka)
    (:hook-into prog-mode-hook
                text-mode-hook)

    (defun my:modalka-mode-hook ()
      "modalka-mode用のhook"
      (when (not modalka-mode)
        (setq-local cursor-type 'bar))
      (if modalka-mode
          (selected-minor-mode +1)
        (selected-minor-mode -1)))
    (:hook my:modalka-mode-hook)

    ;; simple macro to make simple lambda with text obj
    (defmacro my:modalka (text-obj &rest keyword-args)
      "Get new lambda with `THEN-FUN' call after `BODY'

  User can pass `KEYWORD-ARGS' below.

  ,* `:then' - list of commands to execute AFTER `TEXT-OBJ'
  ,* `:exit' - if non-nil, exit modelka-mode after executed
  "
      (let ((then (plist-get keyword-args :then))
            (exit (plist-get keyword-args :exit)))
        `(lambda () 
           (interactive)
           ,(when exit
              '(modalka-mode -1))
           (progn ,@text-obj)
           ,@(when (and then (not (seq-empty-p then)))
               (seq-map (lambda (l) `(,l)) then))
           )))

    (defun my:modalka-setup ()
      "setup modalka-mode after-init"

      (modalka-define-kbd "0" "M-0")
      (modalka-define-kbd "1" "M-1")
      (modalka-define-kbd "2" "M-2")
      (modalka-define-kbd "3" "M-3")
      (modalka-define-kbd "4" "M-4")
      (modalka-define-kbd "5" "M-5")
      (modalka-define-kbd "6" "M-6")
      (modalka-define-kbd "7" "M-7")
      (modalka-define-kbd "8" "M-8")
      (modalka-define-kbd "9" "M-9")

      ;; global leader key
      (define-key modalka-mode-map (kbd "SPC")

                  (let ((keymap (make-sparse-keymap)))
                    (define-key keymap "q" #'kill-current-buffer)
                    (define-key keymap "w" #'save-buffer)
                    (define-key keymap "e" #'find-file)
                    (define-key keymap "d" #'dired-jump)
                    (define-key keymap "m" #'magit-status)
                    (define-key keymap "b" #'ibuffer)
                    (define-key keymap "s" #'consult-ripgrep)
                    (define-key keymap "f" #'consult-fd)
                    (define-key keymap "#" #'server-edit)
                    (define-key keymap "t" #'my:deepl-translate)
                    (define-key keymap "R" #'my:mark/replace-transient)
                    (define-key keymap "/" #'my:navigation-transient)
                    (define-key keymap "." #'my:persp-transient)

                    keymap
                    )
                  )
      (define-key modalka-mode-map (kbd ",")
                  (let ((keymap (make-sparse-keymap)))
                    (define-key keymap (kbd "o") #'my:org-transient)
                    (define-key keymap (kbd "p") #'my:project-transient)
                    keymap))

      (defun my:backward-symbol ()
        "my version backward-symbol"
        (interactive)
        (let ((point (bounds-of-thing-at-point 'symbol))
              (current (point)))
          (if (and point
                   (not (= (car point) current)))
              (goto-char (car point))
            (backward-word)))
        )

      (defun my:quit-window ()
        "quit-windowまたはwindowの切り替えを行うためのcomman"
        (interactive)
        (if (> (seq-length (window-list)) 1)
            (quit-window)
          (previous-buffer))
        )

      (defun my:forward-char-or-end-of-line ()
        "forward-char or end-of-line"
        (interactive)
        (unless (eolp)
          (forward-char)))

      (defun my:replace-char-at-point ()
        "vimのrコマンドのように、カーソル位置の文字を置換する"
        (interactive)
        (let ((now cursor-type))
          (setq-local cursor-type '(hbar . 3))
          (call-interactively #'quoted-insert)
          (setq-local cursor-type now))
        (forward-char 1)
        (delete-backward-char 1)
        (backward-char 1)
        )
      
      
      ;; command-specific leader key
      (define-key modalka-mode-map (kbd "<escape>") (my:modalka ((ignore)) :exit t))
      (define-key modalka-mode-map "q" #'my:quit-window)
      (define-key modalka-mode-map "z" #'recenter-top-bottom)
      ;; basic move
      (modalka-define-kbd "h" "C-b")
      ;; 単純なTranslation だとFlymake と衝突する
      (define-key modalka-mode-map "j" #'next-line)
      (define-key modalka-mode-map "k" #'previous-line)
      (modalka-define-kbd "l" "C-f")
      (modalka-define-kbd "E" "M-f")
      (modalka-define-kbd "B" "M-b")
      (define-key modalka-mode-map "e" #'forward-symbol)
      (define-key modalka-mode-map "b" #'my:backward-symbol)

      ;; advanced move
      (define-key modalka-mode-map "f" #'avy-goto-char)
      (define-key modalka-mode-map "X" #'goto-line)
      (define-key modalka-mode-map "g" #'keyboard-quit)
      (define-key modalka-mode-map "H" #'beginning-of-buffer)
      (define-key modalka-mode-map "G" #'end-of-buffer)
      
      ;; basic editing
      (define-key modalka-mode-map "a" (my:modalka ((my:forward-char-or-end-of-line)) :exit t))
      (define-key modalka-mode-map "A" (my:modalka ((end-of-line)) :exit t))
      (define-key modalka-mode-map "i" (my:modalka () :exit t))
      (define-key modalka-mode-map "I" (my:modalka ((beginning-of-line)) :exit t))
      (define-key modalka-mode-map "o" (my:modalka ((end-of-line) (newline-and-indent)) :exit t))
      (define-key modalka-mode-map "O" (my:modalka ((beginning-of-line) (newline-and-indent) (previous-line)) :exit t))
      (define-key modalka-mode-map "D" (my:modalka ((beginning-of-line) (kill-line))))
      (define-key modalka-mode-map "C" (my:modalka ((beginning-of-line) (kill-line)) :exit t))
      (define-key modalka-mode-map "J" #'delete-indentation)
      (define-key modalka-mode-map "x" (my:modalka ((forward-char) (puni-force-delete))))
      (define-key modalka-mode-map "r" #'my:replace-char-at-point)

      ;; advanced editing mode
      (define-key modalka-mode-map (kbd "R") #'my:structuring-transient)

      ;; yank/paste/mark
      (define-key modalka-mode-map "p" #'yank)
      (define-key modalka-mode-map "w" #'my:treesit-expand-region)
      (define-key modalka-mode-map "V" (my:modalka ((beginning-of-line) (set-mark (point)) (end-of-line))))
      
      ;; basic search
      (define-key modalka-mode-map "/" #'isearch-forward)
      (define-key modalka-mode-map "n" #'isearch-repeat-forward)
      (define-key modalka-mode-map "N" #'isearch-repeat-backward)

      ;; undo/redo
      (define-key modalka-mode-map "u" #'undo)
      (define-key modalka-mode-map "U" #'vundo)

      ;; reverse mark
      (define-key modalka-mode-map "t" #'exchange-point-and-mark)
      ;; repeat
      (define-key modalka-mode-map "." #'repeat)

      ;; buffer
      (define-key modalka-mode-map ";" #'persp-switch-to-buffer*)
      
      ;; command parrent
      (define-key modalka-mode-map ":" #'eval-expression)

      ;; flymake integration
      (define-key modalka-mode-map (kbd "C-n") #'flymake-goto-next-error)
      (define-key modalka-mode-map (kbd "C-p") #'flymake-goto-prev-error)

      ;; window key map
      (define-key modalka-mode-map (kbd "C-w") my:ace-window-keymap)

      ;; mark and delete
      (defun my:mark-beginning-of-line-from-current ()
        "現在範囲から行頭までをmarkする。"
        (interactive)
        (set-mark (point))
        (beginning-of-line))

      (defun my:mark-end-of-line-from-current ()
        "現在範囲から行末までをmarkする。"
        (interactive)
        (set-mark (point))
        (end-of-line))

      (defun my:copy-line ()
        "行をcopyする。"
        (interactive)
        (save-excursion
          (beginning-of-line)
          (let* ((beg (point)))
            (end-of-line)
            (unless (eobp)
              (forward-char))
            (copy-region-as-kill beg (point)))))

      (defun my:copy-end-of-line ()
        "行末までをcopyする"
        (interactive)
        (save-excursion
          (let ((beg (point)))
            (end-of-line)
            (copy-region-as-kill beg (point)))))

      ;; delete/mark/change with prefix
      (define-key modalka-mode-map (kbd "y y") #'my:copy-line)
      (define-key modalka-mode-map (kbd "y $") #'my:copy-end-of-line)
      (define-key modalka-mode-map (kbd "d d") (lambda () (interactive)
                                                 (beginning-of-line)
                                                 (set-mark (point))
                                                 (end-of-line)
                                                 (forward-char)
                                                 (puni-kill-active-region)
                                                 ))
      (define-key modalka-mode-map (kbd "d e") (lambda () (interactive)
                                                 (puni-mark-sexp-at-point)
                                                 (puni-kill-active-region)))
      (define-key modalka-mode-map (kbd "d E") (lambda () (interactive)
                                                 (mark-word)
                                                 (puni-kill-active-region)))
      (define-key modalka-mode-map (kbd "d a") (lambda () (interactive)
                                                 (puni-mark-sexp-around-point)
                                                 (puni-kill-active-region)))
      (define-key modalka-mode-map (kbd "d ^") (lambda () (interactive)
                                                 (my:mark-beginning-of-line-from-current)
                                                 (puni-kill-active-region)))
      (define-key modalka-mode-map (kbd "d $") (lambda () (interactive)
                                                 (my:mark-end-of-line-from-current)
                                                 (puni-kill-active-region)))
      (define-key modalka-mode-map (kbd "v e") #'puni-mark-sexp-at-point)
      (define-key modalka-mode-map (kbd "v E") #'mark-word)
      (define-key modalka-mode-map (kbd "v a") #'puni-mark-sexp-around-point)
      (define-key modalka-mode-map (kbd "v ^") #'my:mark-beginning-of-line-from-current)
      (define-key modalka-mode-map (kbd "v $") #'my:mark-end-of-line-from-current)

      ;; change
      (define-key modalka-mode-map (kbd "c e") (my:modalka ((puni-mark-sexp-at-point) (puni-kill-active-region)) :exit t))
      (define-key modalka-mode-map (kbd "c E") (my:modalka ((mark-word) (puni-kill-active-region)) :exit t))
      (define-key modalka-mode-map (kbd "c a") (my:modalka ((puni-mark-sexp-around-point) (puni-kill-active-region)) :exit t))
      (define-key modalka-mode-map (kbd "c ^") (my:modalka ((my:mark-beginning-of-line-from-current)) :then (puni-kill-active-region) :exit t))
      (define-key modalka-mode-map (kbd "c $") (my:modalka ((my:mark-end-of-line-from-current)) :then (puni-kill-active-region) :exit t))
      )
    (:with-hook emacs-startup-hook
      (:hook my:modalka-setup))
    )
#+end_src
** minor-modes
*** cc-mode
#+begin_src emacs-lisp
  (setup cc-mode
    (:with-mode c++-mode
      ;; .hはc++-modeで開く
      (:file-match "\\.h\\'")
      )
    
    (defun my:c-mode-hook ()
      (setq completion-mode t)
      ;; compile-windowの設定
      (setq compilation-buffer-name "*compilation*")
      (setq compilation-scroll-output t)
      (setq compilation-read-command t)
      (setq compilation-ask-about-save nil)
      (setq compilation-window-height 10)
      (setq compile-command "make")
      ;; cc-mode内で定義されるキーバインド
      (define-key c-mode-base-map (kbd "C-c C-c")   'comment-region)
      (define-key c-mode-base-map (kbd "C-c C") 'my-c++-cast)
      (define-key c-mode-base-map (kbd "C-c C-M-c") 'uncomment-region)
      (define-key c-mode-base-map (kbd "C-c e")      'c-macro-expand)
      (define-key c-mode-base-map (kbd "C-c c")      'my-compile)
      (define-key c-mode-base-map (kbd "C-c M-c")   'compilation-close)
      (define-key c-mode-base-map (kbd "C-c g")      'gdb)
      (define-key c-mode-base-map (kbd "C-c t")      'toggle-source)
      (define-key c-mode-base-map (kbd "C-c C-d") 'c-down-conditional)
      ;; cc-modeに入る時に自動的にgtags-modeにする
      (gtags-mode t))

    (:with-hook c-mode-common-hook
      (:hook my:c-mode-hook)))
#+end_src

*** ace-window
ウィンドウ間を1キーで移動できるようにするための拡張。

#+begin_src emacs-lisp
  (setup ace-window
    (:straight ace-window)

    ;; 複数箇所で利用するキーバインドを定義しておく
    (defvar my:ace-window-keymap (make-sparse-keymap))

    (dolist (keybind '(("C-w" . ace-window)
                       ("C-s" . split-window-vertically)
                       ("s" . split-window-vertically)
                       ("C-v" . split-window-horizontally)
                       ("v" . split-window-horizontally)
                       ("h" . windmove-left)
                       ("l" . windmove-right)
                       ("j" . windmove-down)
                       ("k" . windmove-up)
                       ("b" . balance-windows)
                       ("d" . delete-window)
                       ("o" . delete-other-windows)))
      (define-key my:ace-window-keymap (kbd (car keybind)) (cdr keybind)))

    (:with-feature posframe
      (:when-loaded
        (ace-window-posframe-mode t)))

    ;; diredへの設定をここで設定している
    (:with-feature dired
      (:bind 
       (kbd "C-w") my:ace-window-keymap)))
#+end_src
*** tempel
tempoに似たような構文を持つ、シンプルなテンプレートエンジン。corfuなどと効果的に組み合わせることができるようなキーバインドを提供している。

#+begin_src emacs-lisp
  (setup tempel
    (:straight (tempel :type git :host github :repo "minad/tempel" :branch "main"))
    ;; tempel-completeがautoload ではないので、明示的にautoload にする
    (:with-function tempel-complete
      (:autoload-this))
    
    (:with-map tempel-map
      (:bind
       "C-." tempel-next
       "C-," tempel-previous
       )))
#+end_src

*** symbol-overlay
symbolをハイライトするfaceを提供する。lspとかと見事に競合するので、lspを利用する場合はオフにするのを推奨。

#+begin_src emacs-lisp
  (setup symbol-overlay
    (:straight symbol-overlay)
    (:hook-into prog-mode-hook)
    (:when-loaded
      (set-face-attribute 'symbol-overlay-default-face nil :inherit 'highlight :underline t)))
#+end_src

*** pulsar
よりシンプルなbeacon
https://protesilaos.com/emacs/pulsar

#+begin_src emacs-lisp
  (setup pulsar
    (:straight pulsar)
    (:with-function pulsar-global-mode
      (:hook-into emacs-startup-hook))

    (:when-loaded
      (setopt pulsar-face 'pulsar-magenta)
      ))
#+end_src
*** imenu-list
#+begin_src emacs-lisp
  (setup imenu-list
    (:straight imenu-list)
    (:when-loaded
      (setopt imenu-list-size 0.25)
      (setopt imenu-list-auto-resize nil)
      (setopt imenu-list-focus-after-activation t)))
#+end_src

*** whick-key
#+begin_src emacs-lisp
  (setup which-key
    (:straight which-key)
    (:hook-into emacs-startup-hook)
    (:when-loaded
      (setopt which-key-max-description-length 40)
      (setopt which-key-use-C-h-commands t)))
#+end_src

*** puni
    smartparensと同じような、括弧をうまく扱うためのpackage.

    #+begin_src emacs-lisp
      (setup puni
        (:straight puni)
        (:with-function puni-global-mode
          (:hook-into emacs-startup-hook))
        ;; org-mode/dired-modeではあまり意味がないので無効化する
        (:with-function puni-disable-puni-mode
          (:hook-into org-mode-hook
                      dired-mode-hook)))
    #+end_src
*** diff-hl
git-gutter系統をよりシンプルにしたもの。

#+begin_src emacs-lisp
  (setup diff-hl
    (:straight diff-hl)
    (:hook-into prog-mode-hook
                text-mode-hook)
    (:with-function diff-hl-flydiff-mode
      (:hook-into prog-mode-hook
                  text-mode-hook))

    (:when-loaded
     ;; fringeに対してborderを表示しない
     (setopt diff-hl-draw-borders nil)
     ;; 非同期で更新する
     (setopt diff-hl-update-async t)))
#+end_src
*** flymake
#+begin_src emacs-lisp
  (setup flymake
    (:global
     "<f2>"  flymake-goto-next-error
     "S-<f2>"  flymake-goto-prev-error
     ))
#+end_src
*** flycheck
#+begin_src emacs-lisp
  (setup flycheck
    (:straight flycheck)
    (:when-loaded
      ;; eslintの設定を探すのがしんどすぎるので無効化しておく
      (advice-add 'flycheck-eslint-config-exists-p :override (lambda () t))
      )
    )
#+end_src

*** posframe
#+begin_src emacs-lisp
  (setup posframe
    (:and window-system my:use-posframe
          (:straight posframe))
    
    (when (eq (window-system) 'x)
      (setq x-gtk-resize-child-frames 'resize-mode))

    (setup mozc-posframe
      (:and  my:use-mozc-el my:mozc-helper-locate
             (:straight (mozc-posframe :type git :host github :repo "derui/mozc-posframe"))
             )
      (:require mozc-posframe))
    )
#+end_src

*** eldoc-box
eldocをchildframeで表示するようにしてくれる。

#+begin_src emacs-lisp
  (setup eldoc-box
    (:straight eldoc-box)
    (:when-loaded
      ;; 複数行の場合だけ表示するようにする
      (setopt eldoc-box-only-multi-line t)))
#+end_src
*** vundo
昔使ってたundo-treeの別バージョン、みたいなもの。

https://github.com/casouri/vundo

#+begin_src emacs-lisp
  (setup vundo
    (:straight vundo)
    (defun my:vundo-mode-hook ())
    (:hook my:vundo-mode-hook))
#+end_src
*** eglot
Emacs29から標準添付になったので、これを利用してみる。

#+begin_src emacs-lisp
  (setup eglot
    (:bind
     "C-c r" eglot-rename
     "C-<return>" eglot-code-actions
     "M-m" eldoc-box-help-at-point
     )
    (:with-hook eldoc-managed-mode-hook
      (:hook eldoc-box-hover-mode
             eglot-booster-mode))

    (:when-loaded
      ;; 補完候補を表示するときとかにあまりにでかすぎてスローダウンしているので0にしておく
      (setopt  eglot-events-buffer-config '(:size 0 :format full))
      
      (add-to-list 'eglot-server-programs '(((ocaml-ts-mode :language-id)) . ("ocamllsp")))

      ;; eglotでもhotfuzzを利用するようにする
      (add-to-list 'completion-category-overrides
                   '(eglot (styles hotfuzz basic)))
      )
    )
#+end_src
*** eglot-booster
    eglotのcommunicateにおいて、Rust製のprogramを利用することで、JSONのParseに伴う諸々の性能問題を解消しようとするpackage。

    #+begin_src emacs-lisp
      (setup eglot-booster
        (:straight (eglot-booster :type git :host github :repo "jdtsmith/eglot-booster")))
    #+end_src
*** aggressive-indent
#+begin_src emacs-lisp
  (setup aggressive-indent
    (:straight aggressive-indent)
    (:hook-into lisp-mode-hook
                emacs-lisp-mode-hook)
    )
#+end_src

*** copilot.el
GitHub Copilotを利用するための設定。

#+begin_src emacs-lisp
  (setup copilot
    (:straight (copilot :type git :host github :repo "copilot-emacs/copilot.el" :files ("dist" "*.el")))
    (:bind
     ;; TABにはすでにcompletion-at-pointが入っている状態なので、一旦別に割り当てておく
     "<tab>" my:indent-for-tab-command-dwim
     "TAB" my:indent-for-tab-command-dwim)
    (:hook-into prog-mode-hook)
    
    (defun my:not-completion-in-region-mode-p ()
      "Predicate to check if `completion-in-region-mode' is enabled."
      (null completion-in-region-mode))

    (defun my:modalka-mode-p ()
      "ryo-modalが起動しているかどうかを返す"
      (bound-and-true-p modalka-mode))
    

    (:when-loaded
      ;; 常時やってもあまり意味がないので、タイピングが続いている間はやらないようにする
      (setopt copilot-idle-delay 0.5)
      ;; ファイルを開く度にワーニングになるのだが、実害が基本的にないので、ワーニング自体を無視しておく
      (setopt copilot-indent-offset-warning-disable t)

      ;; evilを使っていないので、evil関連のものは抜いておき、そのかわりにmeowのものを入れておく
      (setopt copilot-enable-predicates
              (progn
                (let ((data (seq-filter (lambda (x) (eq x 'evil-insert-state-p))
                                        copilot-enable-predicates)))
                  ;; corfuなりが起動している場合は、そもそも有効にしないようにする
                  (add-to-list 'data #'my:not-completion-in-region-mode-p)
                  (add-to-list 'data #'my:modalka-mode-p)
                  data
                  )))

      ;; tuaregはocamlにしてもらわないと困る
      (add-to-list 'copilot-major-mode-alist '("tuareg" . "ocaml")))
    
    (defun my:indent-for-tab-command-dwim ()
      "必要があればindent-for-tab-commandを呼び出す"
      (interactive)
      (or (copilot-accept-completion)
          (indent-for-tab-command)))
    )
#+end_src

*** goggles
volatile-highlightsの代替。標準で用意されている ~pulse~ というpackageが使われている。

https://github.com/minad/goggles

#+begin_src emacs-lisp
  (setup goggles
    (:straight goggles)
    (:hook-into prog-mode-hook
                text-mode-hook
                )
    (setq-default goggles-pulse t))
#+end_src
*** selected.el
リージョンを選択しているときだけ有効になるようなkeymapを提供する。

#+begin_src emacs-lisp
  (setup selected
    (:straight selected)
    (setq selected-minor-mode-override t)
    
    (:with-map selected-keymap
      (:bind
       "q"  selected-off
       "u"  upcase-region
       "y"  kill-ring-save
       "d"  (lambda () (interactive) (puni-kill-active-region) (modalka-mode +1))
       "c"  (lambda () (interactive) (delete-active-region) (modalka-mode -1))
       "m"  apply-macro-to-region-lines
       "v"  (lambda () (interactive) (deactivate-mark) (setq mark-ring nil))
       )
      )
    )
#+end_src
** utility packages
*** nerd-icons
https://github.com/rainstormstudio/nerd-icons.el#installing-fonts

all-the-iconsの代替とのこと。all-the-iconsはターミナルでは利用できないらしいが、これはnerd-fontsにだけ依存しているので利用できるらしい。

#+begin_src emacs-lisp
  (setup nerd-icons
    (:straight (nerd-icons :type git :host github :repo "rainstormstudio/nerd-icons.el"))
    (:require nerd-icons)
    )
#+end_src
**** nerd-icons-completions
minibufferでの補完時などに、nerd-iconsを使ってアイコンを表示できるようにする。

https://github.com/rainstormstudio/nerd-icons-completion

#+begin_src emacs-lisp
  (setup nerd-icons-completion
    (:straight nerd-icons-completion)
    (:hook-into emacs-startup-hook)

    (:with-feature marginalia
      (:when-loaded
        (:hook nerd-icons-completion-mode)
        )
      )
    )
#+end_src
**** nerd-icons-dired
diredでnerd-iconsを利用できるようにする。

https://github.com/rainstormstudio/nerd-icons-dired

#+begin_src emacs-lisp
  (setup nerd-icons-dired
    (:straight nerd-icons-dired)
    (:hook-into dired-mode-hook))
#+end_src

**** nerd-icons-corfu
    ~nerd-icons~ をcorfu用に利用できるようにするためのpackage。

    https://github.com/LuigiPiucco/nerd-icons-corfu?tab=readme-ov-file

    #+begin_src emacs-lisp
      (setup nerd-icons-corfu
        (:straight nerd-icons-corfu)
        (:when-loaded
          (setopt corfu-margin-formatters '(nerd-icons-corfu-formatter))))
    #+end_src
*** notifications
#+begin_src emacs-lisp
  (setup notifications
    (:require notifications))
#+end_src

*** s
#+begin_src emacs-lisp
  (setup s
    (:straight s)
    (:with-function s-join
      (:autoload-this))
    )
#+end_src

*** exec-path-from-shell
#+begin_src emacs-lisp
  (setup exec-path-from-shell
    (:straight exec-path-from-shell)
    
    (exec-path-from-shell-initialize)
    
    (let ((envs '("GOROOT" "GOPATH" "PATH")))
      (exec-path-from-shell-copy-envs envs)))
#+end_src

*** rg.el
ripgrep.elではなく、 rg.elを利用する。特定のファイルパターンにだけ実行したりしたい。

#+begin_src emacs-lisp
  (setup rg
    (:straight rg)
    (:with-feature transient
      (:when-loaded 
        (rg-enable-menu))))
#+end_src

*** langtool
flyspellとはまた別で、英語自体の構文とかそういうのをチェックしてくれるLangtoolを入れる。

#+begin_src emacs-lisp
  (setup langtool
    (:straight langtool)
    (:when-loaded
      (setopt langtool-language-tool-jar my:langtool-cli-path)
      (setopt langtool-default-language "en-US")
      (setopt langtool-java-user-arguments '("-Dfile.encoding=UTF-8"))))
#+end_src
**** langtoolのインストール
#+begin_src emacs-lisp
  (setup *langtool
    (:and (eq window-system 'x)
          (unless (file-exists-p my:langtool-cli-path)
            (make-directory (expand-file-name "~/.emacs.d/share") t)
            (let ((langtool-url (format "https://languagetool.org/download/LanguageTool-%s.zip" my:langtool-version))
                  (output "/tmp/LanguageTool.zip"))

              (call-process "curl" nil nil t "-L" "-o" output langtool-url)
              (call-process "unzip" nil nil t "-d" (expand-file-name "~/.emacs.d/share") output)
              (rename-file (format "~/.emacs.d/share/LanguageTool-%s/languagetool-commandline.jar" my:langtool-version)
                           my:langtool-cli-path t)))
          )
    )
#+end_src

*** treemacs
#+begin_src emacs-lisp
  (setup treemacs
    (:straight treemacs)

    (:when-loaded
      (setopt treemacs-is-never-other-window nil)
      (setopt treemacs-read-string-input 'from-minibuffer)
      (setopt treemacs-file-event-delay 1000)))
#+end_src

*** mozc
#+begin_src emacs-lisp
  (setup mozc
    (:and (and my:use-mozc-el my:mozc-helper-locate)
          (progn
            (:straight mozc)
            (setq mozc-keymap-kana mozc-keymap-kana-101us)
            (setopt mozc-candidate-style 'posframe)
            (setq mozc-helper-program-name my:mozc-helper-locate))))
    
#+end_src

*** projectile
#+begin_src emacs-lisp
  (setup projectile
    (:straight projectile)
    (:with-map projectile-command-map
      (:bind
       "s" my:projectile-search-dwim))

    (:when-loaded
      (setopt projectile-enable-idle-timer nil)
      (setopt projectile-enable-caching t)
      (setopt projectile-completion-system 'auto))
    
    (defun my:projectile-search-dwim (search-term)
      "Merge version to search document via grep/ag/rg.
        Use fast alternative if it exists, fallback grep if no alternatives in system.
        "
      (interactive (list (projectile--read-search-string-with-default
                          "Dwim search for")))
      (cond
       ((executable-find "rg") (projectile-ripgrep search-term))
       ((executable-find "ag") (projectile-ag search-term))
       (t (projectile-grep search-term)))))
#+end_src

*** treesit
Emacs 29からはtreesitという形でtree-sitterが組み込みで利用できるようになっている。ただしこれ、現状だと  ~*-ts-mode~ という標準モードでしか利用されていないらしく、かつそっちを利用しようとするとかなり大変なことになったりが多い。
treesit自体は魅力的なのだが、font-lockの仕組みそのものが別物ということのようなので、別物として作成しないといけない雰囲気が大分する。

#+begin_src emacs-lisp
  (setup treesit
    (:and (version<= "29.0.0" emacs-version))
    
    ;; font lockで最大のレベルを利用しておく
    (setopt treesit-font-lock-level 4))

  (setup treesit-auto
    (:straight treesit-auto)
    (:with-function global-treesit-auto-mode
      (:autoload-this)
      (:hook-into  emacs-startup-hook))
    (:when-loaded
      ;; 対象のパーサがすでにあったら自動的にインストールしてくれる
      (setopt treesit-auto-install t)))
#+end_src

*** perspective
作業領域を保存したりなんだりできるもの。

#+begin_src emacs-lisp
  (defvar my:perspectives '("org" "code" "misc"))

  (setup perspective
    (:straight perspective)
    (defun my:persp-init-0 ()
      (persp-mode +1)
      (dolist (p my:perspectives)
        (persp-switch p)))

    (:when-loaded
      
      (setopt persp-state-default-file "~/.emacs.d/persp-state-file")
      (setopt persp-modestring-short t)
      ;; 初期化の際に警告が出るのを抑制する
      (setopt persp-suppress-no-prefix-key-warning t))
    
    (:with-function my:persp-init-0
      (:hook-into after-init-hook))
    (:with-function persp-state-save
      (:hook-into kill-emacs-hook)))
#+end_src

*** diredfl
diredにfont-lockを適用していい感じにしてくれる。

#+begin_src emacs-lisp
  (setup diredfl
    (:straight diredfl)
    (:hook-into dired-mode-hook))
#+end_src

*** simple-pomodoro
自作のpomodoro timer用パッケージ。

#+begin_src emacs-lisp
  (setup alert
    (:straight alert)

    (:when-loaded
      (setopt alert-default-style (cond
                                   ((string-match ".*darwin.*" (or system-configuration "")) 'osx-notifier)
                                   ((string-match ".*linux-gnu.*" (or system-configuration "")) 'notifications)
                                   (t 'message)))
      )
    )

  (setup simple-pomodoro
    (:straight (simple-pomodoro :type git :host github :repo "derui/simple-pomodoro" :files (:defaults "misc/*")))
    
    (setopt simple-pomodoro-auto-short-break t)
    
    (setup simple-pomodoro-notification
      (:require simple-pomodoro-notification)
      (setopt simple-pomodoro-notification-icon `((default . ,(expand-file-name "images/001-tomato.png" user-emacs-directory))))
      (setopt simple-pomodoro-notification-function #'simple-pomodoro-notification))

    (setup simple-pomodoro-mode-line
      (:require simple-pomodoro-mode-line)
      
      (setopt simple-pomodoro-tick-function (lambda (&rest args)
                                              (simple-pomodoro-mode-line-update-text)
                                              (force-mode-line-update)))))
#+end_src

*** rainbow-delimiters
定番のパッケージ。括弧を階層毎に色付けしてくれる。

#+begin_src emacs-lisp
  (setup rainbow-delimiters
    (:straight rainbow-delimiters)
    (:hook-into prog-mode-hook))
#+end_src
*** perfect-margin
自動的にcenterになるようにmarginを調整する。左右に分割している場合は動作しない。

https://github.com/mpwang/perfect-margin

#+begin_src emacs-lisp
  (setup perfect-margin
    (:straight perfect-margin)
    (:hook-into emacs-startup-hook)
    (:when-loaded
      (setopt perfect-margin-ignore-filters '(window-minibuffer-p))))
#+end_src
*** spacious-padding
modusの作者が開発している、window/frameの間隔を調整するためのpackage。

https://github.com/protesilaos/spacious-padding?tab=readme-ov-file

#+begin_src emacs-lisp
  (setup spacious-padding
    (:straight spacious-padding)
    (:hook-into emacs-startup-hook)
    (:when-loaded
      (setopt spacious-padding-widths '(
                                        :internal-border-width 15
                                        :header-line-width 4
                                        ;; 設定しているmode lineとの相性が悪いので、0にしている
                                        :mode-line-width 0
                                        :tab-width 4
                                        :right-divider-width 30
                                        :left-fringe-width 8
                                        :right-fringe-width 8
                                        :scroll-bar-width 8))
      )
    )
#+end_src
*** breadcrumb
パンくずリスト。

https://github.com/joaotavora/breadcrumb

#+begin_src emacs-lisp
  (setup breadcrumb
    (:straight breadcrumb)
    (:with-mode breadcrumb-local-mode
      (:hook-into prog-mode-hook)
      )
    )
#+end_src
*** chokan
自作のKanzen clone。
    
    #+begin_src emacs-lisp
      (setup chokan
        (:straight (chokan :type git :host github :repo "derui/chokan"))
        
        (setup chokan-websocket
          (:with-feature chokan
            (:when-loaded
              (chokan-websocket-setup)))))
    #+end_src
*** visual-replace
regexpを利用するときにvisualizeに確認できるようにする。

#+begin_src emacs-lisp
  (setup visual-replace
    (:straight (visual-replace :type git :host github :repo "szermatt/visual-replace" :branch "master"))
    (:global
     [remap query-replace] visual-replace
     )
    (:with-function visual-replace
      (:autoload-this))
    (:when-loaded
      (setopt visual-replace-default-to-full-scope t)
      )
    )
#+end_src
** モードライン関連
主にモードラインに対するパッケージをまとめている。

*** hide-mode-line
実行したバッファのモードラインを消去する。

#+begin_src emacs-lisp
  (setup hide-mode-line
    (:straight hide-mode-line)
    (:hook-into imenu-list-major-mode-hook
                treemacs-mode-hook))
#+end_src

*** moody
magitのメインコミッターが作成しているパッケージ。基本的には見た目を変えるためだけのものであり、それ以外については自前で色々やる必要がある。

#+begin_src emacs-lisp
  (setup moody
    (:straight moody)
    (setopt x-underline-at-descent-line t))
#+end_src

*** custom mode line definition
moodyを前提にしつつ、doom-modelineを利用しないので、自前で色々設定する

#+begin_src emacs-lisp
  (setup *my-mode-line
    (defgroup my:mode-line nil
      "Custom mode line."
      :group 'my)

    (defface my:buffer-position-active-face nil
      "Face for active buffer position indicator."
      :group 'my:mode-line)

    (defface my:mode-line:vc-icon-face nil
      "Face for vcs icon"
      :group 'my:mode-line)

    (defvar my:vc-status-text ""
      "Variable to store vc status text.")

    (setq my:mode-line-read-only-icon "  "
          my:mode-line-writable-icon "  "
          my:mode-line-modified-icon "  ")

    (defun my:mode-line-status ()
      "Return status icon for mode line status. This function uses nerd-icon package to get status icon."
      (let ((read-only (and buffer-file-name buffer-read-only))
            (modified (and buffer-file-name (buffer-modified-p))))

        (cond 
         (modified my:mode-line-modified-icon)
         (read-only my:mode-line-read-only-icon)
         (t my:mode-line-writable-icon))))

    (defun my:update-mode-line-vc-text ()
      "Update vcs text is used in mode-line"
      (setq my:vc-status-text
            (cond 
             ((and vc-mode buffer-file-name)
              (let* ((backend (vc-backend buffer-file-name))
                     (branch-name (if vc-display-status
                                      ;; 5 is skipped Gitx
                                      (substring vc-mode 5)
                                    ""))
                     (state (cl-case (vc-state buffer-file-name backend)
                              (added "  ")
                              (needs-merge "  ")
                              (needs-update "  ")
                              (removed "  ")
                              (t "  "))))
                (concat (propertize state 'face 'my:mode-line:vc-icon-face) branch-name)))
             (t ""))))
    ;; should update status text after refresh state
    (advice-add #'vc-refresh-state :after #'my:update-mode-line-vc-text)

    (defun my:mode-line-vc-state ()
      "Retrun status of current buffer."
      (when-let ((vc-status (my:update-mode-line-vc-text)))
        vc-status))

    (defun my:mode-line-buffer-position-percentage ()
      "Return current buffer position in percentage."
      (let ((pmax (point-max))
            (current (point)))
        (format "%d%%%%" (/ (* 100 current) pmax))))

    ;; definitions of mode-line elements
    (setq my:mode-line-element-buffer-status '(:eval (concat (my:mode-line-status)
                                                             ))
          my:mode-line-element-major-mode '(:eval (concat " " (let ((name mode-name))
                                                                (cond
                                                                 ((consp name) (car name))
                                                                 (t name)))
                                                          " "))
          my:mode-line-element-vc-mode '(:eval (moody-ribbon (if vc-mode (my:mode-line-vc-state)
                                                               "No VCS")))
          my:mode-line-element-buffer-position '(:eval (moody-ribbon
                                                        (propertize
                                                         (my:mode-line-buffer-position-percentage)
                                                         'face 'my:buffer-position-active-face)
                                                        7))
          my:mode-line-element-pomodoro '(:eval (if (featurep 'simple-pomodoro)
                                                    (simple-pomodoro-mode-line-text)
                                                  ""
                                                  )))

    (put 'my:mode-line-element-buffer-status 'risky-local-variable t)
    (put 'my:mode-line-element-major-mode 'risky-local-variable t)
    (put 'my:mode-line-element-vc-mode 'risky-local-variable t)
    (put 'my:mode-line-element-buffer-position 'risky-local-variable t)
    (put 'my:mode-line-element-pomodoro 'risky-local-variable t)

    ;; define default mode line format
    (defun my:init-mode-line ()
      "Initialize mode line"
      (set-face-attribute 'my:buffer-position-active-face
                          nil
                          :inherit 'mode-line
                          :foreground (modus-themes-get-color-value 'red-warmer))

      (set-face-attribute 'my:mode-line:vc-icon-face
                          nil
                          :inherit 'mode-line
                          :foreground (modus-themes-get-color-value 'fg-alt))

      ;; replace mode line elements via moody
      (moody-replace-mode-line-front-space)
      (moody-replace-mode-line-buffer-identification)

      (setq-default mode-line-format
                    '("%e"
                      moody-mode-line-front-space
                      my:mode-line-element-buffer-status
                      moody-mode-line-buffer-identification
                      mode-line-format-right-align
                      my:mode-line-element-pomodoro
                      my:mode-line-element-vc-mode
                      my:mode-line-element-buffer-position
                      my:mode-line-element-major-mode)))

    (add-hook 'find-file-hook #'my:update-mode-line-vc-text)
    (add-hook 'after-save-hook #'my:update-mode-line-vc-text)
    (my:init-mode-line))
#+end_src
** completion UI関連
*** consult
swiper/counselの置き換え。

#+begin_src emacs-lisp
  (setup consult
    (:straight consult)
    
    (defun my:consult-search-dwim (&optional prefix)
      "Merge version to search document via grep/rg.
       Use fast alternative if it exists, fallback grep if no alternatives in system.
      "
      (interactive "P")
      (cond
       ((executable-find "rg") (consult-ripgrep prefix))
       (t (consult-grep prefix))))

    ;; hotfuzz-moduleが有効な場合は、この設定がないとconsultでの検索がerrorになる場合がある
    (setq consult--tofu-char #x100000)
    (setq consult--tofu-range #x00fffe)

    ;; recent fileでpreviewする場合は明示的に実行する
    (:when-loaded
      (consult-customize consult-recent-file
                         :preview-key "M-.")))
#+end_src

*** embark
Contextに応じたアクションを実行できる、というようなもの。embark-actを実行して、そこに対して特定のキーにバインドされているアクションを実行する形。大体はembark-exportでやればよい。

- B :: ~embark-become~
- S :: ~embark-collect-snapshot~
- L :: ~embark-collect-live~
- E :: ~embark-export~


というのがデフォルトのバインディングになっている。

#+begin_src emacs-lisp
  (setup embark
    (:straight embark)
    (:global
     (kbd "C-S-a") embark-act
     (kbd "<f1> B") embark-bindings))

  (setup embark-consult
    (:straight embark-consult)
    (:with-mode embark-consult-preview-minor-mode
      (:hook-into embark-collect-mode-hook)))
#+end_src

**** embarkのアクション
やりたいことベースでメモる。

- consultで検索した結果をoccurして一括編集
  - ~consult-line~ (C-s) → ~embark-export~
    - C-S-aしてからすぐ ~E~
- consultでファイルから検索した結果を一括編集
  - ~consult-ripgrep~ (, s) → ~embark-export~
    - C-S-aしてからすぐ ~E~


大体はexportするとwgrep/occur-editとかができるようになる、と覚えればよし。

*** marginalia
minibufferの表示に対して注釈？を追加できるパッケージ。consult/embarkそれぞれのパッケージで利用が強く推奨されているので。

注釈というか、metaという情報らしい。

#+begin_src emacs-lisp
  (setup marginalia
    (:straight marginalia)
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    (:with-map minibuffer-local-map
      (:bind
       (kbd "M-A") marginalia-cycle
       )
      )
    (:autoload-this)
    (:when-loaded
      (add-to-list 'marginalia-prompt-categories
                   '("\\<File\\>" . file))
      )
    (marginalia-mode +1))
#+end_src

*** vertico
https://github.com/minad/vertico

垂直補完UIを提供することのみを目的としたUIライブラリ。

#+begin_src emacs-lisp
  (setup vertico
    (:straight (vertico :type git :host github :repo "minad/vertico"))
    (:hook-into emacs-startup-hook)

    ;; 選択時にprefix iconを表示する
    ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
    (defvar +vertico-current-arrow t)

    (cl-defmethod vertico--format-candidate :around
      (cand prefix suffix index start &context ((and +vertico-current-arrow
                                                     (not (bound-and-true-p vertico-flat-mode)))
                                                (eql t)))
      (setq cand (cl-call-next-method cand prefix suffix index start))
      (let ((arrow (nerd-icons-faicon "nf-fa-hand_o_right")))
        (if (bound-and-true-p vertico-grid-mode)
            (if (= vertico--index index)
                (concat " " arrow " " cand)
              (concat #("_" 0 1 (display " ")) cand))
          (if (= vertico--index index)
              (concat " " arrow " " cand)
            (concat "    " cand)))))

    (:when-loaded
      ;; 最大20件まで表示するように
      (setopt vertico-count 20)
      ;; 候補が少なくても resize しないように
      (setopt vertico-resize nil)
      
      (setup vertico-directory
        (:with-map vertico-map
          (:bind
           (kbd "RET") vertico-directory-enter
           (kbd "<backspace>") vertico-directory-delete-char
           (kbd "M-DEL") vertico-directory-delete-word
           ))
        )
      )
    )
#+end_src

*** orderless
completionのstyleを変更するパッケージ。基本的には空白区切りでのfilteringを提供する。

#+begin_src emacs-lisp
  (setup *orderless-migemo-config
    (with-eval-after-load 'migemo
      
      ;; from https://nyoho.jp/diary/?date=20210615
      (defun my:orderless-migemo (component)
        (let ((pattern (migemo-get-pattern component)))
          (condition-case nil
              (progn (string-match-p pattern "") pattern)
            (invalid-regexp nil))))

      (orderless-define-completion-style orderless-default-style
        (orderless-matching-styles '(orderless-literal
                                     orderless-regexp)))

      (orderless-define-completion-style orderless-migemo-style
        (orderless-matching-styles '(orderless-literal
                                     orderless-regexp
                                     my:orderless-migemo)))

      (setq completion-category-overrides
            '((command (styles orderless-default-style))
              ;; ファイルの場合には、pathの部分matchをするように
              (file (styles orderless-migemo-style))
              (org-roam-node (styles . (partial-completion orderless-migemo-style)))
              (buffer (styles orderless-migemo-style))
              (symbol (styles orderless-default-style))
              (consult-location (styles orderless-migemo-style)) ; category `consult-location' は `consult-line' などに使われる
              (consult-multi (styles orderless-migemo-style)) ; category `consult-multi' は `consult-buffer' などに使われる
              (unicode-name (styles orderless-migemo-style))
              (variable (styles orderless-default-style))))))

  (setup orderless
    (:straight orderless)
    (:require orderless))

#+end_src

*** hotfuzz
built-inのflexに似た結果を生成するが、より高速かつ、単語間の切れめなどがよりわかりやすいようになっている。

#+begin_src emacs-lisp
  (setup hotfuzz
    (:straight (hotfuzz :type git :host github :repo "axelf4/hotfuzz" :branch "master"
                        :files ("hotfuzz.el" "hotfuzz-module.c" "CMakeLists.txt")))

    (add-to-list 'completion-styles 'hotfuzz))
#+end_src
*** corfu
minimalなregion completion。child frameを利用しているのと、あくまでシンプルなUIのみを提供しているため、軽量かつ高速。

#+begin_src emacs-lisp
  (setup corfu
    (:straight (corfu :type git :host github :repo "minad/corfu" :branch "main"))

    (:when-loaded
      (setopt corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      (setopt corfu-auto t)                 ;; Enable auto completion
      (setopt corfu-auto-delay 0.1)                 ;; 即時表示を試してみる
      (setopt corfu-count 15)                        ;; show more candidates
      (setopt corfu-auto-prefix 2)
      (setopt corfu-max-width 300)               ;; max width of corfu completion UI
      (setopt corfu-on-exact-match nil)          ; 単独で厳密マッチしたものがあった場合の挙動。一旦何もしない。

      (advice-add 'corfu--setup :around #'my:corfu--setup:around)
      )

    (:with-mode global-corfu-mode
      (:hook-into emacs-startup-hook))
    
    (defvar-keymap my:corfu-auto-map
      :doc "Keymap used when popup is shown automatically."
      "C-g" #'corfu-quit)
    (defvar my:corfu-in-auto-complete nil)
    
    ;; corfuでauto表示はするものの、TABを押すまで選択しないようにする設定
    ;; https://misohena.jp/blog/2024-02-15-separate-notification-and-selection-with-corfu-auto.html
    
    (defun my:corfu--auto-complete-deferred:around (oldfun &rest args)
      ;; 自動補完を試みるときに呼び出される
      (let ((my:corfu-in-auto-complete t))
        ;; 元の関数を呼び出す
        ;; 補完候補があるなら続けてsetup等が呼ばれる
        (apply oldfun args)))

    (advice-add 'corfu--auto-complete-deferred :around #'my:corfu--auto-complete-deferred:around)

    (defun my:corfu--setup:around (oldfun &rest args)
      (if my:corfu-in-auto-complete
          ;; 自動補完の時
          (progn
            (setf
             ;; 子フレームを半透明にする
             (alist-get 'alpha-background corfu--frame-parameters) 80
             ;; 最初の候補を選ばない
             corfu-preselect 'prompt)
            ;; キー割り当てを極力無くす
            (let ((corfu-map my:corfu-auto-map))
              (apply oldfun args)))
        ;; 手動補完の時
        (setf
         ;; 子フレームを完全不透明にする
         (alist-get 'alpha-background corfu--frame-parameters) 100
         ;; 最初の候補を選ぶ
         corfu-preselect 'first)
        (apply oldfun args)))

    (setup corfu-popupinfo
      (:hook-into corfu-mode-hook)))
#+end_src
*** cape
capf = completion-at-point-functionを極限までシンプルに拡張するための処理。corfuなどとは独立していて、あくまでcapfを拡張するだけに留まっている。

#+begin_src emacs-lisp
  (setup cape
    (:straight cape)
    ;; (eglot-managed-mode-hook . my:eglot-capf)
    (defun my:eglot-capf ()
      "set capf for eglot"
      (setq-local completion-at-point-functions
                  (list (cape-capf-case-fold
                         (cape-capf-super
                          #'eglot-completion-at-point
                          #'tempel-complete
                          #'cape-file)))))

    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'tempel-complete)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-keyword))

#+end_src
** migemo関連

*** migemo
#+begin_src emacs-lisp
  (setup migemo
    (:and (and my:migemo-command (executable-find my:migemo-command))
          (progn
            (:straight migemo)
            (:require migemo)))
    (:with-function migemo-init
      (:autoload-this)
      (:hook-into emacs-startup-hook))

    (:when-loaded
      (setopt migemo-command my:migemo-command)
      (setopt migemo-options '("-q" "--emacs"))
      (setopt migemo-dictionary my:migemo-dictionary)
      (setopt migemo-user-dictionary nil)
      (setopt migemo-regex-dictionary nil)
      (setopt migemo-coding-system 'utf-8-unix)
      ;; 遅いのを防ぐためにキャッシュする。
      (setopt migemo-use-pattern-alist t)
      (setopt migemo-use-frequent-pattern-alist t)
      (setopt migemo-pattern-alist-length 1024)
      )
    )
#+end_src

** SKK

*** ddskk
#+begin_src emacs-lisp :tangle no
  (leaf ddskk
    :straight t
    :if nil
    ;; ddskkは (provide 'skk) されているので、skkでrequireするようにする
    :commands skk-mode
    :bind (("<Hangul>" . my:enable-japanese-input)
           ("<henkan>" . my:enable-japanese-input)
           ("<f13>" . my:enable-japanese-input)
           ("<Hangul_Hanja>" . my:disable-japanese-input)
           ("<muhenkan>" . my:disable-japanese-input)
           ("C-<f13>" . my:disable-japanese-input))
    :preface
    (defun my:enable-japanese-input ()
      (interactive)
      (set-input-method my:input-method))

    (defun my:disable-japanese-input ()
      (interactive)
      (set-input-method nil))
    :init
    (setq default-input-method my:input-method
          skk-init-file (expand-file-name "init-ddskk.el" user-emacs-directory))

    (defun my:disable-skk-modeline-force-change (old-func &rest r)
      "そのままだとmode lineのフォーマットが勝手に変わってしまって非常に面倒なことになるため、
  起動する瞬間だけ該当の処理をスキップする。
  "
      (setq skk-status-indicator 'minor-mode)
      (apply old-func r)
      (setq skk-status-indicator 'left))

    (advice-add #'skk-mode-invoke :around  #'my:disable-skk-modeline-force-change))
#+end_src

*** ddskk-posframe
#+begin_src emacs-lisp :tangle no
  (leaf ddskk-posframe
    :straight t
    :if nil
    :global-minor-mode t)
#+end_src

*** yaskkserv2の設定
#+begin_src emacs-lisp :tangle no
  (setup f (:straight f))
  (leaf *skk-server
    :after f
    :if nil
    :init
    (let ((server-program (expand-file-name "yaskkserv2"  my:user-local-exec-path))
          (dictionary-program (expand-file-name "yaskkserv2_make_dictionary" my:user-local-exec-path)))
      (cond ((and my:build-skkserver
                  (executable-find "cargo")
                  (not (executable-find server-program))
                  (not (executable-find dictionary-program)))
             (let ((base-path "/tmp/yaskkserv2"))
               (unless (f-exists? base-path)
                 (call-process "git" nil nil t  "clone" "https://github.com/wachikun/yaskkserv2" "/tmp/yaskkserv2"))
               (call-process "cargo" nil nil t "build" "--release" "--manifest-path" (expand-file-name "Cargo.toml" base-path))
               (unless (f-exists? server-program)
                 (f-copy (expand-file-name "target/release/yaskkserv2" base-path) server-program))
               (unless (f-exists? dictionary-program)
                 (f-copy (expand-file-name "target/release/yaskkserv2_make_dictionary" base-path) dictionary-program))
               ))
            (t
             (let* ((target (cond ((eq window-system 'ns) "apple-darwin")
                                  (t "uknown-linux-gnu")))
                    (path (format "https://github.com/wachikun/yaskkserv2/releases/download/%s/yaskkserv2-%s-x86_64-%s.tar.gz" my:yaskkserv2-version my:yaskkserv2-version target)))
               (call-process "curl" nil nil t "-L" path "-o" "/tmp/yaskkserv2.tar.gz")
               (call-process "tar" nil nil t "-zxvf" "/tmp/yaskkserv2.tar.gz" "-C" my:user-local-exec-path "--strip-components" "1"))))))
#+end_src


** input method
#+begin_src emacs-lisp
  (setup *input-method
    (:global
     (kbd "<Hangul>") my:enable-japanese-input
     (kbd "<henkan>") my:enable-japanese-input
     (kbd "<f13>") my:enable-japanese-input
     (kbd "<Hangul_Hanja>") my:disable-japanese-input
     (kbd "<muhenkan>") my:disable-japanese-input
     (kbd "C-<f13>") my:disable-japanese-input
     )
    
    (defun my:enable-japanese-input ()
      (interactive)
      (set-input-method my:input-method))

    (defun my:disable-japanese-input ()
      (interactive)
      (set-input-method nil))

    (setq default-input-method my:input-method))
#+end_src
** dashboard
#+begin_src emacs-lisp
  (setup dashboard
    (:straight dashboard)
    (diminish 'dashboard-mode)
    (:require dashboard)

    (dashboard-modify-heading-icons '((recents . "nf-oct-file")
                                      (projects . "nf-oct-project")
                                      (agenda . "nf-oct-calendar")))
    (setopt dashboard-display-icons-p t)
    (setopt dashboard-set-heading-icons t)
    (setopt dashboard-set-file-icons t)
    (setopt dashboard-icon-type 'nerd-icons)
    (setopt dashboard-vertically-center-content t)

    (setopt dashboard-startup-banner 'ascii)
    (setopt dashboard-set-navigator t)
    (setopt dashboard-set-init-info t)
    (setopt dashboard-items '((recents . 15)
                              (projects . 5)
                              (agenda . 5)))
    (setopt dashboard-banner-ascii "
    ____
   |  _ \\  ___ _ __ _   _  ___ _ __ ___   __ _  ___ ___
   | | | |/ _ \\ '__| | | |/ _ \\ '_ ` _ \\ / _` |/ __/ __|
   | |_| |  __/ |  | |_| |  __/ | | | | | (_| | (__\\__ \\
   |____/ \\___|_|   \\__,_|\\___|_| |_| |_|\\__,_|\\___|___/
  ")  
    (dashboard-setup-startup-hook))
#+end_src

