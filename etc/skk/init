;; -*- mode : emacs-lisp -*-
;;
(when window-system
  (cond ((string-equal window-system "ns")
         (setq skk-large-jisyo "/Applications/Emacs.app/Contents/Resources/etc/skk/SKK-JISYO.L"))
        (t
         (setq skk-large-jisyo "/usr/share/skk/SKK-JISYO.L"))))

(setq skk-use-azik t)
(setq skk-azik-keyboard-type 'jp106)

;; skkを利用する場合かつ、jp106である場合、sticky keyを利用しやすいよ
;; うに、変換の方式を変える。
(setq skk-sticky-key ";")
(when (and skk-use-azik (equal skk-azik-keyboard-type 'jp106))
  (add-hook 'skk-azik-load-hook
            '(lambda ()
               (let ((unnessesary-list '("x;" ";"))
                     (nessesary-list '(("/" nil ("ッ" . "っ"))
                                       ("x/" nil "/"))))

                 (setq skk-downcase-alist
                       (append '((?\? . ?\;)) skk-downcase-alist))
                 (setq skk-downcase-alist
                       (append '((?+ . ?\/)) skk-downcase-alist))
                 (dolist (rule unnessesary-list)
                   (setq skk-rom-kana-rule-list
                         (skk-del-alist rule skk-rom-kana-rule-list)))
                 (dolist (rule nessesary-list)
                   (setq skk-rom-kana-rule-list
                         (add-to-list 'skk-rom-kana-rule-list rule)))))))

(setq skk-show-annotation t)

(when skk-use-color-cursor
  (setq skk-cursor-hiragana-color "blue"
        skk-cursor-katakana-color "green"
        skk-cursor-abbrev-color "red"
        skk-cursor-jisx0208-latin-color "red"
        skk-cursor-jisx0201-color "purple"
        skk-cursor-latin-color "cyan")
  ;;
  )

;; http://github.com/m2ym/auto-complete
(require 'popup)
(setq skk-tooltip-function
  #'(lambda (tooltip-str)
      (popup-tip tooltip-str)))

;; 自動的に送り仮名エントリが利用されるようにする
(setq skk-auto-okuri-process t)

(setq-default skk-kutouten-type 'en)
(setq skk-henkan-rest-indicator t)
(setq skk-show-candidates-always-pop-to-buffer t)
(setq skk-candidate-buffer-background-color "grey90")
(setq skk-show-inline t)

(when skk-show-inline
  (setq skk-inline-show-face nil)
  (setq skk-inline-show-background-color "gray15"))

(setq skk-show-icon t)

(setq skk-egg-like-newline t)

;; (setq skk-undo-kakutei-word-only t)

(setq skk-dcomp-activate t)
(set-face-foreground 'skk-dcomp-face "green")

(setq skk-dcomp-activate
      #'(lambda ()
          (and
           window-system
           (or (eolp)
               (looking-at "[ \\t]+$")))))

(setq skk-dcomp-multiple-activate t
      skk-dcomp-multiple-rows 10)

(require 'skk-study)

(defvar skk-auto-save-jisyo-interval 600)
(defun skk-auto-save-jisyo ()
  (skk-save-jisyo)
  ;; (skk-bayesian-save-history)
  ;; (skk-bayesian-corpus-save)
  )
(run-with-idle-timer skk-auto-save-jisyo-interval
                     skk-auto-save-jisyo-interval
                     'skk-auto-save-jisyo)
;; (cancel-function-timers 'skk-auto-save-jisyo)

(setq skk-rom-kana-rule-list
      (append '(("-" nil skk-hyphen)
                ("." nil skk-hyphen)
                ("," nil skk-hyphen))
              skk-rom-kana-rule-list))

(defun skk-hyphen (arg)
  (let ((output (cdr (assq (skk-last-command-char)
                           '((?- . ("ー" "-" "－" "ー"))
                             (?, . ("、" "," "，" "、"))
                             (?. . ("。" "." "．" "。"))))))
        (c (char-before (point))))
    (cond ((null c) (nth 0 output))
          ((and (<= ?0 c) (>= ?9 c)) (nth 1 output))
          ((and (<= ?０ c) (>= ?９ c)) (nth 2 output))
          (t (nth 3 output)))))

(define-key skk-j-mode-map (kbd "M-,") 'skk-toggle-kutouten)
(define-key skk-j-mode-map (kbd "C-M-j") 'skk-undo-kakutei)
(global-set-key (kbd "C-x j") 'skk-mode)
