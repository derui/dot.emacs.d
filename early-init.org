:DOC-CONFIG:
#+property: header-args:emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+property: header-args :mkdirp yes :comments no
#+STARTUP: content
:END:

* Initial configuration

** Header
#+begin_src emacs-lisp
  ;;; early-init.el --- Init file for my own -*- lexical-binding: t; -*-

  ;; Author: derui <derutakayu@gmail.com>
  ;; Maintainer: derui <derutakayu@gmail.com>

  ;;; Commentary:

  ;;: Customization:

  ;;; Code:

  ;; DO NOT EDIT THIS FILE DIRECTLY
#+end_src
** disable magic file name
magic file nameを一時的に無効化する。

#+begin_src emacs-lisp
  (defconst my-saved-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src
** stop gc on startup
startupの間はGCをとめる。

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src
** profiler
#+begin_src emacs-lisp
  (defvar my:enable-profiler nil
    "起動時にProfilerを有効にするかどうか")

  (when my:enable-profiler
    (add-hook 'after-init-hook (lambda ()
                                 (profiler-stop)
                                 (profiler-report)))
    
    (profiler-start 'cpu+mem)
    )
#+end_src

* ユーザーの環境定義
** カスタムの定義
基本的には、defcustomを使っていった方がいいということなので、defcustomを使う。

#+begin_src emacs-lisp
  (defgroup my nil "My custom group" :group 'configuration)
  (defcustom my:input-method 'japanese-mozc
    "input method"
    :group 'my
    :type 'symbol)

  (defcustom my:trailing-whitespace-exclude-modes
    '(org-mode)
    "Do not trailing whitespace in these modes"
    :group 'my
    :type '(symbol))

  (defcustom my:user-local-exec-path
    "~/.local/bin"
    "The location user-local executable path"
    :group 'my
    :type 'string)
#+end_src

SKKに関する変数。辞書サーバーを使いたい場合は、 ~my:use-skkserver~ を non-nilにしたらよい。

#+begin_src emacs-lisp
  ;; SKK server(利用するのはyaskkserv2を利用する
  (defcustom my:use-skkserver t
    "Use skk server or not"
    :group 'my
    :type 'boolean)

  ;; SKK serverをbuildする(要cargo)
  (defcustom my:build-skkserver
    nil
    "Build skk server if not available in system"
    :group 'my
    :type 'boolean)

  ;; yaskkserv2のバージョン
  (defcustom my:yaskkserv2-version "0.1.1"
    "The version of yaskkserv2"
    :group 'my
    :type 'string)
#+end_src

posframeを使うかどうか。

#+begin_src emacs-lisp
  (defcustom my:use-posframe t
    "Use posframe entirely"
    :group 'my
    :type 'boolean)
#+end_src

*** org-roam
#+begin_src emacs-lisp
  (defcustom my:org-roam-db-location
    "~/.emacs.d/share/org-roam.db"
    "The location of database that is used by org-roam"
    :group 'my
    :type 'string)

  (defcustom my:org-roam-directory
    "~/Dropbox/git/roam"
    "The location of roam files"
    :group 'my
    :type 'directory)

  (defcustom my:org-roam-dailies-directory
    "~/Dropbox/git/roam-daily"
    "The location of roam-daily files"
    :group 'my
    :type 'directory)

  (defcustom my:org-roam-index-file
    (expand-file-name "index.org" my:org-roam-directory)
    "The location of index file"
    :group 'my
    :type 'file)
#+end_src
** font
#+begin_src emacs-lisp
  (defcustom my:font-size 14
    "current font size"
    :group 'my
    :type 'number)

  (defcustom my:font-family "Moralerspace Neon NF"
    "current font family"
    :group 'my
    :type 'string)
#+end_src
** 環境ごとの設定
環境によって異なる設定はここで定義しておく。これらは別ファイルで設定できるようにする。

#+begin_src emacs-lisp
  (defcustom my:mozc-el-locate nil
    "Location of mozc.el"
    :group 'my
    :type 'file)

  (defcustom my:mozc-helper-locate nil
    "Location of emacs-mozc-helper"
    :group 'my
    :type 'file)

  (defcustom my:virtualenv-path nil
    "Location of virtualenv's environment"
    :group 'my
    :type 'file)

  (defcustom my:roswell-path nil
    "Location of roswell"
    :group 'my
    :type 'file)

  (defcustom my:use-mozc-el nil
    "Use mozc as input method"
    :group 'my
    :type 'boolean)

  (defcustom my:migemo-command nil
    "The path of migemo-like executable"
    :group 'my
    :type 'file)

  (defcustom my:migemo-dictionary nil
    "The path of dictionaries for migemo"
    :group 'my
    :type 'directory)

  (defcustom my:cargo-path nil
    "The path of cargo executable"
    :group 'my
    :type 'file)

  (defcustom my:rust-analyzer-version nil
    "The path of rust-analyzer executable"
    :group 'my
    :type 'file)
#+end_src

* Emacs base configuration
** 基本設定
*** languages
right-to-leftを無効化して、多少でもパフォーマンスを上げる。
#+begin_src emacs-lisp
  (setq-default bidi-display-reordering nil)
#+end_src

言語環境は日本語。かつ、キーボードから入力される文字コードはutf-8。
#+begin_src emacs-lisp
  (set-language-environment 'Japanese)
  (set-keyboard-coding-system 'utf-8)
#+end_src

文字コードの推測ではutf-8を優先する。
#+begin_src emacs-lisp
  (setq buffer-file-coding-system 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
#+end_src

*** enable functions
各種のデフォルトでは無効化されている関数を有効化する。
#+begin_src emacs-lisp
  (put 'narrow-to-defun 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'set-goal-column 'disabled nil)
#+end_src

backspaceまたはdeleteキーで削除が行えるようにする。
#+begin_src emacs-lisp
  (if (fboundp 'normal-erase-is-backspace-mode)
      (normal-erase-is-backspace-mode 0))
#+end_src

*** change default behaviors
**** スタートページを表示しない
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

**** yes/noではなくy/nで回答できるようにする
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

**** バックアップファイルは作らない
#+begin_src emacs-lisp
  (setq backup-inhibited t)
#+end_src

**** 自動保存ファイルは作らない
#+begin_src emacs-lisp
  (setq auto-save-default nil)
#+end_src

**** タブ入力時のインデント設定
#+begin_src emacs-lisp
  (setq indent-line-function #'indent-relative-first-indent-point)
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-always-indent 'complete)
#+end_src

**** コメントのスタイル設定
#+begin_src emacs-lisp
  (setq comment-style 'indent)
#+end_src

**** 画面端での折り返しを有効にする
#+begin_src emacs-lisp
  (setq truncate-lines t)
#+end_src

**** auto-fill時にインデントを考慮する
#+begin_src emacs-lisp
  (setq adaptive-fill-regexp "[ \t]*")
#+end_src

**** lockファイルは作成しない
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src
**** processから読み出せる量を増やす
#+begin_src emacs-lisp
  (setq read-process-output-max (* 8 1024 1024))
#+end_src

**** capfの挙動を変更する
capfでは大文字小文字を区別しない。
#+begin_src emacs-lisp
  (setq completion-ignore-case t)
  (setq completion-styles `(basic
                            ,(if (version<= emacs-version "27.0") 'helm-flex 'flex)))
#+end_src

**** ring bellは鳴らさない
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

**** cursorは点滅させない
#+begin_src emacs-lisp
  (blink-cursor-mode 0)

  ;; defaultのカーソルはbar
  (setq-default cursor-type 'bar)
#+end_src

**** 常に最終行を追加する
#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

**** VCでのsymlink確認をしないようにする
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

**** ダイアログボックスを利用しない
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src

**** native comp
native comp次の警告は表示する。
#+begin_src emacs-lisp
  (setopt native-comp-async-report-warnings-errors t)
#+end_src

**** switch-to-bufferをしたときに現在のバッファを使うことを強制する
~pop-to-buffer-same-window~ に切り替える。

#+begin_src emacs-lisp
  (setopt switch-to-buffer-obey-display-actions t)
#+end_src

**** side by sideでの分割を主体とする
frameの広さは大体横の方が広いので、side by sideでの分割を基本とする方がよさそうである。

#+begin_src emacs-lisp
  (setopt split-height-threshold nil)
  (setopt split-width-threshold 0)
#+end_src

**** 重複する履歴は削除する
#+begin_src emacs-lisp
  (setopt history-delete-duplicates t)
#+end_src
*** performance
#+begin_src emacs-lisp
  ;; process毎にバッファリングするようにする
  (setq process-adaptive-read-buffering t)

  ;; 対応する括弧を入力したときに何もしない
  (setopt blink-matching-paren nil)
#+end_src
*** themeの設定
theme全体に関わる設定。

#+begin_src emacs-lisp
  ;; 主にmodus themeにおいて、lisp codeの実行を許容するための設定
  (setopt custom-safe-themes t)
#+end_src
*** package.elは自動的にLoadしない
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src
*** 表示しないGUIを無効化する
#+begin_src emacs-lisp
  ;; scroll barを表示しない
  (scroll-bar-mode -1)
  ;; menu barを表示しない
  (menu-bar-mode -1)
  ;; tool barを表示しない
  (tool-bar-mode -1)
  ;; 行番号を表示しない
  (line-number-mode -1)
  ;; 列番号を表示しない
  (column-number-mode -1)
  ;; 小さいサイズのwindow は拡張するだけにする
  (setopt resize-mini-windows 'grow-only)

#+end_src
** フォントの設定
初期のframeに反映するためにはここで設定するのがよい。

#+begin_src emacs-lisp
  (defun my:font-setup (mode &optional family font-size)
    "Initialize fonts on window-system.

  `MODE' should be either `init' or `update'. `init' affects only
  initialization process. `update' affects all frames launched.
  "
    (let ((emoji-font "Noto Color Emoji")
          (font-size (or font-size my:font-size))
          (font-family (or family my:font-family)))
      (cond
       ((eq mode 'init)
        (let ((font-name (format "%s-%d" font-family font-size)))
          (add-to-list 'default-frame-alist `(font . ,font-name)))
        )
       ((eq mode 'update)
        (cond
         ((or (eq window-system 'x) (eq window-system 'pgtk) (eq window-system 'ns))
          (let* ((size font-size)
                 (font-set-family font-family)
                 (h (round (* size 10))))
            (when (member emoji-font (font-family-list))
              (set-fontset-font t 'symbol (font-spec :family emoji-font) nil 'prepend))
            (set-face-attribute 'default nil :family font-set-family :height h)
            ))
         (t
          (message "Not have window-system")))
        ))
      ))

  (my:font-setup 'init)
#+end_src

** interactive resize
#+begin_src emacs-lisp
  (defun my:font-resize (&optional font-size)
    "resize font interactively"
    (interactive "P")
    (let ((font-size (if font-size
                         (read-minibuffer "Font Size:")
                       my:font-size)))
      (my:font-setup 'update my:font-family font-size))
    )
#+end_src

** 不要なフォント表示を抑制する
#+begin_src emacs-lisp
  (setq redisplay-skip-fontification-on-input t)
#+end_src

* footer
#+begin_src emacs-lisp
  (provide 'early-init)
#+end_src
