:DOC-CONFIG:
#+property: header-args:emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+property: header-args :mkdirp yes :comments no
#+STARTUP: content
:END:

* Initial configuration

** Header
#+begin_src emacs-lisp
  ;;; early-init.el --- Init file for my own -*- lexical-binding: t; -*-

  ;; Author: derui <derutakayu@gmail.com>
  ;; Maintainer: derui <derutakayu@gmail.com>

  ;;; Commentary:

  ;;: Customization:

  ;;; Code:

  ;; DO NOT EDIT THIS FILE DIRECTLY
#+end_src
** disable magic file name
Disable magic file name temporarily, it's for speed of launthing.

#+begin_src emacs-lisp
  (defconst my-saved-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src
** stop gc on startup
It makes emacs's startup time slowly sometimes.

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src
** profiler
#+begin_src emacs-lisp
    (defvar my:enable-profiler nil
      "If it is t, enable profiler while startup. This option is usefull to
  detect performance degration in startup.")

    (when my:enable-profiler
      (add-hook 'after-init-hook (lambda ()
                                   (profiler-stop)
                                   (profiler-report)))
      
      (profiler-start 'cpu+mem)
      )
#+end_src

** set elpaca's lockfile
#+begin_src emacs-lisp
  ;; Lockfile should be managed by Git.
  (setopt elpaca-lock-file (expand-file-name "elpaca.lock" user-emacs-directory))
#+end_src

** change user-emacs-directory
#+begin_src emacs-lisp
  (setq user-emacs-directory (expand-file-name "~/.config/emacs-local"))
#+end_src
* User's configuration definition

** Custom variables
Define custom variables with group in this configuration.

#+begin_src emacs-lisp
  (defgroup my nil "My custom group" :group 'configuration)
  (defcustom my:input-method 'japanese-mozc
    "input method"
    :group 'my
    :type 'symbol)

  (defcustom my:trailing-whitespace-exclude-modes
    '(org-mode)
    "Do not trailing whitespace in these modes"
    :group 'my
    :type '(symbol))

  (defcustom my:user-local-exec-path
    "~/.local/bin"
    "The location user-local executable path"
    :group 'my
    :type 'string)
#+end_src

#+begin_src emacs-lisp
  (defcustom my:use-skkserver t
    "Use skk server or not"
    :group 'my
    :type 'boolean)

  (defcustom my:build-skkserver
    nil
    "Build skk server if not available in system. This option needs Cargo to build the server."
    :group 'my
    :type 'boolean)

  (defcustom my:yaskkserv2-version "0.1.1"
    "The version of yaskkserv2"
    :group 'my
    :type 'string)

  (defcustom my:use-posframe t
    "Use posframe entirely"
    :group 'my
    :type 'boolean)

  (defcustom my/eldoc-persistance-buffer-prefix "*persisted eldoc "
    "Prefix for persisted eldoc buffer"
    :group 'my
    :type 'string)
#+end_src

*** org-roam
Configurations for org-roam file locations.

#+begin_src emacs-lisp
  (defcustom my:org-roam-db-location
    (locate-user-emacs-file "share/org-roam.db")
    "The location of database that is used by org-roam"
    :group 'my
    :type 'string)

  (defcustom my:org-roam-directory
    "~/Dropbox/git/roam"
    "The location of roam files"
    :group 'my
    :type 'directory)

  (defcustom my:org-roam-dailies-directory
    "~/Dropbox/git/roam-daily"
    "The location of roam-daily files"
    :group 'my
    :type 'directory)

  (defcustom my:org-roam-index-file
    (expand-file-name "index.org" my:org-roam-directory)
    "The location of index file"
    :group 'my
    :type 'file)
#+end_src
** font
#+begin_src emacs-lisp
  (defcustom my:font-size 14
    "current font size"
    :group 'my
    :type 'number)

  (defcustom my:font-family "Moralerspace Neon NF"
    "current font family"
    :group 'my
    :type 'string)
#+end_src
** Environment-dependent configurations

#+begin_src emacs-lisp
  (defcustom my:mozc-helper-locate nil
    "Location of emacs-mozc-helper"
    :group 'my
    :type 'file)

  (defcustom my:virtualenv-path nil
    "Location of virtualenv's environment"
    :group 'my
    :type 'file)

  (defcustom my:roswell-path nil
    "Location of roswell"
    :group 'my
    :type 'file)

  (defcustom my:migemo-command nil
    "The path of migemo-like executable"
    :group 'my
    :type 'file)

  (defcustom my:migemo-dictionary nil
    "The path of dictionaries for migemo"
    :group 'my
    :type 'directory)

  (defcustom my:cargo-path nil
    "The path of cargo executable"
    :group 'my
    :type 'file)

  (defcustom my/user-layout 'qwerty
    "The symbol of user layout"
    :group 'my
    :type 'symbol)
#+end_src
** Loat external file
Load the file under user emacs file. The file should contains some of settings for custom variables under ~my:~ category.

#+begin_src emacs-lisp
  (let ((user-env (locate-user-emacs-file "conf/user-env.el")))
    (load user-env t))
#+end_src

* Emacs base configuration
** basement
*** languages
Only use left-to-right for performance.

#+begin_src emacs-lisp
  (setq-default bidi-display-reordering nil)
#+end_src

The language environment is Japanese. And the character encoding input from the keyboard is utf-8.
#+begin_src emacs-lisp
  (set-language-environment 'Japanese)
  (set-keyboard-coding-system 'utf-8)
#+end_src


Preference is given to utf-8 in guessing character encoding.
#+begin_src emacs-lisp
  (setq buffer-file-coding-system 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
#+end_src

*** enable functions
Enable functions that are disabled in default settings.
#+begin_src emacs-lisp
  (put 'narrow-to-defun 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'set-goal-column 'disabled nil)
#+end_src

Delete character with backspace or delete key.
#+begin_src emacs-lisp
  (if (fboundp 'normal-erase-is-backspace-mode)
      (normal-erase-is-backspace-mode 0))
#+end_src

*** change default behaviors
**** do not show startup screen
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src
**** show untitled buffer instead of scratch

#+begin_src emacs-lisp
  (defun my/make-untitled-buffer ()
    "Create `untitled' buffer that are not combined file."
    (let ((buffer (get-buffer-create "<untitled>")))
      (with-current-buffer buffer
        (fundamental-mode))
      buffer))

  (defun my/new-untitled-buffer-create ()
    "Command version `my/make-untitled-buffer'"
    (interactive)
    (let ((buffer (generate-new-buffer "<untitled>")))
      (with-current-buffer buffer
        (fundamental-mode))
      (switch-to-buffer buffer)))

  (setq initial-buffer-choice #'my/make-untitled-buffer)
#+end_src
**** use y-or-n
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

**** do not create backup file
#+begin_src emacs-lisp
  (setq backup-inhibited t)
#+end_src

**** configuration for indent when press TAB
#+begin_src emacs-lisp
  (setq indent-line-function #'indent-relative-first-indent-point)
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-always-indent 'complete)
#+end_src

**** style of comment
#+begin_src emacs-lisp
  (setq comment-style 'indent)
#+end_src

**** enable truncate line
#+begin_src emacs-lisp
  (setq truncate-lines t)
#+end_src

**** concider indent when auto-filling
#+begin_src emacs-lisp
  (setq adaptive-fill-regexp "[ \t]*")
#+end_src

**** do not create lock file
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src
**** increase size to read from a process
#+begin_src emacs-lisp
  (setq read-process-output-max (* 8 1024 1024))
#+end_src

**** change capf behavior

#+begin_src emacs-lisp
  (setq completion-ignore-case t)
  (setq completion-styles `(basic
                            ,(if (version<= emacs-version "27.0") 'helm-flex 'flex)))
#+end_src

**** disable ring-bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

**** stop cursor blinking
#+begin_src emacs-lisp
  (blink-cursor-mode 0)

  ;; Default cursor should be bar
  (setq-default cursor-type 'bar)
#+end_src

**** add final newline always
#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

**** follow symlink in VC
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

**** do not show dialog box
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src

**** show warining on native comp

#+begin_src emacs-lisp
  (setopt native-comp-async-report-warnings-errors t)
#+end_src

**** use same window forcibly when switch-to-buffer

#+begin_src emacs-lisp
  (setopt switch-to-buffer-obey-display-actions t)
#+end_src

**** consider side by side for window spliting
Since the frame is generally wider horizontally than vertically, it would be better to use side by side division as a basis.

#+begin_src emacs-lisp
  (setopt split-height-threshold nil)
  (setopt split-width-threshold 0)
#+end_src

**** delete duplicated histories
#+begin_src emacs-lisp
  (setopt history-delete-duplicates t)
#+end_src
*** performance
#+begin_src emacs-lisp
  ;; Ensure buffering for each process
  (setq process-adaptive-read-buffering t)

  ;; Do nothing when the corresponding parentheses are entered.
  (setopt blink-matching-paren nil)
#+end_src
*** themeの設定
theme全体に関わる設定。

#+begin_src emacs-lisp
  ;; enable lisp evaluation in theme file, for modus theme
  (setopt custom-safe-themes t)
#+end_src
*** do not load package.el at startup
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src
*** hide unused GUI
#+begin_src emacs-lisp
  ;; hide scroll bar
  (scroll-bar-mode -1)
  ;; hide menu bar
  (menu-bar-mode -1)
  ;; hide tool bar
  (tool-bar-mode -1)
  ;; hide line number
  (line-number-mode -1)
  ;; hide column number
  (column-number-mode -1)
  ;; Grow only for small window
  (setopt resize-mini-windows 'grow-only)
#+end_src
** Font application

#+begin_src emacs-lisp
  (defun my:font-setup (mode &optional family font-size)
    "Initialize fonts on window-system.

  `MODE' should be either `init' or `update'. `init' affects only
  initialization process. `update' affects all frames launched.
  "
    (let ((emoji-font "Noto Color Emoji")
          (font-size (or font-size my:font-size))
          (font-family (or family my:font-family)))
      (cond
       ((eq mode 'init)
        (let ((font-name (format "%s-%d" font-family font-size)))
          (add-to-list 'default-frame-alist `(font . ,font-name)))
        )
       ((eq mode 'update)
        (cond
         ((or (eq window-system 'x) (eq window-system 'pgtk) (eq window-system 'ns))
          (let* ((size font-size)
                 (font-set-family font-family)
                 (h (round (* size 10))))
            (when (member emoji-font (font-family-list))
              (set-fontset-font t 'symbol (font-spec :family emoji-font) nil 'prepend))
            (set-face-attribute 'default nil :family font-set-family :height h)
            ))
         (t
          (message "Not have window-system")))
        ))
      ))

  (my:font-setup 'init)
#+end_src

** interactive resize
#+begin_src emacs-lisp
  (defun my:font-resize (&optional font-size)
    "resize font interactively"
    (interactive "P")
    (let ((font-size (if font-size
                         (read-minibuffer "Font Size:")
                       my:font-size)))
      (my:font-setup 'update my:font-family font-size))
    )
#+end_src

** suppress unnecessary fontification
#+begin_src emacs-lisp
  (setq redisplay-skip-fontification-on-input t)
#+end_src

* footer
#+begin_src emacs-lisp
  (provide 'early-init)
#+end_src
