(el-get 'sync '(tuareg
                caml
                auto-complete
                parenthesis))

(require 'tuareg)
(require 'caml)
(require 'parenthesis)
;; settings for ocaml
;; typerex2の設定、インストールされていない場合は、tuareg + ocamlspotの設定
(if (executable-find "ocp-edit-mode")
    (progn
      (with-temp-buffer (insert (shell-command-to-string "ocp-edit-mode emacs -load-global-config")) (eval-buffer))
      ;; reset default tuareg-mode-hook
      (setq tuareg-mode-hook nil)
      (defun tuareg-mode-hook-1 ()
        (message "loading tuareg-mode-hook...")
        (set-buffer ocp-local-buffer)
        (setq ocamlspot-command "ocamlspot")
        (local-set-key  (kbd "C-c C-f") 'ocp-fix-errors)
        (local-set-key  (kbd "C-c C-d") 'ocp-fix-errors)
        (local-set-key "\C-c;" 'ocamlspot-query)
        (local-set-key "\C-c:" 'ocamlspot-query-interface)
        (local-set-key "\C-c'" 'ocamlspot-query-uses)
        (local-set-key "\C-c\C-t" 'ocamlspot-type)
        (local-set-key "\C-c\C-i" 'ocamlspot-xtype)
        (local-set-key "\C-c\C-y" 'ocamlspot-type-and-copy)
        (local-set-key "\C-cx" 'ocamlspot-expand)
        (local-set-key "\C-c\C-u" 'ocamlspot-use)
        (local-set-key "\C-ct" 'caml-types-show-type)
        (local-set-key "\C-cp" 'ocamlspot-pop-jump-stack)
        (show-paren-mode t)
        (setq blink-matching-paren t)
        (setq blink-matching-paren-on-screen t)
        (make-variable-buffer-local 'show-paren-style)

        (setq ocp-fix-errors-program "ocp-fix-errors")

        (setq blink-matching-paren-dont-ignore-comments t)
        (font-lock-mode t)
        (setq font-lock-maximum-decoration t)

        (setq require-final-newline t)
        (require 'auto-complete-config)
        (defun ocp-candidates()
          (let ((ocp-local-name (buffer-file-name)))
            (let (result)
              (with-temp-buffer
                (insert
                 (shell-command-to-string
                  (concat "ocp-edit-mode candidates -infile " ocp-local-name
                          " '" ac-prefix "'")))
                (eval-buffer))
              result)
            )
          )
        (defun ocp-documentation(candidate)
          (let ((ocp-local-name (buffer-file-name)))
            (let (result)
              (with-temp-buffer
                (insert
                 (shell-command-to-string
                  (concat "ocp-edit-mode documentation -infile " ocp-local-name
                          " '" candidate "'")))
                (eval-buffer))
              result)
            )
          )
        (defun ocp-prefix-longident ()
          (let ((regexp "[^a-zA-Z0-9'.]+"))
            (message (concat "ocp-prefix-longident of " regexp))
            (let ((point (re-search-backward regexp nil t)))
              (if point (1+ point)))))
        (ac-define-source ocp-complete
          '((candidates . ocp-candidates)
            (prefix . ocp-prefix-longident)
            (document . ocp-documentation)
            ))
        (setq ac-sources '(ac-source-ocp-complete ac-source-words-in-buffer))
        (auto-complete-mode)
        (setq indent-tabs-mode nil)
        (parenthesis-register-keys "('\"[" tuareg-mode-map)
        (define-abbrev tuareg-mode-abbrev-table "ite'l" "List.iter")
        (define-abbrev tuareg-mode-abbrev-table "len'l" "List.length")
        (define-abbrev tuareg-mode-abbrev-table "rev'l" "List.rev")
        (define-abbrev tuareg-mode-abbrev-table "fold_l" "List.fold_left")
        (define-abbrev tuareg-mode-abbrev-table "fold_r" "List.fold_right")
        (define-abbrev tuareg-mode-abbrev-table "map'l" "List.map")
        (define-abbrev tuareg-mode-abbrev-table "mem'l" "List.mem")
        (define-abbrev tuareg-mode-abbrev-table "memq'l" "List.memq")
        (define-abbrev tuareg-mode-abbrev-table "mem_'l" "List.mem_assoc")
        (define-abbrev tuareg-mode-abbrev-table "ass'l" "List.assq")
        (define-abbrev tuareg-mode-abbrev-table "spl'l" "List.split")
        (define-abbrev tuareg-mode-abbrev-table "com'l" "List.combine")
        (define-abbrev tuareg-mode-abbrev-table "ite'a" "Array.iter")
        (define-abbrev tuareg-mode-abbrev-table "len'a" "Array.length")
        (define-abbrev tuareg-mode-abbrev-table "set'a" "Array.set")
        (define-abbrev tuareg-mode-abbrev-table "get'a" "Array.get")
        (define-abbrev tuareg-mode-abbrev-table "cre'a" "Array.create")
        (define-abbrev tuareg-mode-abbrev-table "pr'" "Printf.printf")
        (define-abbrev tuareg-mode-abbrev-table "epr'" "Printf.eprintf")
        (define-abbrev tuareg-mode-abbrev-table "fpr'" "Printf.fprintf")
        (define-abbrev tuareg-mode-abbrev-table "bpr'" "Printf.bprintf")
        (define-abbrev tuareg-mode-abbrev-table "spr'" "Printf.sprintf")
        (define-abbrev tuareg-mode-abbrev-table "ite'h" "Hashtbl.iter")
        (define-abbrev tuareg-mode-abbrev-table "fin'h" "Hashtbl.find")
        (define-abbrev tuareg-mode-abbrev-table "add'h" "Hashtbl.add")
        (define-abbrev tuareg-mode-abbrev-table "rem'h" "Hashtbl.remove")
        (define-abbrev tuareg-mode-abbrev-table "cre'h" "Hashtbl.create")
        (define-abbrev tuareg-mode-abbrev-table "cle'h" "Hashtbl.clear")
        (define-abbrev tuareg-mode-abbrev-table "ite'q" "Queue.iter")
        (define-abbrev tuareg-mode-abbrev-table "len'q" "Queue.length")
        (define-abbrev tuareg-mode-abbrev-table "cre'q" "Queue.create")
        (define-abbrev tuareg-mode-abbrev-table "add'q" "Queue.add")
        (define-abbrev tuareg-mode-abbrev-table "get'q" "Queue.take")
        (define-abbrev tuareg-mode-abbrev-table "tak'q" "Queue.take")
        (define-abbrev tuareg-mode-abbrev-table "cle'q" "Queue.clear")
        (define-abbrev tuareg-mode-abbrev-table "emp'q" "Queue.Empty")
        (define-abbrev tuareg-mode-abbrev-table "con'f" "Filename.concat")
        (define-abbrev tuareg-mode-abbrev-table "che'f" "Filename.check_suffix")
        (define-abbrev tuareg-mode-abbrev-table "cho'f" "Filename.chop_suffix")
        (define-abbrev tuareg-mode-abbrev-table "bas'f" "Filename.basename")
        (define-abbrev tuareg-mode-abbrev-table "dir'f" "Filename.dirname")
        (define-abbrev tuareg-mode-abbrev-table "len's" "String.length")
        (define-abbrev tuareg-mode-abbrev-table "set's" "String.set")
        (define-abbrev tuareg-mode-abbrev-table "get's" "String.get")
        (define-abbrev tuareg-mode-abbrev-table "cre's" "String.create")
        (define-abbrev tuareg-mode-abbrev-table "sub's" "String.sub")
        (define-abbrev tuareg-mode-abbrev-table "cop's" "String.copy")
        (define-abbrev tuareg-mode-abbrev-table "bli's" "String.blit")
        (define-abbrev tuareg-mode-abbrev-table "con's" "String.concat")
        (define-abbrev tuareg-mode-abbrev-table "low's" "String.lowercase")
        (define-abbrev tuareg-mode-abbrev-table "upp's" "String.uppercase")
        (define-abbrev tuareg-mode-abbrev-table "cap's" "String.capitalize")
        (define-abbrev tuareg-mode-abbrev-table "unc's" "String.uncapitalize")
        (define-abbrev tuareg-mode-abbrev-table "loc'm" "Mutex.lock")
        (define-abbrev tuareg-mode-abbrev-table "unl'm" "Mutex.unlock")
        (define-abbrev tuareg-mode-abbrev-table "cre'm" "Mutex.create")
        (define-abbrev tuareg-mode-abbrev-table "cre'c" "Condition.create")
        (define-abbrev tuareg-mode-abbrev-table "wai'c" "Condition.wait")
        (define-abbrev tuareg-mode-abbrev-table "cre't" "Thread.create")
        (define-abbrev tuareg-mode-abbrev-table "len'w" "Weak.length")
        (define-abbrev tuareg-mode-abbrev-table "set'w" "Weak.set")
        (define-abbrev tuareg-mode-abbrev-table "get'w" "Weak.get")
        (define-abbrev tuareg-mode-abbrev-table "upp'c" "Char.uppercase")
        (define-abbrev tuareg-mode-abbrev-table "low'c" "Char.lowercase")
        (abbrev-mode 1)
        (add-hook 'write-contents-hooks 'delete-trailing-whitespace)
        (setq show-trailing-whitespace t)

        :; flymakeのための設定(OMake限定)
        (require 'flymake)
        (push '("File \"\\(.*\\)\", line \\([0-9]+\\), characters \\([0-9]+\\)--?\\([0-9]+\\):\\(.*\\)" 1 2 3 5) flymake-err-line-patterns)
        (push '("\\.ml\\'" flymake-ocaml-init) flymake-allowed-file-name-masks)
        (defun flymake-ocaml-init ()
          (list (expand-file-name "~/.emacs.d/ocaml-flymake.sh")))

        (require 'omake-mode)
        (setq omake-program-path (executable-find "omake"))
        (setq omake-error-highlight-background "#444400")
        (define-key tuareg-mode-map (kbd "M-O") 'omake-run)
        (define-key tuareg-mode-map (kbd "M-R") 'omake-rerun)
        (define-key tuareg-mode-map (kbd "M-P") 'omake-previous-error)
        (define-key tuareg-mode-map (kbd "M-N") 'omake-next-error)

        (message "loading tuareg-mode-hook done."))
      (add-hook 'tuareg-mode-hook 'tuareg-mode-hook-1))
  ;; typerex did not be installed.
  (progn
    (require 'caml-types)
    (setq auto-mode-alist
          (append '(("\\.ml[ily]?$" . tuareg-mode)
                    ("\\.topml$" . tuareg-mode))
                  auto-mode-alist))
    (defun tuareg-mode-hook-1 ()
      ;; indentation rules
      (setq tuareg-lazy-= t)
      (setq tuareg-lazy-paren t)
      (setq tuareg-electric-indent t)
      (setq tuareg-leading-star-in-doc t)
      (setq tuareg-function-indent 0)
      (setq tuareg-with-indent 0)
      (setq tuareg-library-path "/usr/lib/ocaml/")

      ;; turn on auto-fill minor mode
      ;; (auto-fill-mode 1)

      ;; enable auto insertion of parenthesis and quotes.
      (parenthesis-register-keys "('\"[" tuareg-mode-map)

      (require 'omake-mode)
      (setq omake-program-path (executable-find "omake"))
      (when (not (executable-find "aplay"))
        (setq omake-play-sound-program "afplay"))
      (setq omake-error-highlight-background "#444400")
      (define-key tuareg-mode-map (kbd "M-O") 'omake-run)
      (define-key tuareg-mode-map (kbd "M-R") 'omake-rerun)
      (define-key tuareg-mode-map (kbd "M-P") 'omake-previous-error)
      (define-key tuareg-mode-map (kbd "M-N") 'omake-next-error)
      (define-key tuareg-mode-map (kbd "M-O") 'omake-run)

      ;; ocamlspot and other keys
      (require 'ocamlspot)
      (local-set-key (kbd "C-c ;") 'ocamlspot-query)
      (local-set-key (kbd "C-c :") 'ocamlspot-query-interface)
      (local-set-key (kbd "C-c '") 'ocamlspot-query-uses)
      (local-set-key (kbd "C-c C-t") 'ocamlspot-type)
      (local-set-key (kbd "C-c C-i") 'ocamlspot-xtype)
      (local-set-key (kbd "C-c C-y") 'ocamlspot-type-and-copy)
      (local-set-key (kbd "C-c x") 'ocamlspot-expand)
      (local-set-key (kbd "C-c C-u") 'ocamlspot-use)
      (local-set-key (kbd "C-c t") 'caml-types-show-type)
      (local-set-key (kbd "C-c p") 'ocamlspot-pop-jump-stack)
      )
    (add-hook 'tuareg-mode-hook 'tuareg-mode-hook-1)
    ))
