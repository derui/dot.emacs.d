;; ~/.config/emacs/templates

fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

lisp-mode emacs-lisp-mode ;; Specify multiple modes

(lambda "(lambda (" p ")" n> r> ")")

emacs-lisp-mode

(autoload ";;;###autoload")
(pt "(point)")
(var "(defvar " p "\n  \"" p "\")")
(local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(alias "(defalias '" p " '" p ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(iflet "(if-let (" p ")" n> r> ")")
(whenlet "(when-let (" p ")" n> r> ")")
(whilelet "(while-let (" p ")" n> r> ")")
(andlet "(and-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " (p "scrutinee") n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(lett "(let* (" p ")" n> r> ")")
(pcaselet "(pcase-let (" p ")" n> r> ")")
(pcaselett "(pcase-let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(advice "(defun " (p "adv" name) " (&rest app)" n> p n> "(apply app))" n>
        "(advice-add #'" (p "fun") " " (p ":around") " #'" (s name) ")")
(header ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name)))
        " -- " p " -*- lexical-binding: t -*-" n
        ";;; Commentary:" n ";;; Code:" n n)
(provide "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name)))
         " ends here" n)

(package-define "(eval-when-compile" n>
                "(elpaca (" (p "package" package) ")))"
                n> n>
                "(with-eval-after-load '" (s package) n> ")"
                n> n>
                "(with-low-priority-startup" n>
                "(load-package " (s package) "))"
                )

text-mode

(abox "+-" (make-string (length str) ?-) "-+" n
      "| " (s str)                       " |" n
      "+-" (make-string (length str) ?-) "-+" n)

;; commit comment
(cc (completing-read "> " '("feat" "fix" "[ci skip] docs" "style" "refactor" "perf" "test" "chore")) ": ")

c-mode :when (re-search-backward "^\\S-*$" (line-beginning-position) 'noerror)

(inc "#include <" (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) ">")
(incc "#include \"" (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) "\"")

typescript-ts-mode tsx-ts-mode typescript-mode

;; one line and lambda
(ol "(" p ")" " => ")
(lam "(" p ") => {" n> r> n> "}")
;; for testing
(tit "it('" p "', () => {" n> r> n> "});")
(tt "test('" p "', () => {" n> r> n> "});")
;; function definitions
(fun "const " (p "Fun name" name) " = function " name "(" p ")" p " {" n> r> n>"};")
(far "const " (p "Fun name" name) " = (" p ")" p " {" n> r> n> "};")
;; document template
(doc "/**" n " * " r n " */")

ocaml-ts-mode tuareg-mode

(fun "fun " (p "()") " -> " "(" r ")")
(lam "fun " (p "()") " -> " r)
(modsig "module " (p "Name") " : sig" n> r> n> "end")
(module "module " (p "Name") " = struct" n> r> n> "end")
(modtype "module type " (p "Name") " = sig" n> r> n> "end")

rust-ts-mode

;; 文もふくめられるlambda
(fun "|" p "|" "{" r "}")
;; 式単独のlambda
(lam "|" p "|"  r )
(defun "fn " p "(" p ")" "{" n> r> n> "}")
(tmod "#[cfg(test)]\n mod tests {" n> "use super::*;" n> r> "}")
(test "#[test]" n> "fn " (p "name") "() {" n>
      "// arrange"
      n>
      r>
      n>
      "// act"
      n> n>
      "// assert"
      n>
      "}"
      )

;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
